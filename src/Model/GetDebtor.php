<?php

/**
 * GetDebtor
 *
 * PHP version 5
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Paqtcom\Simplicate\Model;

use ArrayAccess;
use Paqtcom\Simplicate\ObjectSerializer;

/**
 * GetDebtor Class Doc Comment
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetDebtor implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $swaggerModelName = 'GetDebtor';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerTypes = [
        'payment_term' => '\Paqtcom\Simplicate\Model\GetPaymentTerm',
        'provision_method' => 'string',
        'send_invoice_email_to_contact' => 'bool',
        'provision_contactperson_id' => 'string',
        'send_invoice_email_to_project_contact' => 'bool',
        'send_invoice_email_to_fixed_email' => 'bool',
        'send_email_email' => 'string',
        'send_invoice_email_to_cc' => 'bool',
        'cc' => 'null[]',
        'attention_to' => 'string',
        'attention_to_person_id' => 'string',
        'attention_to_fixed' => 'string',
        'autocollect' => 'bool',
        'reminders' => 'bool',
        'send_email_type' => 'string',
        'autosend_subscription_invoice' => 'bool',
        'invoicetemplate_id' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerFormats = [
        'payment_term' => null,
        'provision_method' => null,
        'send_invoice_email_to_contact' => null,
        'provision_contactperson_id' => null,
        'send_invoice_email_to_project_contact' => null,
        'send_invoice_email_to_fixed_email' => null,
        'send_email_email' => null,
        'send_invoice_email_to_cc' => null,
        'cc' => null,
        'attention_to' => null,
        'attention_to_person_id' => null,
        'attention_to_fixed' => null,
        'autocollect' => null,
        'reminders' => null,
        'send_email_type' => null,
        'autosend_subscription_invoice' => null,
        'invoicetemplate_id' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'payment_term' => 'payment_term',
        'provision_method' => 'provision_method',
        'send_invoice_email_to_contact' => 'send_invoice_email_to_contact',
        'provision_contactperson_id' => 'provision_contactperson_id',
        'send_invoice_email_to_project_contact' => 'send_invoice_email_to_project_contact',
        'send_invoice_email_to_fixed_email' => 'send_invoice_email_to_fixed_email',
        'send_email_email' => 'send_email_email',
        'send_invoice_email_to_cc' => 'send_invoice_email_to_cc',
        'cc' => 'cc',
        'attention_to' => 'attention_to',
        'attention_to_person_id' => 'attention_to_person_id',
        'attention_to_fixed' => 'attention_to_fixed',
        'autocollect' => 'autocollect',
        'reminders' => 'reminders',
        'send_email_type' => 'send_email_type',
        'autosend_subscription_invoice' => 'autosend_subscription_invoice',
        'invoicetemplate_id' => 'invoicetemplate_id',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'payment_term' => 'setPaymentTerm',
        'provision_method' => 'setProvisionMethod',
        'send_invoice_email_to_contact' => 'setSendInvoiceEmailToContact',
        'provision_contactperson_id' => 'setProvisionContactpersonId',
        'send_invoice_email_to_project_contact' => 'setSendInvoiceEmailToProjectContact',
        'send_invoice_email_to_fixed_email' => 'setSendInvoiceEmailToFixedEmail',
        'send_email_email' => 'setSendEmailEmail',
        'send_invoice_email_to_cc' => 'setSendInvoiceEmailToCc',
        'cc' => 'setCc',
        'attention_to' => 'setAttentionTo',
        'attention_to_person_id' => 'setAttentionToPersonId',
        'attention_to_fixed' => 'setAttentionToFixed',
        'autocollect' => 'setAutocollect',
        'reminders' => 'setReminders',
        'send_email_type' => 'setSendEmailType',
        'autosend_subscription_invoice' => 'setAutosendSubscriptionInvoice',
        'invoicetemplate_id' => 'setInvoicetemplateId',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'payment_term' => 'getPaymentTerm',
        'provision_method' => 'getProvisionMethod',
        'send_invoice_email_to_contact' => 'getSendInvoiceEmailToContact',
        'provision_contactperson_id' => 'getProvisionContactpersonId',
        'send_invoice_email_to_project_contact' => 'getSendInvoiceEmailToProjectContact',
        'send_invoice_email_to_fixed_email' => 'getSendInvoiceEmailToFixedEmail',
        'send_email_email' => 'getSendEmailEmail',
        'send_invoice_email_to_cc' => 'getSendInvoiceEmailToCc',
        'cc' => 'getCc',
        'attention_to' => 'getAttentionTo',
        'attention_to_person_id' => 'getAttentionToPersonId',
        'attention_to_fixed' => 'getAttentionToFixed',
        'autocollect' => 'getAutocollect',
        'reminders' => 'getReminders',
        'send_email_type' => 'getSendEmailType',
        'autosend_subscription_invoice' => 'getAutosendSubscriptionInvoice',
        'invoicetemplate_id' => 'getInvoicetemplateId',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const PROVISION_METHOD_POST = 'post';
    public const PROVISION_METHOD_EMAIL = 'email';
    public const ATTENTION_TO_NONE = 'none';
    public const ATTENTION_TO_CONTACT = 'contact';
    public const ATTENTION_TO_CREDITOR = 'creditor';
    public const SEND_EMAIL_TYPE_FIXED = 'fixed';
    public const SEND_EMAIL_TYPE_CONTACT = 'contact';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProvisionMethodAllowableValues()
    {
        return [
            self::PROVISION_METHOD_POST,
            self::PROVISION_METHOD_EMAIL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAttentionToAllowableValues()
    {
        return [
            self::ATTENTION_TO_NONE,
            self::ATTENTION_TO_CONTACT,
            self::ATTENTION_TO_CREDITOR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendEmailTypeAllowableValues()
    {
        return [
            self::SEND_EMAIL_TYPE_FIXED,
            self::SEND_EMAIL_TYPE_CONTACT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_term'] = isset($data['payment_term']) ? $data['payment_term'] : null;
        $this->container['provision_method'] = isset($data['provision_method']) ? $data['provision_method'] : null;
        $this->container['send_invoice_email_to_contact'] = isset($data['send_invoice_email_to_contact']) ? $data['send_invoice_email_to_contact'] : null;
        $this->container['provision_contactperson_id'] = isset($data['provision_contactperson_id']) ? $data['provision_contactperson_id'] : null;
        $this->container['send_invoice_email_to_project_contact'] = isset($data['send_invoice_email_to_project_contact']) ? $data['send_invoice_email_to_project_contact'] : null;
        $this->container['send_invoice_email_to_fixed_email'] = isset($data['send_invoice_email_to_fixed_email']) ? $data['send_invoice_email_to_fixed_email'] : null;
        $this->container['send_email_email'] = isset($data['send_email_email']) ? $data['send_email_email'] : null;
        $this->container['send_invoice_email_to_cc'] = isset($data['send_invoice_email_to_cc']) ? $data['send_invoice_email_to_cc'] : null;
        $this->container['cc'] = isset($data['cc']) ? $data['cc'] : null;
        $this->container['attention_to'] = isset($data['attention_to']) ? $data['attention_to'] : null;
        $this->container['attention_to_person_id'] = isset($data['attention_to_person_id']) ? $data['attention_to_person_id'] : null;
        $this->container['attention_to_fixed'] = isset($data['attention_to_fixed']) ? $data['attention_to_fixed'] : null;
        $this->container['autocollect'] = isset($data['autocollect']) ? $data['autocollect'] : null;
        $this->container['reminders'] = isset($data['reminders']) ? $data['reminders'] : null;
        $this->container['send_email_type'] = isset($data['send_email_type']) ? $data['send_email_type'] : null;
        $this->container['autosend_subscription_invoice'] = isset($data['autosend_subscription_invoice']) ? $data['autosend_subscription_invoice'] : null;
        $this->container['invoicetemplate_id'] = isset($data['invoicetemplate_id']) ? $data['invoicetemplate_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProvisionMethodAllowableValues();
        if (!is_null($this->container['provision_method']) && !in_array($this->container['provision_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'provision_method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAttentionToAllowableValues();
        if (!is_null($this->container['attention_to']) && !in_array($this->container['attention_to'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'attention_to', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSendEmailTypeAllowableValues();
        if (!is_null($this->container['send_email_type']) && !in_array($this->container['send_email_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'send_email_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets payment_term
     *
     * @return \Paqtcom\Simplicate\Model\GetPaymentTerm
     */
    public function getPaymentTerm()
    {
        return $this->container['payment_term'];
    }

    /**
     * Sets payment_term
     *
     * @param \Paqtcom\Simplicate\Model\GetPaymentTerm $payment_term payment_term
     *
     * @return $this
     */
    public function setPaymentTerm($payment_term)
    {
        $this->container['payment_term'] = $payment_term;

        return $this;
    }

    /**
     * Gets provision_method
     *
     * @return string
     */
    public function getProvisionMethod()
    {
        return $this->container['provision_method'];
    }

    /**
     * Sets provision_method
     *
     * @param string $provision_method provision_method
     *
     * @return $this
     */
    public function setProvisionMethod($provision_method)
    {
        $allowedValues = $this->getProvisionMethodAllowableValues();
        if (!is_null($provision_method) && !in_array($provision_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'provision_method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['provision_method'] = $provision_method;

        return $this;
    }

    /**
     * Gets send_invoice_email_to_contact
     *
     * @return bool
     */
    public function getSendInvoiceEmailToContact()
    {
        return $this->container['send_invoice_email_to_contact'];
    }

    /**
     * Sets send_invoice_email_to_contact
     *
     * @param bool $send_invoice_email_to_contact send_invoice_email_to_contact
     *
     * @return $this
     */
    public function setSendInvoiceEmailToContact($send_invoice_email_to_contact)
    {
        $this->container['send_invoice_email_to_contact'] = $send_invoice_email_to_contact;

        return $this;
    }

    /**
     * Gets provision_contactperson_id
     *
     * @return string
     */
    public function getProvisionContactpersonId()
    {
        return $this->container['provision_contactperson_id'];
    }

    /**
     * Sets provision_contactperson_id
     *
     * @param string $provision_contactperson_id See /crm/person
     *
     * @return $this
     */
    public function setProvisionContactpersonId($provision_contactperson_id)
    {
        $this->container['provision_contactperson_id'] = $provision_contactperson_id;

        return $this;
    }

    /**
     * Gets send_invoice_email_to_project_contact
     *
     * @return bool
     */
    public function getSendInvoiceEmailToProjectContact()
    {
        return $this->container['send_invoice_email_to_project_contact'];
    }

    /**
     * Sets send_invoice_email_to_project_contact
     *
     * @param bool $send_invoice_email_to_project_contact send_invoice_email_to_project_contact
     *
     * @return $this
     */
    public function setSendInvoiceEmailToProjectContact($send_invoice_email_to_project_contact)
    {
        $this->container['send_invoice_email_to_project_contact'] = $send_invoice_email_to_project_contact;

        return $this;
    }

    /**
     * Gets send_invoice_email_to_fixed_email
     *
     * @return bool
     */
    public function getSendInvoiceEmailToFixedEmail()
    {
        return $this->container['send_invoice_email_to_fixed_email'];
    }

    /**
     * Sets send_invoice_email_to_fixed_email
     *
     * @param bool $send_invoice_email_to_fixed_email send_invoice_email_to_fixed_email
     *
     * @return $this
     */
    public function setSendInvoiceEmailToFixedEmail($send_invoice_email_to_fixed_email)
    {
        $this->container['send_invoice_email_to_fixed_email'] = $send_invoice_email_to_fixed_email;

        return $this;
    }

    /**
     * Gets send_email_email
     *
     * @return string
     */
    public function getSendEmailEmail()
    {
        return $this->container['send_email_email'];
    }

    /**
     * Sets send_email_email
     *
     * @param string $send_email_email send_email_email
     *
     * @return $this
     */
    public function setSendEmailEmail($send_email_email)
    {
        $this->container['send_email_email'] = $send_email_email;

        return $this;
    }

    /**
     * Gets send_invoice_email_to_cc
     *
     * @return bool
     */
    public function getSendInvoiceEmailToCc()
    {
        return $this->container['send_invoice_email_to_cc'];
    }

    /**
     * Sets send_invoice_email_to_cc
     *
     * @param bool $send_invoice_email_to_cc send_invoice_email_to_cc
     *
     * @return $this
     */
    public function setSendInvoiceEmailToCc($send_invoice_email_to_cc)
    {
        $this->container['send_invoice_email_to_cc'] = $send_invoice_email_to_cc;

        return $this;
    }

    /**
     * Gets cc
     *
     * @return null[]
     */
    public function getCc()
    {
        return $this->container['cc'];
    }

    /**
     * Sets cc
     *
     * @param null[] $cc cc
     *
     * @return $this
     */
    public function setCc($cc)
    {
        $this->container['cc'] = $cc;

        return $this;
    }

    /**
     * Gets attention_to
     *
     * @return string
     */
    public function getAttentionTo()
    {
        return $this->container['attention_to'];
    }

    /**
     * Sets attention_to
     *
     * @param string $attention_to attention_to
     *
     * @return $this
     */
    public function setAttentionTo($attention_to)
    {
        $allowedValues = $this->getAttentionToAllowableValues();
        if (!is_null($attention_to) && !in_array($attention_to, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'attention_to', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['attention_to'] = $attention_to;

        return $this;
    }

    /**
     * Gets attention_to_person_id
     *
     * @return string
     */
    public function getAttentionToPersonId()
    {
        return $this->container['attention_to_person_id'];
    }

    /**
     * Sets attention_to_person_id
     *
     * @param string $attention_to_person_id See /crm/person
     *
     * @return $this
     */
    public function setAttentionToPersonId($attention_to_person_id)
    {
        $this->container['attention_to_person_id'] = $attention_to_person_id;

        return $this;
    }

    /**
     * Gets attention_to_fixed
     *
     * @return string
     */
    public function getAttentionToFixed()
    {
        return $this->container['attention_to_fixed'];
    }

    /**
     * Sets attention_to_fixed
     *
     * @param string $attention_to_fixed attention_to_fixed
     *
     * @return $this
     */
    public function setAttentionToFixed($attention_to_fixed)
    {
        $this->container['attention_to_fixed'] = $attention_to_fixed;

        return $this;
    }

    /**
     * Gets autocollect
     *
     * @return bool
     */
    public function getAutocollect()
    {
        return $this->container['autocollect'];
    }

    /**
     * Sets autocollect
     *
     * @param bool $autocollect autocollect
     *
     * @return $this
     */
    public function setAutocollect($autocollect)
    {
        $this->container['autocollect'] = $autocollect;

        return $this;
    }

    /**
     * Gets reminders
     *
     * @return bool
     */
    public function getReminders()
    {
        return $this->container['reminders'];
    }

    /**
     * Sets reminders
     *
     * @param bool $reminders reminders
     *
     * @return $this
     */
    public function setReminders($reminders)
    {
        $this->container['reminders'] = $reminders;

        return $this;
    }

    /**
     * Gets send_email_type
     *
     * @return string
     */
    public function getSendEmailType()
    {
        return $this->container['send_email_type'];
    }

    /**
     * Sets send_email_type
     *
     * @param string $send_email_type send_email_type
     *
     * @return $this
     */
    public function setSendEmailType($send_email_type)
    {
        $allowedValues = $this->getSendEmailTypeAllowableValues();
        if (!is_null($send_email_type) && !in_array($send_email_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'send_email_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_email_type'] = $send_email_type;

        return $this;
    }

    /**
     * Gets autosend_subscription_invoice
     *
     * @return bool
     */
    public function getAutosendSubscriptionInvoice()
    {
        return $this->container['autosend_subscription_invoice'];
    }

    /**
     * Sets autosend_subscription_invoice
     *
     * @param bool $autosend_subscription_invoice autosend_subscription_invoice
     *
     * @return $this
     */
    public function setAutosendSubscriptionInvoice($autosend_subscription_invoice)
    {
        $this->container['autosend_subscription_invoice'] = $autosend_subscription_invoice;

        return $this;
    }

    /**
     * Gets invoicetemplate_id
     *
     * @return string
     */
    public function getInvoicetemplateId()
    {
        return $this->container['invoicetemplate_id'];
    }

    /**
     * Sets invoicetemplate_id
     *
     * @param string $invoicetemplate_id invoicetemplate_id
     *
     * @return $this
     */
    public function setInvoicetemplateId($invoicetemplate_id)
    {
        $this->container['invoicetemplate_id'] = $invoicetemplate_id;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
