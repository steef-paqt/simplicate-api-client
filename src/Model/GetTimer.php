<?php
/**
 * GetTimer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetTimer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetTimer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetTimer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'seconds_spent' => 'int',
        'min_seconds_step' => 'int',
        'employee' => '\Swagger\Client\Model\GetEmployeeSimple',
        'project' => '\Swagger\Client\Model\GetProjectSimple',
        'projectservice' => '\Swagger\Client\Model\GetProjectServiceSimple',
        'hourstype' => '\Swagger\Client\Model\GetHoursType',
        'related_hours' => '\Swagger\Client\Model\GetHoursSimple',
        'created_at' => 'string',
        'updated_at' => 'string',
        'state' => 'string',
        'description' => 'string',
        'metadata' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'seconds_spent' => null,
        'min_seconds_step' => null,
        'employee' => null,
        'project' => null,
        'projectservice' => null,
        'hourstype' => null,
        'related_hours' => null,
        'created_at' => null,
        'updated_at' => null,
        'state' => null,
        'description' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'seconds_spent' => 'seconds_spent',
        'min_seconds_step' => 'min_seconds_step',
        'employee' => 'employee',
        'project' => 'project',
        'projectservice' => 'projectservice',
        'hourstype' => 'hourstype',
        'related_hours' => 'related_hours',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'state' => 'state',
        'description' => 'description',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'seconds_spent' => 'setSecondsSpent',
        'min_seconds_step' => 'setMinSecondsStep',
        'employee' => 'setEmployee',
        'project' => 'setProject',
        'projectservice' => 'setProjectservice',
        'hourstype' => 'setHourstype',
        'related_hours' => 'setRelatedHours',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'state' => 'setState',
        'description' => 'setDescription',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'seconds_spent' => 'getSecondsSpent',
        'min_seconds_step' => 'getMinSecondsStep',
        'employee' => 'getEmployee',
        'project' => 'getProject',
        'projectservice' => 'getProjectservice',
        'hourstype' => 'getHourstype',
        'related_hours' => 'getRelatedHours',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'state' => 'getState',
        'description' => 'getDescription',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_RUNNING = 'running';
    const STATE_PAUSED = 'paused';
    const STATE_FINISHED = 'finished';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_RUNNING,
            self::STATE_PAUSED,
            self::STATE_FINISHED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['seconds_spent'] = isset($data['seconds_spent']) ? $data['seconds_spent'] : null;
        $this->container['min_seconds_step'] = isset($data['min_seconds_step']) ? $data['min_seconds_step'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['projectservice'] = isset($data['projectservice']) ? $data['projectservice'] : null;
        $this->container['hourstype'] = isset($data['hourstype']) ? $data['hourstype'] : null;
        $this->container['related_hours'] = isset($data['related_hours']) ? $data['related_hours'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets seconds_spent
     *
     * @return int
     */
    public function getSecondsSpent()
    {
        return $this->container['seconds_spent'];
    }

    /**
     * Sets seconds_spent
     *
     * @param int $seconds_spent seconds_spent
     *
     * @return $this
     */
    public function setSecondsSpent($seconds_spent)
    {
        $this->container['seconds_spent'] = $seconds_spent;

        return $this;
    }

    /**
     * Gets min_seconds_step
     *
     * @return int
     */
    public function getMinSecondsStep()
    {
        return $this->container['min_seconds_step'];
    }

    /**
     * Sets min_seconds_step
     *
     * @param int $min_seconds_step min_seconds_step
     *
     * @return $this
     */
    public function setMinSecondsStep($min_seconds_step)
    {
        $this->container['min_seconds_step'] = $min_seconds_step;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \Swagger\Client\Model\GetEmployeeSimple
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \Swagger\Client\Model\GetEmployeeSimple $employee employee
     *
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\GetProjectSimple
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\GetProjectSimple $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets projectservice
     *
     * @return \Swagger\Client\Model\GetProjectServiceSimple
     */
    public function getProjectservice()
    {
        return $this->container['projectservice'];
    }

    /**
     * Sets projectservice
     *
     * @param \Swagger\Client\Model\GetProjectServiceSimple $projectservice projectservice
     *
     * @return $this
     */
    public function setProjectservice($projectservice)
    {
        $this->container['projectservice'] = $projectservice;

        return $this;
    }

    /**
     * Gets hourstype
     *
     * @return \Swagger\Client\Model\GetHoursType
     */
    public function getHourstype()
    {
        return $this->container['hourstype'];
    }

    /**
     * Sets hourstype
     *
     * @param \Swagger\Client\Model\GetHoursType $hourstype hourstype
     *
     * @return $this
     */
    public function setHourstype($hourstype)
    {
        $this->container['hourstype'] = $hourstype;

        return $this;
    }

    /**
     * Gets related_hours
     *
     * @return \Swagger\Client\Model\GetHoursSimple
     */
    public function getRelatedHours()
    {
        return $this->container['related_hours'];
    }

    /**
     * Sets related_hours
     *
     * @param \Swagger\Client\Model\GetHoursSimple $related_hours related_hours
     *
     * @return $this
     */
    public function setRelatedHours($related_hours)
    {
        $this->container['related_hours'] = $related_hours;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string $metadata JSON
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


