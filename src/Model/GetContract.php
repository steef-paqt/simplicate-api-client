<?php

/**
 * GetContract
 *
 * PHP version 5
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Paqtcom\Simplicate\Model;

use ArrayAccess;
use Paqtcom\Simplicate\ObjectSerializer;

/**
 * GetContract Class Doc Comment
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetContract implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $swaggerModelName = 'GetContract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerTypes = [
        'id' => 'string',
        'employee' => '\Paqtcom\Simplicate\Model\GetEmployee',
        'employer' => '\Paqtcom\Simplicate\Model\GetOrganizationSimple',
        'employment_type' => '\Paqtcom\Simplicate\Model\EmploymentType',
        'contract_type' => '\Paqtcom\Simplicate\Model\ContractType',
        'created_at' => 'string',
        'updated_at' => 'string',
        'start_date' => 'string',
        'end_date' => 'bool',
        'salary_fulltime' => 'float',
        'parttime_percentage' => 'float',
        'days_off' => 'float',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerFormats = [
        'id' => null,
        'employee' => null,
        'employer' => null,
        'employment_type' => null,
        'contract_type' => null,
        'created_at' => null,
        'updated_at' => null,
        'start_date' => null,
        'end_date' => null,
        'salary_fulltime' => 'float',
        'parttime_percentage' => 'float',
        'days_off' => 'float',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'employee' => 'employee',
        'employer' => 'employer',
        'employment_type' => 'employment_type',
        'contract_type' => 'contract_type',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'salary_fulltime' => 'salary_fulltime',
        'parttime_percentage' => 'parttime_percentage',
        'days_off' => 'days_off',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'id' => 'setId',
        'employee' => 'setEmployee',
        'employer' => 'setEmployer',
        'employment_type' => 'setEmploymentType',
        'contract_type' => 'setContractType',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'salary_fulltime' => 'setSalaryFulltime',
        'parttime_percentage' => 'setParttimePercentage',
        'days_off' => 'setDaysOff',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'id' => 'getId',
        'employee' => 'getEmployee',
        'employer' => 'getEmployer',
        'employment_type' => 'getEmploymentType',
        'contract_type' => 'getContractType',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'salary_fulltime' => 'getSalaryFulltime',
        'parttime_percentage' => 'getParttimePercentage',
        'days_off' => 'getDaysOff',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['employer'] = isset($data['employer']) ? $data['employer'] : null;
        $this->container['employment_type'] = isset($data['employment_type']) ? $data['employment_type'] : null;
        $this->container['contract_type'] = isset($data['contract_type']) ? $data['contract_type'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['salary_fulltime'] = isset($data['salary_fulltime']) ? $data['salary_fulltime'] : null;
        $this->container['parttime_percentage'] = isset($data['parttime_percentage']) ? $data['parttime_percentage'] : null;
        $this->container['days_off'] = isset($data['days_off']) ? $data['days_off'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \Paqtcom\Simplicate\Model\GetEmployee
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \Paqtcom\Simplicate\Model\GetEmployee $employee employee
     *
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets employer
     *
     * @return \Paqtcom\Simplicate\Model\GetOrganizationSimple
     */
    public function getEmployer()
    {
        return $this->container['employer'];
    }

    /**
     * Sets employer
     *
     * @param \Paqtcom\Simplicate\Model\GetOrganizationSimple $employer employer
     *
     * @return $this
     */
    public function setEmployer($employer)
    {
        $this->container['employer'] = $employer;

        return $this;
    }

    /**
     * Gets employment_type
     *
     * @return \Paqtcom\Simplicate\Model\EmploymentType
     */
    public function getEmploymentType()
    {
        return $this->container['employment_type'];
    }

    /**
     * Sets employment_type
     *
     * @param \Paqtcom\Simplicate\Model\EmploymentType $employment_type employment_type
     *
     * @return $this
     */
    public function setEmploymentType($employment_type)
    {
        $this->container['employment_type'] = $employment_type;

        return $this;
    }

    /**
     * Gets contract_type
     *
     * @return \Paqtcom\Simplicate\Model\ContractType
     */
    public function getContractType()
    {
        return $this->container['contract_type'];
    }

    /**
     * Sets contract_type
     *
     * @param \Paqtcom\Simplicate\Model\ContractType $contract_type contract_type
     *
     * @return $this
     */
    public function setContractType($contract_type)
    {
        $this->container['contract_type'] = $contract_type;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return bool
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param bool $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets salary_fulltime
     *
     * @return float
     */
    public function getSalaryFulltime()
    {
        return $this->container['salary_fulltime'];
    }

    /**
     * Sets salary_fulltime
     *
     * @param float $salary_fulltime salary_fulltime
     *
     * @return $this
     */
    public function setSalaryFulltime($salary_fulltime)
    {
        $this->container['salary_fulltime'] = $salary_fulltime;

        return $this;
    }

    /**
     * Gets parttime_percentage
     *
     * @return float
     */
    public function getParttimePercentage()
    {
        return $this->container['parttime_percentage'];
    }

    /**
     * Sets parttime_percentage
     *
     * @param float $parttime_percentage parttime_percentage
     *
     * @return $this
     */
    public function setParttimePercentage($parttime_percentage)
    {
        $this->container['parttime_percentage'] = $parttime_percentage;

        return $this;
    }

    /**
     * Gets days_off
     *
     * @return float
     */
    public function getDaysOff()
    {
        return $this->container['days_off'];
    }

    /**
     * Sets days_off
     *
     * @param float $days_off days_off
     *
     * @return $this
     */
    public function setDaysOff($days_off)
    {
        $this->container['days_off'] = $days_off;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
