<?php
/**
 * GetHours
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetHours Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetHours implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetHours';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'employee' => '\Swagger\Client\Model\GetEmployeeSimple',
        'project' => '\Swagger\Client\Model\GetProjectSimple',
        'projectservice' => '\Swagger\Client\Model\GetHoursHoursProjectService',
        'type' => 'object',
        'approvalstatus' => '\Swagger\Client\Model\GetApprovalStatus',
        'invoice_status' => 'string',
        'invoice_id' => 'string',
        'invoiceline_id' => 'string',
        'tariff' => 'float',
        'custom_fields' => '\Swagger\Client\Model\GetCustomField[]',
        'created_at' => 'string',
        'updated_at' => 'string',
        'locked' => 'bool',
        'is_editable' => '\Swagger\Client\Model\IsSatisfied',
        'is_deletable' => '\Swagger\Client\Model\IsSatisfied',
        'leave_status' => '\Swagger\Client\Model\LeaveStatus',
        'leave_id' => 'string',
        'absence_id' => 'string',
        'status' => 'string',
        'corrections' => '\Swagger\Client\Model\Correction',
        'mileage' => '\Swagger\Client\Model\GetMileageSimple',
        'is_productive' => 'bool',
        'hours' => 'float',
        'duration_in_minutes' => 'int',
        'start_date' => 'string',
        'end_date' => 'string',
        'is_time_defined' => 'bool',
        'is_recurring' => 'bool',
        'recurrence' => '\Swagger\Client\Model\Recurrence',
        'is_external' => 'bool',
        'billable' => 'bool',
        'note' => 'string',
        'address' => '\Swagger\Client\Model\Address',
        'assignment_id' => 'string',
        'should_sync_to_cronofy' => 'bool',
        'source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'employee' => null,
        'project' => null,
        'projectservice' => null,
        'type' => null,
        'approvalstatus' => null,
        'invoice_status' => null,
        'invoice_id' => null,
        'invoiceline_id' => null,
        'tariff' => 'float',
        'custom_fields' => null,
        'created_at' => null,
        'updated_at' => null,
        'locked' => null,
        'is_editable' => null,
        'is_deletable' => null,
        'leave_status' => null,
        'leave_id' => null,
        'absence_id' => null,
        'status' => null,
        'corrections' => null,
        'mileage' => null,
        'is_productive' => null,
        'hours' => 'float',
        'duration_in_minutes' => null,
        'start_date' => null,
        'end_date' => null,
        'is_time_defined' => null,
        'is_recurring' => null,
        'recurrence' => null,
        'is_external' => null,
        'billable' => null,
        'note' => null,
        'address' => null,
        'assignment_id' => null,
        'should_sync_to_cronofy' => null,
        'source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee' => 'employee',
        'project' => 'project',
        'projectservice' => 'projectservice',
        'type' => 'type',
        'approvalstatus' => 'approvalstatus',
        'invoice_status' => 'invoice_status',
        'invoice_id' => 'invoice_id',
        'invoiceline_id' => 'invoiceline_id',
        'tariff' => 'tariff',
        'custom_fields' => 'custom_fields',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'locked' => 'locked',
        'is_editable' => 'is_editable',
        'is_deletable' => 'is_deletable',
        'leave_status' => 'leave_status',
        'leave_id' => 'leave_id',
        'absence_id' => 'absence_id',
        'status' => 'status',
        'corrections' => 'corrections',
        'mileage' => 'mileage',
        'is_productive' => 'is_productive',
        'hours' => 'hours',
        'duration_in_minutes' => 'duration_in_minutes',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'is_time_defined' => 'is_time_defined',
        'is_recurring' => 'is_recurring',
        'recurrence' => 'recurrence',
        'is_external' => 'is_external',
        'billable' => 'billable',
        'note' => 'note',
        'address' => 'address',
        'assignment_id' => 'assignment_id',
        'should_sync_to_cronofy' => 'should_sync_to_cronofy',
        'source' => 'source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee' => 'setEmployee',
        'project' => 'setProject',
        'projectservice' => 'setProjectservice',
        'type' => 'setType',
        'approvalstatus' => 'setApprovalstatus',
        'invoice_status' => 'setInvoiceStatus',
        'invoice_id' => 'setInvoiceId',
        'invoiceline_id' => 'setInvoicelineId',
        'tariff' => 'setTariff',
        'custom_fields' => 'setCustomFields',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'locked' => 'setLocked',
        'is_editable' => 'setIsEditable',
        'is_deletable' => 'setIsDeletable',
        'leave_status' => 'setLeaveStatus',
        'leave_id' => 'setLeaveId',
        'absence_id' => 'setAbsenceId',
        'status' => 'setStatus',
        'corrections' => 'setCorrections',
        'mileage' => 'setMileage',
        'is_productive' => 'setIsProductive',
        'hours' => 'setHours',
        'duration_in_minutes' => 'setDurationInMinutes',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'is_time_defined' => 'setIsTimeDefined',
        'is_recurring' => 'setIsRecurring',
        'recurrence' => 'setRecurrence',
        'is_external' => 'setIsExternal',
        'billable' => 'setBillable',
        'note' => 'setNote',
        'address' => 'setAddress',
        'assignment_id' => 'setAssignmentId',
        'should_sync_to_cronofy' => 'setShouldSyncToCronofy',
        'source' => 'setSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee' => 'getEmployee',
        'project' => 'getProject',
        'projectservice' => 'getProjectservice',
        'type' => 'getType',
        'approvalstatus' => 'getApprovalstatus',
        'invoice_status' => 'getInvoiceStatus',
        'invoice_id' => 'getInvoiceId',
        'invoiceline_id' => 'getInvoicelineId',
        'tariff' => 'getTariff',
        'custom_fields' => 'getCustomFields',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'locked' => 'getLocked',
        'is_editable' => 'getIsEditable',
        'is_deletable' => 'getIsDeletable',
        'leave_status' => 'getLeaveStatus',
        'leave_id' => 'getLeaveId',
        'absence_id' => 'getAbsenceId',
        'status' => 'getStatus',
        'corrections' => 'getCorrections',
        'mileage' => 'getMileage',
        'is_productive' => 'getIsProductive',
        'hours' => 'getHours',
        'duration_in_minutes' => 'getDurationInMinutes',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'is_time_defined' => 'getIsTimeDefined',
        'is_recurring' => 'getIsRecurring',
        'recurrence' => 'getRecurrence',
        'is_external' => 'getIsExternal',
        'billable' => 'getBillable',
        'note' => 'getNote',
        'address' => 'getAddress',
        'assignment_id' => 'getAssignmentId',
        'should_sync_to_cronofy' => 'getShouldSyncToCronofy',
        'source' => 'getSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INVOICE_STATUS_FLUSHED = 'flushed';
    const INVOICE_STATUS_INVOICED = 'invoiced';
    const INVOICE_STATUS_INDIRECTLY = 'indirectly';
    const SOURCE_SCHEDULE = 'schedule';
    const SOURCE_TIMER = 'timer';
    const SOURCE_TIMESHEET = 'timesheet';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceStatusAllowableValues()
    {
        return [
            self::INVOICE_STATUS_FLUSHED,
            self::INVOICE_STATUS_INVOICED,
            self::INVOICE_STATUS_INDIRECTLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_SCHEDULE,
            self::SOURCE_TIMER,
            self::SOURCE_TIMESHEET,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['projectservice'] = isset($data['projectservice']) ? $data['projectservice'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['approvalstatus'] = isset($data['approvalstatus']) ? $data['approvalstatus'] : null;
        $this->container['invoice_status'] = isset($data['invoice_status']) ? $data['invoice_status'] : null;
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['invoiceline_id'] = isset($data['invoiceline_id']) ? $data['invoiceline_id'] : null;
        $this->container['tariff'] = isset($data['tariff']) ? $data['tariff'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['is_editable'] = isset($data['is_editable']) ? $data['is_editable'] : null;
        $this->container['is_deletable'] = isset($data['is_deletable']) ? $data['is_deletable'] : null;
        $this->container['leave_status'] = isset($data['leave_status']) ? $data['leave_status'] : null;
        $this->container['leave_id'] = isset($data['leave_id']) ? $data['leave_id'] : null;
        $this->container['absence_id'] = isset($data['absence_id']) ? $data['absence_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['corrections'] = isset($data['corrections']) ? $data['corrections'] : null;
        $this->container['mileage'] = isset($data['mileage']) ? $data['mileage'] : null;
        $this->container['is_productive'] = isset($data['is_productive']) ? $data['is_productive'] : null;
        $this->container['hours'] = isset($data['hours']) ? $data['hours'] : null;
        $this->container['duration_in_minutes'] = isset($data['duration_in_minutes']) ? $data['duration_in_minutes'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['is_time_defined'] = isset($data['is_time_defined']) ? $data['is_time_defined'] : null;
        $this->container['is_recurring'] = isset($data['is_recurring']) ? $data['is_recurring'] : null;
        $this->container['recurrence'] = isset($data['recurrence']) ? $data['recurrence'] : null;
        $this->container['is_external'] = isset($data['is_external']) ? $data['is_external'] : null;
        $this->container['billable'] = isset($data['billable']) ? $data['billable'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['assignment_id'] = isset($data['assignment_id']) ? $data['assignment_id'] : null;
        $this->container['should_sync_to_cronofy'] = isset($data['should_sync_to_cronofy']) ? $data['should_sync_to_cronofy'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInvoiceStatusAllowableValues();
        if (!is_null($this->container['invoice_status']) && !in_array($this->container['invoice_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invoice_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \Swagger\Client\Model\GetEmployeeSimple
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \Swagger\Client\Model\GetEmployeeSimple $employee employee
     *
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\GetProjectSimple
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\GetProjectSimple $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets projectservice
     *
     * @return \Swagger\Client\Model\GetHoursHoursProjectService
     */
    public function getProjectservice()
    {
        return $this->container['projectservice'];
    }

    /**
     * Sets projectservice
     *
     * @param \Swagger\Client\Model\GetHoursHoursProjectService $projectservice projectservice
     *
     * @return $this
     */
    public function setProjectservice($projectservice)
    {
        $this->container['projectservice'] = $projectservice;

        return $this;
    }

    /**
     * Gets type
     *
     * @return object
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param object $type When record is leave related return leaveType
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets approvalstatus
     *
     * @return \Swagger\Client\Model\GetApprovalStatus
     */
    public function getApprovalstatus()
    {
        return $this->container['approvalstatus'];
    }

    /**
     * Sets approvalstatus
     *
     * @param \Swagger\Client\Model\GetApprovalStatus $approvalstatus approvalstatus
     *
     * @return $this
     */
    public function setApprovalstatus($approvalstatus)
    {
        $this->container['approvalstatus'] = $approvalstatus;

        return $this;
    }

    /**
     * Gets invoice_status
     *
     * @return string
     */
    public function getInvoiceStatus()
    {
        return $this->container['invoice_status'];
    }

    /**
     * Sets invoice_status
     *
     * @param string $invoice_status invoice_status
     *
     * @return $this
     */
    public function setInvoiceStatus($invoice_status)
    {
        $allowedValues = $this->getInvoiceStatusAllowableValues();
        if (!is_null($invoice_status) && !in_array($invoice_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invoice_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_status'] = $invoice_status;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return string
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string $invoice_id See /invoices/invoice
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets invoiceline_id
     *
     * @return string
     */
    public function getInvoicelineId()
    {
        return $this->container['invoiceline_id'];
    }

    /**
     * Sets invoiceline_id
     *
     * @param string $invoiceline_id See /invoices/invoice
     *
     * @return $this
     */
    public function setInvoicelineId($invoiceline_id)
    {
        $this->container['invoiceline_id'] = $invoiceline_id;

        return $this;
    }

    /**
     * Gets tariff
     *
     * @return float
     */
    public function getTariff()
    {
        return $this->container['tariff'];
    }

    /**
     * Sets tariff
     *
     * @param float $tariff tariff
     *
     * @return $this
     */
    public function setTariff($tariff)
    {
        $this->container['tariff'] = $tariff;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \Swagger\Client\Model\GetCustomField[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \Swagger\Client\Model\GetCustomField[] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked locked
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets is_editable
     *
     * @return \Swagger\Client\Model\IsSatisfied
     */
    public function getIsEditable()
    {
        return $this->container['is_editable'];
    }

    /**
     * Sets is_editable
     *
     * @param \Swagger\Client\Model\IsSatisfied $is_editable is_editable
     *
     * @return $this
     */
    public function setIsEditable($is_editable)
    {
        $this->container['is_editable'] = $is_editable;

        return $this;
    }

    /**
     * Gets is_deletable
     *
     * @return \Swagger\Client\Model\IsSatisfied
     */
    public function getIsDeletable()
    {
        return $this->container['is_deletable'];
    }

    /**
     * Sets is_deletable
     *
     * @param \Swagger\Client\Model\IsSatisfied $is_deletable is_deletable
     *
     * @return $this
     */
    public function setIsDeletable($is_deletable)
    {
        $this->container['is_deletable'] = $is_deletable;

        return $this;
    }

    /**
     * Gets leave_status
     *
     * @return \Swagger\Client\Model\LeaveStatus
     */
    public function getLeaveStatus()
    {
        return $this->container['leave_status'];
    }

    /**
     * Sets leave_status
     *
     * @param \Swagger\Client\Model\LeaveStatus $leave_status leave_status
     *
     * @return $this
     */
    public function setLeaveStatus($leave_status)
    {
        $this->container['leave_status'] = $leave_status;

        return $this;
    }

    /**
     * Gets leave_id
     *
     * @return string
     */
    public function getLeaveId()
    {
        return $this->container['leave_id'];
    }

    /**
     * Sets leave_id
     *
     * @param string $leave_id leave_id
     *
     * @return $this
     */
    public function setLeaveId($leave_id)
    {
        $this->container['leave_id'] = $leave_id;

        return $this;
    }

    /**
     * Gets absence_id
     *
     * @return string
     */
    public function getAbsenceId()
    {
        return $this->container['absence_id'];
    }

    /**
     * Sets absence_id
     *
     * @param string $absence_id absence_id
     *
     * @return $this
     */
    public function setAbsenceId($absence_id)
    {
        $this->container['absence_id'] = $absence_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets corrections
     *
     * @return \Swagger\Client\Model\Correction
     */
    public function getCorrections()
    {
        return $this->container['corrections'];
    }

    /**
     * Sets corrections
     *
     * @param \Swagger\Client\Model\Correction $corrections corrections
     *
     * @return $this
     */
    public function setCorrections($corrections)
    {
        $this->container['corrections'] = $corrections;

        return $this;
    }

    /**
     * Gets mileage
     *
     * @return \Swagger\Client\Model\GetMileageSimple
     */
    public function getMileage()
    {
        return $this->container['mileage'];
    }

    /**
     * Sets mileage
     *
     * @param \Swagger\Client\Model\GetMileageSimple $mileage mileage
     *
     * @return $this
     */
    public function setMileage($mileage)
    {
        $this->container['mileage'] = $mileage;

        return $this;
    }

    /**
     * Gets is_productive
     *
     * @return bool
     */
    public function getIsProductive()
    {
        return $this->container['is_productive'];
    }

    /**
     * Sets is_productive
     *
     * @param bool $is_productive is_productive
     *
     * @return $this
     */
    public function setIsProductive($is_productive)
    {
        $this->container['is_productive'] = $is_productive;

        return $this;
    }

    /**
     * Gets hours
     *
     * @return float
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     *
     * @param float $hours hours
     *
     * @return $this
     */
    public function setHours($hours)
    {
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets duration_in_minutes
     *
     * @return int
     */
    public function getDurationInMinutes()
    {
        return $this->container['duration_in_minutes'];
    }

    /**
     * Sets duration_in_minutes
     *
     * @param int $duration_in_minutes duration_in_minutes
     *
     * @return $this
     */
    public function setDurationInMinutes($duration_in_minutes)
    {
        $this->container['duration_in_minutes'] = $duration_in_minutes;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets is_time_defined
     *
     * @return bool
     */
    public function getIsTimeDefined()
    {
        return $this->container['is_time_defined'];
    }

    /**
     * Sets is_time_defined
     *
     * @param bool $is_time_defined is_time_defined
     *
     * @return $this
     */
    public function setIsTimeDefined($is_time_defined)
    {
        $this->container['is_time_defined'] = $is_time_defined;

        return $this;
    }

    /**
     * Gets is_recurring
     *
     * @return bool
     */
    public function getIsRecurring()
    {
        return $this->container['is_recurring'];
    }

    /**
     * Sets is_recurring
     *
     * @param bool $is_recurring is_recurring
     *
     * @return $this
     */
    public function setIsRecurring($is_recurring)
    {
        $this->container['is_recurring'] = $is_recurring;

        return $this;
    }

    /**
     * Gets recurrence
     *
     * @return \Swagger\Client\Model\Recurrence
     */
    public function getRecurrence()
    {
        return $this->container['recurrence'];
    }

    /**
     * Sets recurrence
     *
     * @param \Swagger\Client\Model\Recurrence $recurrence recurrence
     *
     * @return $this
     */
    public function setRecurrence($recurrence)
    {
        $this->container['recurrence'] = $recurrence;

        return $this;
    }

    /**
     * Gets is_external
     *
     * @return bool
     */
    public function getIsExternal()
    {
        return $this->container['is_external'];
    }

    /**
     * Sets is_external
     *
     * @param bool $is_external is_external
     *
     * @return $this
     */
    public function setIsExternal($is_external)
    {
        $this->container['is_external'] = $is_external;

        return $this;
    }

    /**
     * Gets billable
     *
     * @return bool
     */
    public function getBillable()
    {
        return $this->container['billable'];
    }

    /**
     * Sets billable
     *
     * @param bool $billable billable
     *
     * @return $this
     */
    public function setBillable($billable)
    {
        $this->container['billable'] = $billable;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets assignment_id
     *
     * @return string
     */
    public function getAssignmentId()
    {
        return $this->container['assignment_id'];
    }

    /**
     * Sets assignment_id
     *
     * @param string $assignment_id assignment_id
     *
     * @return $this
     */
    public function setAssignmentId($assignment_id)
    {
        $this->container['assignment_id'] = $assignment_id;

        return $this;
    }

    /**
     * Gets should_sync_to_cronofy
     *
     * @return bool
     */
    public function getShouldSyncToCronofy()
    {
        return $this->container['should_sync_to_cronofy'];
    }

    /**
     * Sets should_sync_to_cronofy
     *
     * @param bool $should_sync_to_cronofy should_sync_to_cronofy
     *
     * @return $this
     */
    public function setShouldSyncToCronofy($should_sync_to_cronofy)
    {
        $this->container['should_sync_to_cronofy'] = $should_sync_to_cronofy;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


