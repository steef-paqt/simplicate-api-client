<?php

/**
 * GetReviewByWeekDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Paqtcom\Simplicate\Model;

use ArrayAccess;
use Paqtcom\Simplicate\ObjectSerializer;

/**
 * GetReviewByWeekDetails Class Doc Comment
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetReviewByWeekDetails implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $swaggerModelName = 'GetReviewByWeekDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerTypes = [
        'employee' => '\Paqtcom\Simplicate\Model\GetEmployeeSimple',
        'start_date' => 'string',
        'end_date' => 'string',
        'status_id' => 'string',
        'status_category' => 'string',
        'status_label' => 'string',
        'raster_hours' => 'float',
        'written_hours' => 'float',
        'overtime' => 'float',
        'leave' => 'float',
        'absence' => 'float',
        'mileage' => 'float',
        'costs' => 'float',
        'declarability' => 'float',
        'productivity' => 'float',
        'productivity_target' => 'float',
        'productivity_value' => 'float',
        'productivity_value_target' => 'float',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerFormats = [
        'employee' => null,
        'start_date' => null,
        'end_date' => null,
        'status_id' => null,
        'status_category' => null,
        'status_label' => null,
        'raster_hours' => 'float',
        'written_hours' => 'float',
        'overtime' => 'float',
        'leave' => 'float',
        'absence' => 'float',
        'mileage' => 'float',
        'costs' => 'float',
        'declarability' => 'float',
        'productivity' => 'float',
        'productivity_target' => 'float',
        'productivity_value' => 'float',
        'productivity_value_target' => 'float',
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'employee' => 'employee',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'status_id' => 'status_id',
        'status_category' => 'status_category',
        'status_label' => 'status_label',
        'raster_hours' => 'raster_hours',
        'written_hours' => 'written_hours',
        'overtime' => 'overtime',
        'leave' => 'leave',
        'absence' => 'absence',
        'mileage' => 'mileage',
        'costs' => 'costs',
        'declarability' => 'declarability',
        'productivity' => 'productivity',
        'productivity_target' => 'productivity_target',
        'productivity_value' => 'productivity_value',
        'productivity_value_target' => 'productivity_value_target',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'employee' => 'setEmployee',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'status_id' => 'setStatusId',
        'status_category' => 'setStatusCategory',
        'status_label' => 'setStatusLabel',
        'raster_hours' => 'setRasterHours',
        'written_hours' => 'setWrittenHours',
        'overtime' => 'setOvertime',
        'leave' => 'setLeave',
        'absence' => 'setAbsence',
        'mileage' => 'setMileage',
        'costs' => 'setCosts',
        'declarability' => 'setDeclarability',
        'productivity' => 'setProductivity',
        'productivity_target' => 'setProductivityTarget',
        'productivity_value' => 'setProductivityValue',
        'productivity_value_target' => 'setProductivityValueTarget',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'employee' => 'getEmployee',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'status_id' => 'getStatusId',
        'status_category' => 'getStatusCategory',
        'status_label' => 'getStatusLabel',
        'raster_hours' => 'getRasterHours',
        'written_hours' => 'getWrittenHours',
        'overtime' => 'getOvertime',
        'leave' => 'getLeave',
        'absence' => 'getAbsence',
        'mileage' => 'getMileage',
        'costs' => 'getCosts',
        'declarability' => 'getDeclarability',
        'productivity' => 'getProductivity',
        'productivity_target' => 'getProductivityTarget',
        'productivity_value' => 'getProductivityValue',
        'productivity_value_target' => 'getProductivityValueTarget',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['status_category'] = isset($data['status_category']) ? $data['status_category'] : null;
        $this->container['status_label'] = isset($data['status_label']) ? $data['status_label'] : null;
        $this->container['raster_hours'] = isset($data['raster_hours']) ? $data['raster_hours'] : null;
        $this->container['written_hours'] = isset($data['written_hours']) ? $data['written_hours'] : null;
        $this->container['overtime'] = isset($data['overtime']) ? $data['overtime'] : null;
        $this->container['leave'] = isset($data['leave']) ? $data['leave'] : null;
        $this->container['absence'] = isset($data['absence']) ? $data['absence'] : null;
        $this->container['mileage'] = isset($data['mileage']) ? $data['mileage'] : null;
        $this->container['costs'] = isset($data['costs']) ? $data['costs'] : null;
        $this->container['declarability'] = isset($data['declarability']) ? $data['declarability'] : null;
        $this->container['productivity'] = isset($data['productivity']) ? $data['productivity'] : null;
        $this->container['productivity_target'] = isset($data['productivity_target']) ? $data['productivity_target'] : null;
        $this->container['productivity_value'] = isset($data['productivity_value']) ? $data['productivity_value'] : null;
        $this->container['productivity_value_target'] = isset($data['productivity_value_target']) ? $data['productivity_value_target'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets employee
     *
     * @return \Paqtcom\Simplicate\Model\GetEmployeeSimple
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \Paqtcom\Simplicate\Model\GetEmployeeSimple $employee employee
     *
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date Y-m-d, eg. 2020-01-01
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date Y-m-d, eg. 2020-01-01
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets status_id
     *
     * @return string
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param string $status_id status_id
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets status_category
     *
     * @return string
     */
    public function getStatusCategory()
    {
        return $this->container['status_category'];
    }

    /**
     * Sets status_category
     *
     * @param string $status_category status_category
     *
     * @return $this
     */
    public function setStatusCategory($status_category)
    {
        $this->container['status_category'] = $status_category;

        return $this;
    }

    /**
     * Gets status_label
     *
     * @return string
     */
    public function getStatusLabel()
    {
        return $this->container['status_label'];
    }

    /**
     * Sets status_label
     *
     * @param string $status_label status_label
     *
     * @return $this
     */
    public function setStatusLabel($status_label)
    {
        $this->container['status_label'] = $status_label;

        return $this;
    }

    /**
     * Gets raster_hours
     *
     * @return float
     */
    public function getRasterHours()
    {
        return $this->container['raster_hours'];
    }

    /**
     * Sets raster_hours
     *
     * @param float $raster_hours raster_hours
     *
     * @return $this
     */
    public function setRasterHours($raster_hours)
    {
        $this->container['raster_hours'] = $raster_hours;

        return $this;
    }

    /**
     * Gets written_hours
     *
     * @return float
     */
    public function getWrittenHours()
    {
        return $this->container['written_hours'];
    }

    /**
     * Sets written_hours
     *
     * @param float $written_hours written_hours
     *
     * @return $this
     */
    public function setWrittenHours($written_hours)
    {
        $this->container['written_hours'] = $written_hours;

        return $this;
    }

    /**
     * Gets overtime
     *
     * @return float
     */
    public function getOvertime()
    {
        return $this->container['overtime'];
    }

    /**
     * Sets overtime
     *
     * @param float $overtime overtime
     *
     * @return $this
     */
    public function setOvertime($overtime)
    {
        $this->container['overtime'] = $overtime;

        return $this;
    }

    /**
     * Gets leave
     *
     * @return float
     */
    public function getLeave()
    {
        return $this->container['leave'];
    }

    /**
     * Sets leave
     *
     * @param float $leave leave
     *
     * @return $this
     */
    public function setLeave($leave)
    {
        $this->container['leave'] = $leave;

        return $this;
    }

    /**
     * Gets absence
     *
     * @return float
     */
    public function getAbsence()
    {
        return $this->container['absence'];
    }

    /**
     * Sets absence
     *
     * @param float $absence absence
     *
     * @return $this
     */
    public function setAbsence($absence)
    {
        $this->container['absence'] = $absence;

        return $this;
    }

    /**
     * Gets mileage
     *
     * @return float
     */
    public function getMileage()
    {
        return $this->container['mileage'];
    }

    /**
     * Sets mileage
     *
     * @param float $mileage mileage
     *
     * @return $this
     */
    public function setMileage($mileage)
    {
        $this->container['mileage'] = $mileage;

        return $this;
    }

    /**
     * Gets costs
     *
     * @return float
     */
    public function getCosts()
    {
        return $this->container['costs'];
    }

    /**
     * Sets costs
     *
     * @param float $costs costs
     *
     * @return $this
     */
    public function setCosts($costs)
    {
        $this->container['costs'] = $costs;

        return $this;
    }

    /**
     * Gets declarability
     *
     * @return float
     */
    public function getDeclarability()
    {
        return $this->container['declarability'];
    }

    /**
     * Sets declarability
     *
     * @param float $declarability declarability
     *
     * @return $this
     */
    public function setDeclarability($declarability)
    {
        $this->container['declarability'] = $declarability;

        return $this;
    }

    /**
     * Gets productivity
     *
     * @return float
     */
    public function getProductivity()
    {
        return $this->container['productivity'];
    }

    /**
     * Sets productivity
     *
     * @param float $productivity productivity
     *
     * @return $this
     */
    public function setProductivity($productivity)
    {
        $this->container['productivity'] = $productivity;

        return $this;
    }

    /**
     * Gets productivity_target
     *
     * @return float
     */
    public function getProductivityTarget()
    {
        return $this->container['productivity_target'];
    }

    /**
     * Sets productivity_target
     *
     * @param float $productivity_target productivity_target
     *
     * @return $this
     */
    public function setProductivityTarget($productivity_target)
    {
        $this->container['productivity_target'] = $productivity_target;

        return $this;
    }

    /**
     * Gets productivity_value
     *
     * @return float
     */
    public function getProductivityValue()
    {
        return $this->container['productivity_value'];
    }

    /**
     * Sets productivity_value
     *
     * @param float $productivity_value productivity_value
     *
     * @return $this
     */
    public function setProductivityValue($productivity_value)
    {
        $this->container['productivity_value'] = $productivity_value;

        return $this;
    }

    /**
     * Gets productivity_value_target
     *
     * @return float
     */
    public function getProductivityValueTarget()
    {
        return $this->container['productivity_value_target'];
    }

    /**
     * Sets productivity_value_target
     *
     * @param float $productivity_value_target productivity_value_target
     *
     * @return $this
     */
    public function setProductivityValueTarget($productivity_value_target)
    {
        $this->container['productivity_value_target'] = $productivity_value_target;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
