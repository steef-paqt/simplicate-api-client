<?php

/**
 * QuotetemplateConfigurationMetaData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Paqtcom\Simplicate\Model;

use ArrayAccess;
use Paqtcom\Simplicate\ObjectSerializer;

/**
 * QuotetemplateConfigurationMetaData Class Doc Comment
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QuotetemplateConfigurationMetaData implements ModelInterface, ArrayAccess, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $swaggerModelName = 'QuotetemplateConfigurationMetaData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerTypes = [
        'default_view_and_sign_button_text' => 'string',
        'default_view_and_sign_button_bg_color' => 'string',
        'default_view_and_sign_button_text_color' => 'string',
        'count' => 'int',
        'total_count' => 'int',
        'offset' => 'int',
        'limit' => 'int',
        'upper_limit' => 'int',
        'nocleanup' => 'bool',
        'checksum' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerFormats = [
        'default_view_and_sign_button_text' => null,
        'default_view_and_sign_button_bg_color' => null,
        'default_view_and_sign_button_text_color' => null,
        'count' => null,
        'total_count' => null,
        'offset' => null,
        'limit' => null,
        'upper_limit' => null,
        'nocleanup' => null,
        'checksum' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'default_view_and_sign_button_text' => 'default_view_and_sign_button_text',
        'default_view_and_sign_button_bg_color' => 'default_view_and_sign_button_bg_color',
        'default_view_and_sign_button_text_color' => 'default_view_and_sign_button_text_color',
        'count' => 'count',
        'total_count' => 'total_count',
        'offset' => 'offset',
        'limit' => 'limit',
        'upper_limit' => 'upper_limit',
        'nocleanup' => 'nocleanup',
        'checksum' => 'checksum',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'default_view_and_sign_button_text' => 'setDefaultViewAndSignButtonText',
        'default_view_and_sign_button_bg_color' => 'setDefaultViewAndSignButtonBgColor',
        'default_view_and_sign_button_text_color' => 'setDefaultViewAndSignButtonTextColor',
        'count' => 'setCount',
        'total_count' => 'setTotalCount',
        'offset' => 'setOffset',
        'limit' => 'setLimit',
        'upper_limit' => 'setUpperLimit',
        'nocleanup' => 'setNocleanup',
        'checksum' => 'setChecksum',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'default_view_and_sign_button_text' => 'getDefaultViewAndSignButtonText',
        'default_view_and_sign_button_bg_color' => 'getDefaultViewAndSignButtonBgColor',
        'default_view_and_sign_button_text_color' => 'getDefaultViewAndSignButtonTextColor',
        'count' => 'getCount',
        'total_count' => 'getTotalCount',
        'offset' => 'getOffset',
        'limit' => 'getLimit',
        'upper_limit' => 'getUpperLimit',
        'nocleanup' => 'getNocleanup',
        'checksum' => 'getChecksum',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_view_and_sign_button_text'] = $data['default_view_and_sign_button_text'] ?? null;
        $this->container['default_view_and_sign_button_bg_color'] = $data['default_view_and_sign_button_bg_color'] ?? null;
        $this->container['default_view_and_sign_button_text_color'] = $data['default_view_and_sign_button_text_color'] ?? null;
        $this->container['count'] = $data['count'] ?? null;
        $this->container['total_count'] = $data['total_count'] ?? null;
        $this->container['offset'] = $data['offset'] ?? null;
        $this->container['limit'] = $data['limit'] ?? null;
        $this->container['upper_limit'] = $data['upper_limit'] ?? null;
        $this->container['nocleanup'] = $data['nocleanup'] ?? null;
        $this->container['checksum'] = $data['checksum'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets default_view_and_sign_button_text
     *
     * @return string
     */
    public function getDefaultViewAndSignButtonText()
    {
        return $this->container['default_view_and_sign_button_text'];
    }

    /**
     * Sets default_view_and_sign_button_text
     *
     * @param string $default_view_and_sign_button_text Default text for view_and_sign_button for the quotetemplate e-mail
     *
     * @return $this
     */
    public function setDefaultViewAndSignButtonText($default_view_and_sign_button_text)
    {
        $this->container['default_view_and_sign_button_text'] = $default_view_and_sign_button_text;

        return $this;
    }

    /**
     * Gets default_view_and_sign_button_bg_color
     *
     * @return string
     */
    public function getDefaultViewAndSignButtonBgColor()
    {
        return $this->container['default_view_and_sign_button_bg_color'];
    }

    /**
     * Sets default_view_and_sign_button_bg_color
     *
     * @param string $default_view_and_sign_button_bg_color Default background color for view_and_sign_button for the quotetemplate e-mail
     *
     * @return $this
     */
    public function setDefaultViewAndSignButtonBgColor($default_view_and_sign_button_bg_color)
    {
        $this->container['default_view_and_sign_button_bg_color'] = $default_view_and_sign_button_bg_color;

        return $this;
    }

    /**
     * Gets default_view_and_sign_button_text_color
     *
     * @return string
     */
    public function getDefaultViewAndSignButtonTextColor()
    {
        return $this->container['default_view_and_sign_button_text_color'];
    }

    /**
     * Sets default_view_and_sign_button_text_color
     *
     * @param string $default_view_and_sign_button_text_color Default text color for view_and_sign_button for the quotetemplate e-mail
     *
     * @return $this
     */
    public function setDefaultViewAndSignButtonTextColor($default_view_and_sign_button_text_color)
    {
        $this->container['default_view_and_sign_button_text_color'] = $default_view_and_sign_button_text_color;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets total_count
     *
     * @return int
     */
    public function getTotalCount()
    {
        return $this->container['total_count'];
    }

    /**
     * Sets total_count
     *
     * @param int $total_count
     *
     * @return $this
     */
    public function setTotalCount($total_count)
    {
        $this->container['total_count'] = $total_count;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int $offset
     *
     * @return $this
     */
    public function setOffset($offset)
    {
        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets upper_limit
     *
     * @return int
     */
    public function getUpperLimit()
    {
        return $this->container['upper_limit'];
    }

    /**
     * Sets upper_limit
     *
     * @param int $upper_limit
     *
     * @return $this
     */
    public function setUpperLimit($upper_limit)
    {
        $this->container['upper_limit'] = $upper_limit;

        return $this;
    }

    /**
     * Gets nocleanup
     *
     * @return bool
     */
    public function getNocleanup()
    {
        return $this->container['nocleanup'];
    }

    /**
     * Sets nocleanup
     *
     * @param bool $nocleanup
     *
     * @return $this
     */
    public function setNocleanup($nocleanup)
    {
        $this->container['nocleanup'] = $nocleanup;

        return $this;
    }

    /**
     * Gets checksum
     *
     * @return string
     */
    public function getChecksum()
    {
        return $this->container['checksum'];
    }

    /**
     * Sets checksum
     *
     * @param string $checksum
     *
     * @return $this
     */
    public function setChecksum($checksum)
    {
        $this->container['checksum'] = $checksum;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return (string) json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return (string) json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
