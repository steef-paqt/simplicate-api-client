<?php

/**
 * Accountancy
 *
 * PHP version 5
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Paqtcom\Simplicate\Model;

use ArrayAccess;
use Paqtcom\Simplicate\ObjectSerializer;

/**
 * Accountancy Class Doc Comment
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Accountancy implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $swaggerModelName = 'Accountancy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerTypes = [
        'is_tax_unit_vat' => 'bool',
        'vat_number_fe' => 'string',
        'tax_unit_vat_role' => 'string',
        'is_tax_unit_vpb' => 'bool',
        'tax_unit_vpb_role' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerFormats = [
        'is_tax_unit_vat' => null,
        'vat_number_fe' => null,
        'tax_unit_vat_role' => null,
        'is_tax_unit_vpb' => null,
        'tax_unit_vpb_role' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'is_tax_unit_vat' => 'is_tax_unit_vat',
        'vat_number_fe' => 'vat_number_fe',
        'tax_unit_vat_role' => 'tax_unit_vat_role',
        'is_tax_unit_vpb' => 'is_tax_unit_vpb',
        'tax_unit_vpb_role' => 'tax_unit_vpb_role',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'is_tax_unit_vat' => 'setIsTaxUnitVat',
        'vat_number_fe' => 'setVatNumberFe',
        'tax_unit_vat_role' => 'setTaxUnitVatRole',
        'is_tax_unit_vpb' => 'setIsTaxUnitVpb',
        'tax_unit_vpb_role' => 'setTaxUnitVpbRole',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'is_tax_unit_vat' => 'getIsTaxUnitVat',
        'vat_number_fe' => 'getVatNumberFe',
        'tax_unit_vat_role' => 'getTaxUnitVatRole',
        'is_tax_unit_vpb' => 'getIsTaxUnitVpb',
        'tax_unit_vpb_role' => 'getTaxUnitVpbRole',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const TAX_UNIT_VAT_ROLE_MOTHER = 'mother';
    public const TAX_UNIT_VAT_ROLE_DAUGHTER = 'daughter';
    public const TAX_UNIT_VAT_ROLE_PARTICIPATION = 'participation';
    public const TAX_UNIT_VPB_ROLE_MOTHER = 'mother';
    public const TAX_UNIT_VPB_ROLE_DAUGHTER = 'daughter';
    public const TAX_UNIT_VPB_ROLE_PARTICIPATION = 'participation';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxUnitVatRoleAllowableValues()
    {
        return [
            self::TAX_UNIT_VAT_ROLE_MOTHER,
            self::TAX_UNIT_VAT_ROLE_DAUGHTER,
            self::TAX_UNIT_VAT_ROLE_PARTICIPATION,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxUnitVpbRoleAllowableValues()
    {
        return [
            self::TAX_UNIT_VPB_ROLE_MOTHER,
            self::TAX_UNIT_VPB_ROLE_DAUGHTER,
            self::TAX_UNIT_VPB_ROLE_PARTICIPATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_tax_unit_vat'] = isset($data['is_tax_unit_vat']) ? $data['is_tax_unit_vat'] : null;
        $this->container['vat_number_fe'] = isset($data['vat_number_fe']) ? $data['vat_number_fe'] : null;
        $this->container['tax_unit_vat_role'] = isset($data['tax_unit_vat_role']) ? $data['tax_unit_vat_role'] : null;
        $this->container['is_tax_unit_vpb'] = isset($data['is_tax_unit_vpb']) ? $data['is_tax_unit_vpb'] : null;
        $this->container['tax_unit_vpb_role'] = isset($data['tax_unit_vpb_role']) ? $data['tax_unit_vpb_role'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTaxUnitVatRoleAllowableValues();
        if (!is_null($this->container['tax_unit_vat_role']) && !in_array($this->container['tax_unit_vat_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_unit_vat_role', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxUnitVpbRoleAllowableValues();
        if (!is_null($this->container['tax_unit_vpb_role']) && !in_array($this->container['tax_unit_vpb_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_unit_vpb_role', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets is_tax_unit_vat
     *
     * @return bool
     */
    public function getIsTaxUnitVat()
    {
        return $this->container['is_tax_unit_vat'];
    }

    /**
     * Sets is_tax_unit_vat
     *
     * @param bool $is_tax_unit_vat is_tax_unit_vat
     *
     * @return $this
     */
    public function setIsTaxUnitVat($is_tax_unit_vat)
    {
        $this->container['is_tax_unit_vat'] = $is_tax_unit_vat;

        return $this;
    }

    /**
     * Gets vat_number_fe
     *
     * @return string
     */
    public function getVatNumberFe()
    {
        return $this->container['vat_number_fe'];
    }

    /**
     * Sets vat_number_fe
     *
     * @param string $vat_number_fe vat_number_fe
     *
     * @return $this
     */
    public function setVatNumberFe($vat_number_fe)
    {
        $this->container['vat_number_fe'] = $vat_number_fe;

        return $this;
    }

    /**
     * Gets tax_unit_vat_role
     *
     * @return string
     */
    public function getTaxUnitVatRole()
    {
        return $this->container['tax_unit_vat_role'];
    }

    /**
     * Sets tax_unit_vat_role
     *
     * @param string $tax_unit_vat_role tax_unit_vat_role
     *
     * @return $this
     */
    public function setTaxUnitVatRole($tax_unit_vat_role)
    {
        $allowedValues = $this->getTaxUnitVatRoleAllowableValues();
        if (!is_null($tax_unit_vat_role) && !in_array($tax_unit_vat_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_unit_vat_role', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_unit_vat_role'] = $tax_unit_vat_role;

        return $this;
    }

    /**
     * Gets is_tax_unit_vpb
     *
     * @return bool
     */
    public function getIsTaxUnitVpb()
    {
        return $this->container['is_tax_unit_vpb'];
    }

    /**
     * Sets is_tax_unit_vpb
     *
     * @param bool $is_tax_unit_vpb is_tax_unit_vpb
     *
     * @return $this
     */
    public function setIsTaxUnitVpb($is_tax_unit_vpb)
    {
        $this->container['is_tax_unit_vpb'] = $is_tax_unit_vpb;

        return $this;
    }

    /**
     * Gets tax_unit_vpb_role
     *
     * @return string
     */
    public function getTaxUnitVpbRole()
    {
        return $this->container['tax_unit_vpb_role'];
    }

    /**
     * Sets tax_unit_vpb_role
     *
     * @param string $tax_unit_vpb_role tax_unit_vpb_role
     *
     * @return $this
     */
    public function setTaxUnitVpbRole($tax_unit_vpb_role)
    {
        $allowedValues = $this->getTaxUnitVpbRoleAllowableValues();
        if (!is_null($tax_unit_vpb_role) && !in_array($tax_unit_vpb_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_unit_vpb_role', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_unit_vpb_role'] = $tax_unit_vpb_role;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
