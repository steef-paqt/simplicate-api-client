<?php

/**
 * GetQuote
 *
 * PHP version 5
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Paqtcom\Simplicate\Model;

use ArrayAccess;
use Paqtcom\Simplicate\ObjectSerializer;

/**
 * GetQuote Class Doc Comment
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetQuote implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetQuote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'quotetemplate' => '\Paqtcom\Simplicate\Model\QuoteTemplate',
        'send_type' => 'string',
        'quote_number' => 'string',
        'quote_date' => 'string',
        'quotestatus' => '\Paqtcom\Simplicate\Model\QuoteStatus',
        'json' => 'string',
        'services' => '\Paqtcom\Simplicate\Model\QuoteSalesService[]',
        'total_excl' => 'string',
        'total_incl' => 'string',
        'total_vat' => 'string',
        'vat' => 'object',
        'grand_totals' => 'object',
        'receivers' => 'object',
        'valid_days' => 'int',
        'payment_term' => 'object',
        'download_url' => 'object',
        'is_sepa_authorization' => 'int',
        'is_outdated' => 'int',
        'is_blocked' => 'int',
        'created_by' => 'string',
        'last_updated_approval_status' => 'string',
        'sent_at' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'sales_id' => 'string',
        'quote_subject' => 'string',
        'customer_reference' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'quotetemplate' => null,
        'send_type' => null,
        'quote_number' => null,
        'quote_date' => null,
        'quotestatus' => null,
        'json' => null,
        'services' => null,
        'total_excl' => null,
        'total_incl' => null,
        'total_vat' => null,
        'vat' => null,
        'grand_totals' => null,
        'receivers' => null,
        'valid_days' => null,
        'payment_term' => null,
        'download_url' => null,
        'is_sepa_authorization' => null,
        'is_outdated' => null,
        'is_blocked' => null,
        'created_by' => null,
        'last_updated_approval_status' => null,
        'sent_at' => null,
        'created_at' => null,
        'updated_at' => null,
        'sales_id' => null,
        'quote_subject' => null,
        'customer_reference' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'quotetemplate' => 'quotetemplate',
        'send_type' => 'send_type',
        'quote_number' => 'quote_number',
        'quote_date' => 'quote_date',
        'quotestatus' => 'quotestatus',
        'json' => 'json',
        'services' => 'services',
        'total_excl' => 'total_excl',
        'total_incl' => 'total_incl',
        'total_vat' => 'total_vat',
        'vat' => 'vat',
        'grand_totals' => 'grand_totals',
        'receivers' => 'receivers',
        'valid_days' => 'valid_days',
        'payment_term' => 'payment_term',
        'download_url' => 'download_url',
        'is_sepa_authorization' => 'is_sepa_authorization',
        'is_outdated' => 'is_outdated',
        'is_blocked' => 'is_blocked',
        'created_by' => 'created_by',
        'last_updated_approval_status' => 'last_updated_approval_status',
        'sent_at' => 'sent_at',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'sales_id' => 'sales_id',
        'quote_subject' => 'quote_subject',
        'customer_reference' => 'customer_reference',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'quotetemplate' => 'setQuotetemplate',
        'send_type' => 'setSendType',
        'quote_number' => 'setQuoteNumber',
        'quote_date' => 'setQuoteDate',
        'quotestatus' => 'setQuotestatus',
        'json' => 'setJson',
        'services' => 'setServices',
        'total_excl' => 'setTotalExcl',
        'total_incl' => 'setTotalIncl',
        'total_vat' => 'setTotalVat',
        'vat' => 'setVat',
        'grand_totals' => 'setGrandTotals',
        'receivers' => 'setReceivers',
        'valid_days' => 'setValidDays',
        'payment_term' => 'setPaymentTerm',
        'download_url' => 'setDownloadUrl',
        'is_sepa_authorization' => 'setIsSepaAuthorization',
        'is_outdated' => 'setIsOutdated',
        'is_blocked' => 'setIsBlocked',
        'created_by' => 'setCreatedBy',
        'last_updated_approval_status' => 'setLastUpdatedApprovalStatus',
        'sent_at' => 'setSentAt',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'sales_id' => 'setSalesId',
        'quote_subject' => 'setQuoteSubject',
        'customer_reference' => 'setCustomerReference',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'quotetemplate' => 'getQuotetemplate',
        'send_type' => 'getSendType',
        'quote_number' => 'getQuoteNumber',
        'quote_date' => 'getQuoteDate',
        'quotestatus' => 'getQuotestatus',
        'json' => 'getJson',
        'services' => 'getServices',
        'total_excl' => 'getTotalExcl',
        'total_incl' => 'getTotalIncl',
        'total_vat' => 'getTotalVat',
        'vat' => 'getVat',
        'grand_totals' => 'getGrandTotals',
        'receivers' => 'getReceivers',
        'valid_days' => 'getValidDays',
        'payment_term' => 'getPaymentTerm',
        'download_url' => 'getDownloadUrl',
        'is_sepa_authorization' => 'getIsSepaAuthorization',
        'is_outdated' => 'getIsOutdated',
        'is_blocked' => 'getIsBlocked',
        'created_by' => 'getCreatedBy',
        'last_updated_approval_status' => 'getLastUpdatedApprovalStatus',
        'sent_at' => 'getSentAt',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'sales_id' => 'getSalesId',
        'quote_subject' => 'getQuoteSubject',
        'customer_reference' => 'getCustomerReference',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const SEND_TYPE_PRINTER = 'printer';
    public const SEND_TYPE_EMAIL = 'email';
    public const SEND_TYPE_EMAIL_APPROVAL = 'email_approval';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSendTypeAllowableValues()
    {
        return [
            self::SEND_TYPE_PRINTER,
            self::SEND_TYPE_EMAIL,
            self::SEND_TYPE_EMAIL_APPROVAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['quotetemplate'] = isset($data['quotetemplate']) ? $data['quotetemplate'] : null;
        $this->container['send_type'] = isset($data['send_type']) ? $data['send_type'] : null;
        $this->container['quote_number'] = isset($data['quote_number']) ? $data['quote_number'] : null;
        $this->container['quote_date'] = isset($data['quote_date']) ? $data['quote_date'] : null;
        $this->container['quotestatus'] = isset($data['quotestatus']) ? $data['quotestatus'] : null;
        $this->container['json'] = isset($data['json']) ? $data['json'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
        $this->container['total_excl'] = isset($data['total_excl']) ? $data['total_excl'] : null;
        $this->container['total_incl'] = isset($data['total_incl']) ? $data['total_incl'] : null;
        $this->container['total_vat'] = isset($data['total_vat']) ? $data['total_vat'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['grand_totals'] = isset($data['grand_totals']) ? $data['grand_totals'] : null;
        $this->container['receivers'] = isset($data['receivers']) ? $data['receivers'] : null;
        $this->container['valid_days'] = isset($data['valid_days']) ? $data['valid_days'] : null;
        $this->container['payment_term'] = isset($data['payment_term']) ? $data['payment_term'] : null;
        $this->container['download_url'] = isset($data['download_url']) ? $data['download_url'] : null;
        $this->container['is_sepa_authorization'] = isset($data['is_sepa_authorization']) ? $data['is_sepa_authorization'] : null;
        $this->container['is_outdated'] = isset($data['is_outdated']) ? $data['is_outdated'] : null;
        $this->container['is_blocked'] = isset($data['is_blocked']) ? $data['is_blocked'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['last_updated_approval_status'] = isset($data['last_updated_approval_status']) ? $data['last_updated_approval_status'] : null;
        $this->container['sent_at'] = isset($data['sent_at']) ? $data['sent_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['sales_id'] = isset($data['sales_id']) ? $data['sales_id'] : null;
        $this->container['quote_subject'] = isset($data['quote_subject']) ? $data['quote_subject'] : null;
        $this->container['customer_reference'] = isset($data['customer_reference']) ? $data['customer_reference'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSendTypeAllowableValues();
        if (!is_null($this->container['send_type']) && !in_array($this->container['send_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'send_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets quotetemplate
     *
     * @return \Paqtcom\Simplicate\Model\QuoteTemplate
     */
    public function getQuotetemplate()
    {
        return $this->container['quotetemplate'];
    }

    /**
     * Sets quotetemplate
     *
     * @param \Paqtcom\Simplicate\Model\QuoteTemplate $quotetemplate quotetemplate
     *
     * @return $this
     */
    public function setQuotetemplate($quotetemplate)
    {
        $this->container['quotetemplate'] = $quotetemplate;

        return $this;
    }

    /**
     * Gets send_type
     *
     * @return string
     */
    public function getSendType()
    {
        return $this->container['send_type'];
    }

    /**
     * Sets send_type
     *
     * @param string $send_type send_type
     *
     * @return $this
     */
    public function setSendType($send_type)
    {
        $allowedValues = $this->getSendTypeAllowableValues();
        if (!is_null($send_type) && !in_array($send_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'send_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['send_type'] = $send_type;

        return $this;
    }

    /**
     * Gets quote_number
     *
     * @return string
     */
    public function getQuoteNumber()
    {
        return $this->container['quote_number'];
    }

    /**
     * Sets quote_number
     *
     * @param string $quote_number quote_number
     *
     * @return $this
     */
    public function setQuoteNumber($quote_number)
    {
        $this->container['quote_number'] = $quote_number;

        return $this;
    }

    /**
     * Gets quote_date
     *
     * @return string
     */
    public function getQuoteDate()
    {
        return $this->container['quote_date'];
    }

    /**
     * Sets quote_date
     *
     * @param string $quote_date quote_date
     *
     * @return $this
     */
    public function setQuoteDate($quote_date)
    {
        $this->container['quote_date'] = $quote_date;

        return $this;
    }

    /**
     * Gets quotestatus
     *
     * @return \Paqtcom\Simplicate\Model\QuoteStatus
     */
    public function getQuotestatus()
    {
        return $this->container['quotestatus'];
    }

    /**
     * Sets quotestatus
     *
     * @param \Paqtcom\Simplicate\Model\QuoteStatus $quotestatus quotestatus
     *
     * @return $this
     */
    public function setQuotestatus($quotestatus)
    {
        $this->container['quotestatus'] = $quotestatus;

        return $this;
    }

    /**
     * Gets json
     *
     * @return string
     */
    public function getJson()
    {
        return $this->container['json'];
    }

    /**
     * Sets json
     *
     * @param string $json json
     *
     * @return $this
     */
    public function setJson($json)
    {
        $this->container['json'] = $json;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \Paqtcom\Simplicate\Model\QuoteSalesService[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \Paqtcom\Simplicate\Model\QuoteSalesService[] $services services
     *
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets total_excl
     *
     * @return string
     */
    public function getTotalExcl()
    {
        return $this->container['total_excl'];
    }

    /**
     * Sets total_excl
     *
     * @param string $total_excl total_excl
     *
     * @return $this
     */
    public function setTotalExcl($total_excl)
    {
        $this->container['total_excl'] = $total_excl;

        return $this;
    }

    /**
     * Gets total_incl
     *
     * @return string
     */
    public function getTotalIncl()
    {
        return $this->container['total_incl'];
    }

    /**
     * Sets total_incl
     *
     * @param string $total_incl total_incl
     *
     * @return $this
     */
    public function setTotalIncl($total_incl)
    {
        $this->container['total_incl'] = $total_incl;

        return $this;
    }

    /**
     * Gets total_vat
     *
     * @return string
     */
    public function getTotalVat()
    {
        return $this->container['total_vat'];
    }

    /**
     * Sets total_vat
     *
     * @param string $total_vat total_vat
     *
     * @return $this
     */
    public function setTotalVat($total_vat)
    {
        $this->container['total_vat'] = $total_vat;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return object
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param object $vat vat
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets grand_totals
     *
     * @return object
     */
    public function getGrandTotals()
    {
        return $this->container['grand_totals'];
    }

    /**
     * Sets grand_totals
     *
     * @param object $grand_totals grand_totals
     *
     * @return $this
     */
    public function setGrandTotals($grand_totals)
    {
        $this->container['grand_totals'] = $grand_totals;

        return $this;
    }

    /**
     * Gets receivers
     *
     * @return object
     */
    public function getReceivers()
    {
        return $this->container['receivers'];
    }

    /**
     * Sets receivers
     *
     * @param object $receivers receivers
     *
     * @return $this
     */
    public function setReceivers($receivers)
    {
        $this->container['receivers'] = $receivers;

        return $this;
    }

    /**
     * Gets valid_days
     *
     * @return int
     */
    public function getValidDays()
    {
        return $this->container['valid_days'];
    }

    /**
     * Sets valid_days
     *
     * @param int $valid_days valid_days
     *
     * @return $this
     */
    public function setValidDays($valid_days)
    {
        $this->container['valid_days'] = $valid_days;

        return $this;
    }

    /**
     * Gets payment_term
     *
     * @return object
     */
    public function getPaymentTerm()
    {
        return $this->container['payment_term'];
    }

    /**
     * Sets payment_term
     *
     * @param object $payment_term payment_term
     *
     * @return $this
     */
    public function setPaymentTerm($payment_term)
    {
        $this->container['payment_term'] = $payment_term;

        return $this;
    }

    /**
     * Gets download_url
     *
     * @return object
     */
    public function getDownloadUrl()
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     *
     * @param object $download_url download_url
     *
     * @return $this
     */
    public function setDownloadUrl($download_url)
    {
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets is_sepa_authorization
     *
     * @return int
     */
    public function getIsSepaAuthorization()
    {
        return $this->container['is_sepa_authorization'];
    }

    /**
     * Sets is_sepa_authorization
     *
     * @param int $is_sepa_authorization is_sepa_authorization
     *
     * @return $this
     */
    public function setIsSepaAuthorization($is_sepa_authorization)
    {
        $this->container['is_sepa_authorization'] = $is_sepa_authorization;

        return $this;
    }

    /**
     * Gets is_outdated
     *
     * @return int
     */
    public function getIsOutdated()
    {
        return $this->container['is_outdated'];
    }

    /**
     * Sets is_outdated
     *
     * @param int $is_outdated is_outdated
     *
     * @return $this
     */
    public function setIsOutdated($is_outdated)
    {
        $this->container['is_outdated'] = $is_outdated;

        return $this;
    }

    /**
     * Gets is_blocked
     *
     * @return int
     */
    public function getIsBlocked()
    {
        return $this->container['is_blocked'];
    }

    /**
     * Sets is_blocked
     *
     * @param int $is_blocked is_blocked
     *
     * @return $this
     */
    public function setIsBlocked($is_blocked)
    {
        $this->container['is_blocked'] = $is_blocked;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets last_updated_approval_status
     *
     * @return string
     */
    public function getLastUpdatedApprovalStatus()
    {
        return $this->container['last_updated_approval_status'];
    }

    /**
     * Sets last_updated_approval_status
     *
     * @param string $last_updated_approval_status last_updated_approval_status
     *
     * @return $this
     */
    public function setLastUpdatedApprovalStatus($last_updated_approval_status)
    {
        $this->container['last_updated_approval_status'] = $last_updated_approval_status;

        return $this;
    }

    /**
     * Gets sent_at
     *
     * @return string
     */
    public function getSentAt()
    {
        return $this->container['sent_at'];
    }

    /**
     * Sets sent_at
     *
     * @param string $sent_at sent_at
     *
     * @return $this
     */
    public function setSentAt($sent_at)
    {
        $this->container['sent_at'] = $sent_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets sales_id
     *
     * @return string
     */
    public function getSalesId()
    {
        return $this->container['sales_id'];
    }

    /**
     * Sets sales_id
     *
     * @param string $sales_id sales_id
     *
     * @return $this
     */
    public function setSalesId($sales_id)
    {
        $this->container['sales_id'] = $sales_id;

        return $this;
    }

    /**
     * Gets quote_subject
     *
     * @return string
     */
    public function getQuoteSubject()
    {
        return $this->container['quote_subject'];
    }

    /**
     * Sets quote_subject
     *
     * @param string $quote_subject quote_subject
     *
     * @return $this
     */
    public function setQuoteSubject($quote_subject)
    {
        $this->container['quote_subject'] = $quote_subject;

        return $this;
    }

    /**
     * Gets customer_reference
     *
     * @return string
     */
    public function getCustomerReference()
    {
        return $this->container['customer_reference'];
    }

    /**
     * Sets customer_reference
     *
     * @param string $customer_reference customer_reference
     *
     * @return $this
     */
    public function setCustomerReference($customer_reference)
    {
        $this->container['customer_reference'] = $customer_reference;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
