<?php

/**
 * GetTimesheetRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * GetTimesheetRow Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetTimesheetRow implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetTimesheetRow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'order' => 'int',
        'project' => '\Swagger\Client\Model\GetTimesheetRowProject',
        'project_service' => '\Swagger\Client\Model\GetTimesheetRowProjectService',
        'itemtype' => '\Swagger\Client\Model\GetTimesheetRowItemtype',
        'person' => '\Swagger\Client\Model\GetTimesheetRowPersonRelation',
        'organization' => '\Swagger\Client\Model\GetTimesheetRowOrganizationRelation',
        'employee_id' => 'string',
        'start_date' => 'string',
        'end_date' => 'string',
        'project_id' => 'string',
        'project_service_id' => 'string',
        'itemtype_id' => 'string',
        'type' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'order' => null,
        'project' => null,
        'project_service' => null,
        'itemtype' => null,
        'person' => null,
        'organization' => null,
        'employee_id' => null,
        'start_date' => null,
        'end_date' => null,
        'project_id' => null,
        'project_service_id' => null,
        'itemtype_id' => null,
        'type' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'order' => 'order',
        'project' => 'project',
        'project_service' => 'project_service',
        'itemtype' => 'itemtype',
        'person' => 'person',
        'organization' => 'organization',
        'employee_id' => 'employee_id',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'project_id' => 'project_id',
        'project_service_id' => 'project_service_id',
        'itemtype_id' => 'itemtype_id',
        'type' => 'type',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'order' => 'setOrder',
        'project' => 'setProject',
        'project_service' => 'setProjectService',
        'itemtype' => 'setItemtype',
        'person' => 'setPerson',
        'organization' => 'setOrganization',
        'employee_id' => 'setEmployeeId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'project_id' => 'setProjectId',
        'project_service_id' => 'setProjectServiceId',
        'itemtype_id' => 'setItemtypeId',
        'type' => 'setType',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'order' => 'getOrder',
        'project' => 'getProject',
        'project_service' => 'getProjectService',
        'itemtype' => 'getItemtype',
        'person' => 'getPerson',
        'organization' => 'getOrganization',
        'employee_id' => 'getEmployeeId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'project_id' => 'getProjectId',
        'project_service_id' => 'getProjectServiceId',
        'itemtype_id' => 'getItemtypeId',
        'type' => 'getType',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const TYPE_HOURS = 'hours';
    public const TYPE_COSTS = 'costs';
    public const TYPE_MILEAGE = 'mileage';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_HOURS,
            self::TYPE_COSTS,
            self::TYPE_MILEAGE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['project_service'] = isset($data['project_service']) ? $data['project_service'] : null;
        $this->container['itemtype'] = isset($data['itemtype']) ? $data['itemtype'] : null;
        $this->container['person'] = isset($data['person']) ? $data['person'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['project_id'] = isset($data['project_id']) ? $data['project_id'] : null;
        $this->container['project_service_id'] = isset($data['project_service_id']) ? $data['project_service_id'] : null;
        $this->container['itemtype_id'] = isset($data['itemtype_id']) ? $data['itemtype_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\GetTimesheetRowProject
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\GetTimesheetRowProject $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets project_service
     *
     * @return \Swagger\Client\Model\GetTimesheetRowProjectService
     */
    public function getProjectService()
    {
        return $this->container['project_service'];
    }

    /**
     * Sets project_service
     *
     * @param \Swagger\Client\Model\GetTimesheetRowProjectService $project_service project_service
     *
     * @return $this
     */
    public function setProjectService($project_service)
    {
        $this->container['project_service'] = $project_service;

        return $this;
    }

    /**
     * Gets itemtype
     *
     * @return \Swagger\Client\Model\GetTimesheetRowItemtype
     */
    public function getItemtype()
    {
        return $this->container['itemtype'];
    }

    /**
     * Sets itemtype
     *
     * @param \Swagger\Client\Model\GetTimesheetRowItemtype $itemtype itemtype
     *
     * @return $this
     */
    public function setItemtype($itemtype)
    {
        $this->container['itemtype'] = $itemtype;

        return $this;
    }

    /**
     * Gets person
     *
     * @return \Swagger\Client\Model\GetTimesheetRowPersonRelation
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param \Swagger\Client\Model\GetTimesheetRowPersonRelation $person person
     *
     * @return $this
     */
    public function setPerson($person)
    {
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Swagger\Client\Model\GetTimesheetRowOrganizationRelation
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Swagger\Client\Model\GetTimesheetRowOrganizationRelation $organization organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string $employee_id employee_id
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return $this
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets project_service_id
     *
     * @return string
     */
    public function getProjectServiceId()
    {
        return $this->container['project_service_id'];
    }

    /**
     * Sets project_service_id
     *
     * @param string $project_service_id project_service_id
     *
     * @return $this
     */
    public function setProjectServiceId($project_service_id)
    {
        $this->container['project_service_id'] = $project_service_id;

        return $this;
    }

    /**
     * Gets itemtype_id
     *
     * @return string
     */
    public function getItemtypeId()
    {
        return $this->container['itemtype_id'];
    }

    /**
     * Sets itemtype_id
     *
     * @param string $itemtype_id itemtype_id
     *
     * @return $this
     */
    public function setItemtypeId($itemtype_id)
    {
        $this->container['itemtype_id'] = $itemtype_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
