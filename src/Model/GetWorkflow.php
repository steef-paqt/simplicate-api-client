<?php

/**
 * GetWorkflow
 *
 * PHP version 5
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Paqtcom\Simplicate\Model;

use ArrayAccess;
use Paqtcom\Simplicate\ObjectSerializer;

/**
 * GetWorkflow Class Doc Comment
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetWorkflow implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetWorkflow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'defaultworkflow' => '\Paqtcom\Simplicate\Model\GetSimpleDefaultWorkflow',
        'current_task' => '\Paqtcom\Simplicate\Model\CurrentTask',
        'actions' => '\Paqtcom\Simplicate\Model\GetDefaultAction[]',
        'linked_to' => '\Paqtcom\Simplicate\Model\LinkedTo[]',
        'filename' => 'string',
        'attachments' => '\Paqtcom\Simplicate\Model\GetDocument[]',
        'comments' => '\Paqtcom\Simplicate\Model\Comment[]',
        'created_by' => '\Paqtcom\Simplicate\Model\CreatedBy',
        'created_at' => 'string',
        'updated_at' => 'string',
        'title' => 'string',
        'description' => 'string',
        'deadline_date' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'defaultworkflow' => null,
        'current_task' => null,
        'actions' => null,
        'linked_to' => null,
        'filename' => null,
        'attachments' => null,
        'comments' => null,
        'created_by' => null,
        'created_at' => null,
        'updated_at' => null,
        'title' => null,
        'description' => null,
        'deadline_date' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'defaultworkflow' => 'defaultworkflow',
        'current_task' => 'current_task',
        'actions' => 'actions',
        'linked_to' => 'linked_to',
        'filename' => 'filename',
        'attachments' => 'attachments',
        'comments' => 'comments',
        'created_by' => 'created_by',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'title' => 'title',
        'description' => 'description',
        'deadline_date' => 'deadline_date',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'defaultworkflow' => 'setDefaultworkflow',
        'current_task' => 'setCurrentTask',
        'actions' => 'setActions',
        'linked_to' => 'setLinkedTo',
        'filename' => 'setFilename',
        'attachments' => 'setAttachments',
        'comments' => 'setComments',
        'created_by' => 'setCreatedBy',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'deadline_date' => 'setDeadlineDate',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'defaultworkflow' => 'getDefaultworkflow',
        'current_task' => 'getCurrentTask',
        'actions' => 'getActions',
        'linked_to' => 'getLinkedTo',
        'filename' => 'getFilename',
        'attachments' => 'getAttachments',
        'comments' => 'getComments',
        'created_by' => 'getCreatedBy',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'deadline_date' => 'getDeadlineDate',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['defaultworkflow'] = isset($data['defaultworkflow']) ? $data['defaultworkflow'] : null;
        $this->container['current_task'] = isset($data['current_task']) ? $data['current_task'] : null;
        $this->container['actions'] = isset($data['actions']) ? $data['actions'] : null;
        $this->container['linked_to'] = isset($data['linked_to']) ? $data['linked_to'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['deadline_date'] = isset($data['deadline_date']) ? $data['deadline_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets defaultworkflow
     *
     * @return \Paqtcom\Simplicate\Model\GetSimpleDefaultWorkflow
     */
    public function getDefaultworkflow()
    {
        return $this->container['defaultworkflow'];
    }

    /**
     * Sets defaultworkflow
     *
     * @param \Paqtcom\Simplicate\Model\GetSimpleDefaultWorkflow $defaultworkflow defaultworkflow
     *
     * @return $this
     */
    public function setDefaultworkflow($defaultworkflow)
    {
        $this->container['defaultworkflow'] = $defaultworkflow;

        return $this;
    }

    /**
     * Gets current_task
     *
     * @return \Paqtcom\Simplicate\Model\CurrentTask
     */
    public function getCurrentTask()
    {
        return $this->container['current_task'];
    }

    /**
     * Sets current_task
     *
     * @param \Paqtcom\Simplicate\Model\CurrentTask $current_task current_task
     *
     * @return $this
     */
    public function setCurrentTask($current_task)
    {
        $this->container['current_task'] = $current_task;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return \Paqtcom\Simplicate\Model\GetDefaultAction[]
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param \Paqtcom\Simplicate\Model\GetDefaultAction[] $actions actions
     *
     * @return $this
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets linked_to
     *
     * @return \Paqtcom\Simplicate\Model\LinkedTo[]
     */
    public function getLinkedTo()
    {
        return $this->container['linked_to'];
    }

    /**
     * Sets linked_to
     *
     * @param \Paqtcom\Simplicate\Model\LinkedTo[] $linked_to linked_to
     *
     * @return $this
     */
    public function setLinkedTo($linked_to)
    {
        $this->container['linked_to'] = $linked_to;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename filename
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Paqtcom\Simplicate\Model\GetDocument[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Paqtcom\Simplicate\Model\GetDocument[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \Paqtcom\Simplicate\Model\Comment[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \Paqtcom\Simplicate\Model\Comment[] $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Paqtcom\Simplicate\Model\CreatedBy
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Paqtcom\Simplicate\Model\CreatedBy $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets deadline_date
     *
     * @return string
     */
    public function getDeadlineDate()
    {
        return $this->container['deadline_date'];
    }

    /**
     * Sets deadline_date
     *
     * @param string $deadline_date deadline_date
     *
     * @return $this
     */
    public function setDeadlineDate($deadline_date)
    {
        $this->container['deadline_date'] = $deadline_date;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
