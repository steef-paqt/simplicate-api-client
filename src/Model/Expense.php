<?php

/**
 * Expense
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * Expense Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Expense implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Expense';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'project' => '\Swagger\Client\Model\GetProjectSimple',
        'service_id' => 'string',
        'costtype' => '\Swagger\Client\Model\GetProjectServiceCostType',
        'default_costtype' => '\Swagger\Client\Model\GetPurchaseType',
        'amount' => 'float',
        'purchase_price_unit' => 'float',
        'tariff' => 'float',
        'purchase_price_total' => 'float',
        'purchase_margin' => 'float',
        'total_price' => 'float',
        'is_billable' => 'bool',
        'approval_status' => '\Swagger\Client\Model\ApprovalStatus',
        'invoice_status' => 'string',
        'invoice' => '\Swagger\Client\Model\GetInvoice',
        'employee' => '\Swagger\Client\Model\GetEmployeeSimple',
        'date' => 'string',
        'note' => 'string',
        'service_purchase_start_date' => 'string',
        'service_purchase_end_date' => 'string',
        'attachments' => '\Swagger\Client\Model\ExpenseAttachment[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'project' => null,
        'service_id' => null,
        'costtype' => null,
        'default_costtype' => null,
        'amount' => 'float',
        'purchase_price_unit' => 'float',
        'tariff' => 'float',
        'purchase_price_total' => 'float',
        'purchase_margin' => 'float',
        'total_price' => 'float',
        'is_billable' => null,
        'approval_status' => null,
        'invoice_status' => null,
        'invoice' => null,
        'employee' => null,
        'date' => null,
        'note' => null,
        'service_purchase_start_date' => null,
        'service_purchase_end_date' => null,
        'attachments' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'project' => 'project',
        'service_id' => 'service_id',
        'costtype' => 'costtype',
        'default_costtype' => 'default_costtype',
        'amount' => 'amount',
        'purchase_price_unit' => 'purchase_price_unit',
        'tariff' => 'tariff',
        'purchase_price_total' => 'purchase_price_total',
        'purchase_margin' => 'purchase_margin',
        'total_price' => 'total_price',
        'is_billable' => 'is_billable',
        'approval_status' => 'approval_status',
        'invoice_status' => 'invoice_status',
        'invoice' => 'invoice',
        'employee' => 'employee',
        'date' => 'date',
        'note' => 'note',
        'service_purchase_start_date' => 'service_purchase_start_date',
        'service_purchase_end_date' => 'service_purchase_end_date',
        'attachments' => 'attachments',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'project' => 'setProject',
        'service_id' => 'setServiceId',
        'costtype' => 'setCosttype',
        'default_costtype' => 'setDefaultCosttype',
        'amount' => 'setAmount',
        'purchase_price_unit' => 'setPurchasePriceUnit',
        'tariff' => 'setTariff',
        'purchase_price_total' => 'setPurchasePriceTotal',
        'purchase_margin' => 'setPurchaseMargin',
        'total_price' => 'setTotalPrice',
        'is_billable' => 'setIsBillable',
        'approval_status' => 'setApprovalStatus',
        'invoice_status' => 'setInvoiceStatus',
        'invoice' => 'setInvoice',
        'employee' => 'setEmployee',
        'date' => 'setDate',
        'note' => 'setNote',
        'service_purchase_start_date' => 'setServicePurchaseStartDate',
        'service_purchase_end_date' => 'setServicePurchaseEndDate',
        'attachments' => 'setAttachments',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'project' => 'getProject',
        'service_id' => 'getServiceId',
        'costtype' => 'getCosttype',
        'default_costtype' => 'getDefaultCosttype',
        'amount' => 'getAmount',
        'purchase_price_unit' => 'getPurchasePriceUnit',
        'tariff' => 'getTariff',
        'purchase_price_total' => 'getPurchasePriceTotal',
        'purchase_margin' => 'getPurchaseMargin',
        'total_price' => 'getTotalPrice',
        'is_billable' => 'getIsBillable',
        'approval_status' => 'getApprovalStatus',
        'invoice_status' => 'getInvoiceStatus',
        'invoice' => 'getInvoice',
        'employee' => 'getEmployee',
        'date' => 'getDate',
        'note' => 'getNote',
        'service_purchase_start_date' => 'getServicePurchaseStartDate',
        'service_purchase_end_date' => 'getServicePurchaseEndDate',
        'attachments' => 'getAttachments',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const INVOICE_STATUS_OPEN = 'open';
    public const INVOICE_STATUS_INVOICED = 'invoiced';
    public const INVOICE_STATUS_FLUSHED = 'flushed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInvoiceStatusAllowableValues()
    {
        return [
            self::INVOICE_STATUS_OPEN,
            self::INVOICE_STATUS_INVOICED,
            self::INVOICE_STATUS_FLUSHED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['service_id'] = isset($data['service_id']) ? $data['service_id'] : null;
        $this->container['costtype'] = isset($data['costtype']) ? $data['costtype'] : null;
        $this->container['default_costtype'] = isset($data['default_costtype']) ? $data['default_costtype'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['purchase_price_unit'] = isset($data['purchase_price_unit']) ? $data['purchase_price_unit'] : null;
        $this->container['tariff'] = isset($data['tariff']) ? $data['tariff'] : null;
        $this->container['purchase_price_total'] = isset($data['purchase_price_total']) ? $data['purchase_price_total'] : null;
        $this->container['purchase_margin'] = isset($data['purchase_margin']) ? $data['purchase_margin'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['is_billable'] = isset($data['is_billable']) ? $data['is_billable'] : null;
        $this->container['approval_status'] = isset($data['approval_status']) ? $data['approval_status'] : null;
        $this->container['invoice_status'] = isset($data['invoice_status']) ? $data['invoice_status'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['employee'] = isset($data['employee']) ? $data['employee'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['service_purchase_start_date'] = isset($data['service_purchase_start_date']) ? $data['service_purchase_start_date'] : null;
        $this->container['service_purchase_end_date'] = isset($data['service_purchase_end_date']) ? $data['service_purchase_end_date'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInvoiceStatusAllowableValues();
        if (!is_null($this->container['invoice_status']) && !in_array($this->container['invoice_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'invoice_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Swagger\Client\Model\GetProjectSimple
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Swagger\Client\Model\GetProjectSimple $project project
     *
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets service_id
     *
     * @return string
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     *
     * @param string $service_id service_id
     *
     * @return $this
     */
    public function setServiceId($service_id)
    {
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets costtype
     *
     * @return \Swagger\Client\Model\GetProjectServiceCostType
     */
    public function getCosttype()
    {
        return $this->container['costtype'];
    }

    /**
     * Sets costtype
     *
     * @param \Swagger\Client\Model\GetProjectServiceCostType $costtype costtype
     *
     * @return $this
     */
    public function setCosttype($costtype)
    {
        $this->container['costtype'] = $costtype;

        return $this;
    }

    /**
     * Gets default_costtype
     *
     * @return \Swagger\Client\Model\GetPurchaseType
     */
    public function getDefaultCosttype()
    {
        return $this->container['default_costtype'];
    }

    /**
     * Sets default_costtype
     *
     * @param \Swagger\Client\Model\GetPurchaseType $default_costtype default_costtype
     *
     * @return $this
     */
    public function setDefaultCosttype($default_costtype)
    {
        $this->container['default_costtype'] = $default_costtype;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets purchase_price_unit
     *
     * @return float
     */
    public function getPurchasePriceUnit()
    {
        return $this->container['purchase_price_unit'];
    }

    /**
     * Sets purchase_price_unit
     *
     * @param float $purchase_price_unit purchase_price_unit
     *
     * @return $this
     */
    public function setPurchasePriceUnit($purchase_price_unit)
    {
        $this->container['purchase_price_unit'] = $purchase_price_unit;

        return $this;
    }

    /**
     * Gets tariff
     *
     * @return float
     */
    public function getTariff()
    {
        return $this->container['tariff'];
    }

    /**
     * Sets tariff
     *
     * @param float $tariff tariff
     *
     * @return $this
     */
    public function setTariff($tariff)
    {
        $this->container['tariff'] = $tariff;

        return $this;
    }

    /**
     * Gets purchase_price_total
     *
     * @return float
     */
    public function getPurchasePriceTotal()
    {
        return $this->container['purchase_price_total'];
    }

    /**
     * Sets purchase_price_total
     *
     * @param float $purchase_price_total purchase_price_total
     *
     * @return $this
     */
    public function setPurchasePriceTotal($purchase_price_total)
    {
        $this->container['purchase_price_total'] = $purchase_price_total;

        return $this;
    }

    /**
     * Gets purchase_margin
     *
     * @return float
     */
    public function getPurchaseMargin()
    {
        return $this->container['purchase_margin'];
    }

    /**
     * Sets purchase_margin
     *
     * @param float $purchase_margin purchase_margin
     *
     * @return $this
     */
    public function setPurchaseMargin($purchase_margin)
    {
        $this->container['purchase_margin'] = $purchase_margin;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float $total_price total_price
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets is_billable
     *
     * @return bool
     */
    public function getIsBillable()
    {
        return $this->container['is_billable'];
    }

    /**
     * Sets is_billable
     *
     * @param bool $is_billable is_billable
     *
     * @return $this
     */
    public function setIsBillable($is_billable)
    {
        $this->container['is_billable'] = $is_billable;

        return $this;
    }

    /**
     * Gets approval_status
     *
     * @return \Swagger\Client\Model\ApprovalStatus
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param \Swagger\Client\Model\ApprovalStatus $approval_status approval_status
     *
     * @return $this
     */
    public function setApprovalStatus($approval_status)
    {
        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets invoice_status
     *
     * @return string
     */
    public function getInvoiceStatus()
    {
        return $this->container['invoice_status'];
    }

    /**
     * Sets invoice_status
     *
     * @param string $invoice_status invoice_status
     *
     * @return $this
     */
    public function setInvoiceStatus($invoice_status)
    {
        $allowedValues = $this->getInvoiceStatusAllowableValues();
        if (!is_null($invoice_status) && !in_array($invoice_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'invoice_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['invoice_status'] = $invoice_status;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return \Swagger\Client\Model\GetInvoice
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param \Swagger\Client\Model\GetInvoice $invoice invoice
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \Swagger\Client\Model\GetEmployeeSimple
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \Swagger\Client\Model\GetEmployeeSimple $employee employee
     *
     * @return $this
     */
    public function setEmployee($employee)
    {
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets service_purchase_start_date
     *
     * @return string
     */
    public function getServicePurchaseStartDate()
    {
        return $this->container['service_purchase_start_date'];
    }

    /**
     * Sets service_purchase_start_date
     *
     * @param string $service_purchase_start_date service_purchase_start_date
     *
     * @return $this
     */
    public function setServicePurchaseStartDate($service_purchase_start_date)
    {
        $this->container['service_purchase_start_date'] = $service_purchase_start_date;

        return $this;
    }

    /**
     * Gets service_purchase_end_date
     *
     * @return string
     */
    public function getServicePurchaseEndDate()
    {
        return $this->container['service_purchase_end_date'];
    }

    /**
     * Sets service_purchase_end_date
     *
     * @param string $service_purchase_end_date service_purchase_end_date
     *
     * @return $this
     */
    public function setServicePurchaseEndDate($service_purchase_end_date)
    {
        $this->container['service_purchase_end_date'] = $service_purchase_end_date;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Swagger\Client\Model\ExpenseAttachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Swagger\Client\Model\ExpenseAttachment[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
