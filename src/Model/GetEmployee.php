<?php

/**
 * GetEmployee
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use ArrayAccess;
use Swagger\Client\ObjectSerializer;

/**
 * GetEmployee Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetEmployee implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetEmployee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'is_user' => 'int',
        'teams' => '\Swagger\Client\Model\Team[]',
        'supervisor' => '\Swagger\Client\Model\GetEmployeeSimple',
        'status' => '\Swagger\Client\Model\EmployeeStatus',
        'custom_fields' => '\Swagger\Client\Model\GetCustomField[]',
        'person_id' => 'string',
        'name' => 'string',
        'bank_account' => 'string',
        'function' => 'string',
        'type' => 'object',
        'employment_status' => 'string',
        'civil_status' => 'string',
        'work_phone' => 'string',
        'work_mobile' => 'string',
        'work_email' => 'string',
        'hourly_sales_tariff' => 'float',
        'hourly_cost_tariff' => 'float',
        'avatar' => '\Swagger\Client\Model\Avatar',
        'created_at' => 'string',
        'updated_at' => 'string',
        'simplicate_url' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'is_user' => null,
        'teams' => null,
        'supervisor' => null,
        'status' => null,
        'custom_fields' => null,
        'person_id' => null,
        'name' => null,
        'bank_account' => null,
        'function' => null,
        'type' => null,
        'employment_status' => null,
        'civil_status' => null,
        'work_phone' => null,
        'work_mobile' => null,
        'work_email' => null,
        'hourly_sales_tariff' => 'float',
        'hourly_cost_tariff' => 'float',
        'avatar' => null,
        'created_at' => null,
        'updated_at' => null,
        'simplicate_url' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'is_user' => 'is_user',
        'teams' => 'teams',
        'supervisor' => 'supervisor',
        'status' => 'status',
        'custom_fields' => 'custom_fields',
        'person_id' => 'person_id',
        'name' => 'name',
        'bank_account' => 'bank_account',
        'function' => 'function',
        'type' => 'type',
        'employment_status' => 'employment_status',
        'civil_status' => 'civil_status',
        'work_phone' => 'work_phone',
        'work_mobile' => 'work_mobile',
        'work_email' => 'work_email',
        'hourly_sales_tariff' => 'hourly_sales_tariff',
        'hourly_cost_tariff' => 'hourly_cost_tariff',
        'avatar' => 'avatar',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'simplicate_url' => 'simplicate_url',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'is_user' => 'setIsUser',
        'teams' => 'setTeams',
        'supervisor' => 'setSupervisor',
        'status' => 'setStatus',
        'custom_fields' => 'setCustomFields',
        'person_id' => 'setPersonId',
        'name' => 'setName',
        'bank_account' => 'setBankAccount',
        'function' => 'setFunction',
        'type' => 'setType',
        'employment_status' => 'setEmploymentStatus',
        'civil_status' => 'setCivilStatus',
        'work_phone' => 'setWorkPhone',
        'work_mobile' => 'setWorkMobile',
        'work_email' => 'setWorkEmail',
        'hourly_sales_tariff' => 'setHourlySalesTariff',
        'hourly_cost_tariff' => 'setHourlyCostTariff',
        'avatar' => 'setAvatar',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'simplicate_url' => 'setSimplicateUrl',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'is_user' => 'getIsUser',
        'teams' => 'getTeams',
        'supervisor' => 'getSupervisor',
        'status' => 'getStatus',
        'custom_fields' => 'getCustomFields',
        'person_id' => 'getPersonId',
        'name' => 'getName',
        'bank_account' => 'getBankAccount',
        'function' => 'getFunction',
        'type' => 'getType',
        'employment_status' => 'getEmploymentStatus',
        'civil_status' => 'getCivilStatus',
        'work_phone' => 'getWorkPhone',
        'work_mobile' => 'getWorkMobile',
        'work_email' => 'getWorkEmail',
        'hourly_sales_tariff' => 'getHourlySalesTariff',
        'hourly_cost_tariff' => 'getHourlyCostTariff',
        'avatar' => 'getAvatar',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'simplicate_url' => 'getSimplicateUrl',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    public const EMPLOYMENT_STATUS_ACTIVE = 'active';
    public const EMPLOYMENT_STATUS_INACTIVE = 'inactive';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEmploymentStatusAllowableValues()
    {
        return [
            self::EMPLOYMENT_STATUS_ACTIVE,
            self::EMPLOYMENT_STATUS_INACTIVE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_user'] = isset($data['is_user']) ? $data['is_user'] : null;
        $this->container['teams'] = isset($data['teams']) ? $data['teams'] : null;
        $this->container['supervisor'] = isset($data['supervisor']) ? $data['supervisor'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['person_id'] = isset($data['person_id']) ? $data['person_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['bank_account'] = isset($data['bank_account']) ? $data['bank_account'] : null;
        $this->container['function'] = isset($data['function']) ? $data['function'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['employment_status'] = isset($data['employment_status']) ? $data['employment_status'] : null;
        $this->container['civil_status'] = isset($data['civil_status']) ? $data['civil_status'] : null;
        $this->container['work_phone'] = isset($data['work_phone']) ? $data['work_phone'] : null;
        $this->container['work_mobile'] = isset($data['work_mobile']) ? $data['work_mobile'] : null;
        $this->container['work_email'] = isset($data['work_email']) ? $data['work_email'] : null;
        $this->container['hourly_sales_tariff'] = isset($data['hourly_sales_tariff']) ? $data['hourly_sales_tariff'] : null;
        $this->container['hourly_cost_tariff'] = isset($data['hourly_cost_tariff']) ? $data['hourly_cost_tariff'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['simplicate_url'] = isset($data['simplicate_url']) ? $data['simplicate_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEmploymentStatusAllowableValues();
        if (!is_null($this->container['employment_status']) && !in_array($this->container['employment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'employment_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_user
     *
     * @return int
     */
    public function getIsUser()
    {
        return $this->container['is_user'];
    }

    /**
     * Sets is_user
     *
     * @param int $is_user is_user
     *
     * @return $this
     */
    public function setIsUser($is_user)
    {
        $this->container['is_user'] = $is_user;

        return $this;
    }

    /**
     * Gets teams
     *
     * @return \Swagger\Client\Model\Team[]
     */
    public function getTeams()
    {
        return $this->container['teams'];
    }

    /**
     * Sets teams
     *
     * @param \Swagger\Client\Model\Team[] $teams teams
     *
     * @return $this
     */
    public function setTeams($teams)
    {
        $this->container['teams'] = $teams;

        return $this;
    }

    /**
     * Gets supervisor
     *
     * @return \Swagger\Client\Model\GetEmployeeSimple
     */
    public function getSupervisor()
    {
        return $this->container['supervisor'];
    }

    /**
     * Sets supervisor
     *
     * @param \Swagger\Client\Model\GetEmployeeSimple $supervisor supervisor
     *
     * @return $this
     */
    public function setSupervisor($supervisor)
    {
        $this->container['supervisor'] = $supervisor;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\EmployeeStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\EmployeeStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \Swagger\Client\Model\GetCustomField[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \Swagger\Client\Model\GetCustomField[] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets person_id
     *
     * @return string
     */
    public function getPersonId()
    {
        return $this->container['person_id'];
    }

    /**
     * Sets person_id
     *
     * @param string $person_id person_id
     *
     * @return $this
     */
    public function setPersonId($person_id)
    {
        $this->container['person_id'] = $person_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets bank_account
     *
     * @return string
     */
    public function getBankAccount()
    {
        return $this->container['bank_account'];
    }

    /**
     * Sets bank_account
     *
     * @param string $bank_account bank_account
     *
     * @return $this
     */
    public function setBankAccount($bank_account)
    {
        $this->container['bank_account'] = $bank_account;

        return $this;
    }

    /**
     * Gets function
     *
     * @return string
     */
    public function getFunction()
    {
        return $this->container['function'];
    }

    /**
     * Sets function
     *
     * @param string $function function
     *
     * @return $this
     */
    public function setFunction($function)
    {
        $this->container['function'] = $function;

        return $this;
    }

    /**
     * Gets type
     *
     * @return object
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param object $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets employment_status
     *
     * @return string
     */
    public function getEmploymentStatus()
    {
        return $this->container['employment_status'];
    }

    /**
     * Sets employment_status
     *
     * @param string $employment_status employment_status
     *
     * @return $this
     */
    public function setEmploymentStatus($employment_status)
    {
        $allowedValues = $this->getEmploymentStatusAllowableValues();
        if (!is_null($employment_status) && !in_array($employment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'employment_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['employment_status'] = $employment_status;

        return $this;
    }

    /**
     * Gets civil_status
     *
     * @return string
     */
    public function getCivilStatus()
    {
        return $this->container['civil_status'];
    }

    /**
     * Sets civil_status
     *
     * @param string $civil_status civil_status
     *
     * @return $this
     */
    public function setCivilStatus($civil_status)
    {
        $this->container['civil_status'] = $civil_status;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string $work_phone work_phone
     *
     * @return $this
     */
    public function setWorkPhone($work_phone)
    {
        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets work_mobile
     *
     * @return string
     */
    public function getWorkMobile()
    {
        return $this->container['work_mobile'];
    }

    /**
     * Sets work_mobile
     *
     * @param string $work_mobile work_mobile
     *
     * @return $this
     */
    public function setWorkMobile($work_mobile)
    {
        $this->container['work_mobile'] = $work_mobile;

        return $this;
    }

    /**
     * Gets work_email
     *
     * @return string
     */
    public function getWorkEmail()
    {
        return $this->container['work_email'];
    }

    /**
     * Sets work_email
     *
     * @param string $work_email work_email
     *
     * @return $this
     */
    public function setWorkEmail($work_email)
    {
        $this->container['work_email'] = $work_email;

        return $this;
    }

    /**
     * Gets hourly_sales_tariff
     *
     * @return float
     */
    public function getHourlySalesTariff()
    {
        return $this->container['hourly_sales_tariff'];
    }

    /**
     * Sets hourly_sales_tariff
     *
     * @param float $hourly_sales_tariff hourly_sales_tariff
     *
     * @return $this
     */
    public function setHourlySalesTariff($hourly_sales_tariff)
    {
        $this->container['hourly_sales_tariff'] = $hourly_sales_tariff;

        return $this;
    }

    /**
     * Gets hourly_cost_tariff
     *
     * @return float
     */
    public function getHourlyCostTariff()
    {
        return $this->container['hourly_cost_tariff'];
    }

    /**
     * Sets hourly_cost_tariff
     *
     * @param float $hourly_cost_tariff hourly_cost_tariff
     *
     * @return $this
     */
    public function setHourlyCostTariff($hourly_cost_tariff)
    {
        $this->container['hourly_cost_tariff'] = $hourly_cost_tariff;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return \Swagger\Client\Model\Avatar
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param \Swagger\Client\Model\Avatar $avatar avatar
     *
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets simplicate_url
     *
     * @return string
     */
    public function getSimplicateUrl()
    {
        return $this->container['simplicate_url'];
    }

    /**
     * Sets simplicate_url
     *
     * @param string $simplicate_url simplicate_url
     *
     * @return $this
     */
    public function setSimplicateUrl($simplicate_url)
    {
        $this->container['simplicate_url'] = $simplicate_url;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
