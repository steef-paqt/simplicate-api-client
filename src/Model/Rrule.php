<?php

/**
 * Rrule
 *
 * PHP version 5
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Paqtcom\Simplicate\Model;

use ArrayAccess;
use Paqtcom\Simplicate\ObjectSerializer;

/**
 * Rrule Class Doc Comment
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Rrule implements ModelInterface, ArrayAccess
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $swaggerModelName = 'Rrule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerTypes = [
        'dtstart' => 'string',
        'freq' => 'int',
        'until' => 'string',
        'count' => 'int',
        'interval' => 'int',
        'wkst' => 'string',
        'byday' => 'string',
        'bysetpos' => 'string',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerFormats = [
        'dtstart' => null,
        'freq' => null,
        'until' => null,
        'count' => null,
        'interval' => null,
        'wkst' => null,
        'byday' => null,
        'bysetpos' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'dtstart' => 'dtstart',
        'freq' => 'freq',
        'until' => 'until',
        'count' => 'count',
        'interval' => 'interval',
        'wkst' => 'wkst',
        'byday' => 'byday',
        'bysetpos' => 'bysetpos',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'dtstart' => 'setDtstart',
        'freq' => 'setFreq',
        'until' => 'setUntil',
        'count' => 'setCount',
        'interval' => 'setInterval',
        'wkst' => 'setWkst',
        'byday' => 'setByday',
        'bysetpos' => 'setBysetpos',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'dtstart' => 'getDtstart',
        'freq' => 'getFreq',
        'until' => 'getUntil',
        'count' => 'getCount',
        'interval' => 'getInterval',
        'wkst' => 'getWkst',
        'byday' => 'getByday',
        'bysetpos' => 'getBysetpos',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dtstart'] = isset($data['dtstart']) ? $data['dtstart'] : null;
        $this->container['freq'] = isset($data['freq']) ? $data['freq'] : null;
        $this->container['until'] = isset($data['until']) ? $data['until'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['wkst'] = isset($data['wkst']) ? $data['wkst'] : null;
        $this->container['byday'] = isset($data['byday']) ? $data['byday'] : null;
        $this->container['bysetpos'] = isset($data['bysetpos']) ? $data['bysetpos'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets dtstart
     *
     * @return string
     */
    public function getDtstart()
    {
        return $this->container['dtstart'];
    }

    /**
     * Sets dtstart
     *
     * @param string $dtstart dtstart
     *
     * @return $this
     */
    public function setDtstart($dtstart)
    {
        $this->container['dtstart'] = $dtstart;

        return $this;
    }

    /**
     * Gets freq
     *
     * @return int
     */
    public function getFreq()
    {
        return $this->container['freq'];
    }

    /**
     * Sets freq
     *
     * @param int $freq freq
     *
     * @return $this
     */
    public function setFreq($freq)
    {
        $this->container['freq'] = $freq;

        return $this;
    }

    /**
     * Gets until
     *
     * @return string
     */
    public function getUntil()
    {
        return $this->container['until'];
    }

    /**
     * Sets until
     *
     * @param string $until until
     *
     * @return $this
     */
    public function setUntil($until)
    {
        $this->container['until'] = $until;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count count
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets wkst
     *
     * @return string
     */
    public function getWkst()
    {
        return $this->container['wkst'];
    }

    /**
     * Sets wkst
     *
     * @param string $wkst wkst
     *
     * @return $this
     */
    public function setWkst($wkst)
    {
        $this->container['wkst'] = $wkst;

        return $this;
    }

    /**
     * Gets byday
     *
     * @return string
     */
    public function getByday()
    {
        return $this->container['byday'];
    }

    /**
     * Sets byday
     *
     * @param string $byday byday
     *
     * @return $this
     */
    public function setByday($byday)
    {
        $this->container['byday'] = $byday;

        return $this;
    }

    /**
     * Gets bysetpos
     *
     * @return string
     */
    public function getBysetpos()
    {
        return $this->container['bysetpos'];
    }

    /**
     * Sets bysetpos
     *
     * @param string $bysetpos bysetpos
     *
     * @return $this
     */
    public function setBysetpos($bysetpos)
    {
        $this->container['bysetpos'] = $bysetpos;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
