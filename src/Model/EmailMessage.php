<?php

/**
 * EmailMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Simplicate API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * Contact: support@simplicate.nl
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.43
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Paqtcom\Simplicate\Model;

use ArrayAccess;
use Paqtcom\Simplicate\ObjectSerializer;

/**
 * EmailMessage Class Doc Comment
 *
 * @category Class
 * @package  Paqtcom\Simplicate
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailMessage implements ModelInterface, ArrayAccess, \Stringable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $swaggerModelName = 'EmailMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerTypes = [
        'id' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'sent_at' => 'string',
        'received_at' => 'string',
        'sender' => 'string',
        'recipients' => 'string',
        'cc_recipients' => 'string',
        'bcc_recipients' => 'string',
        'subject' => 'string',
        'html_message' => 'string',
        'html_body' => 'string',
        'plain_text' => 'string',
        'attachments' => '\Paqtcom\Simplicate\Model\EmailAttachment[]',
        'linked_to' => '\Paqtcom\Simplicate\Model\LinkedToEntity[]',
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $swaggerFormats = [
        'id' => null,
        'created_at' => null,
        'updated_at' => null,
        'sent_at' => null,
        'received_at' => null,
        'sender' => null,
        'recipients' => null,
        'cc_recipients' => null,
        'bcc_recipients' => null,
        'subject' => null,
        'html_message' => null,
        'html_body' => null,
        'plain_text' => null,
        'attachments' => null,
        'linked_to' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'sent_at' => 'sent_at',
        'received_at' => 'received_at',
        'sender' => 'sender',
        'recipients' => 'recipients',
        'cc_recipients' => 'cc_recipients',
        'bcc_recipients' => 'bcc_recipients',
        'subject' => 'subject',
        'html_message' => 'html_message',
        'html_body' => 'html_body',
        'plain_text' => 'plain_text',
        'attachments' => 'attachments',
        'linked_to' => 'linked_to',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'sent_at' => 'setSentAt',
        'received_at' => 'setReceivedAt',
        'sender' => 'setSender',
        'recipients' => 'setRecipients',
        'cc_recipients' => 'setCcRecipients',
        'bcc_recipients' => 'setBccRecipients',
        'subject' => 'setSubject',
        'html_message' => 'setHtmlMessage',
        'html_body' => 'setHtmlBody',
        'plain_text' => 'setPlainText',
        'attachments' => 'setAttachments',
        'linked_to' => 'setLinkedTo',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'sent_at' => 'getSentAt',
        'received_at' => 'getReceivedAt',
        'sender' => 'getSender',
        'recipients' => 'getRecipients',
        'cc_recipients' => 'getCcRecipients',
        'bcc_recipients' => 'getBccRecipients',
        'subject' => 'getSubject',
        'html_message' => 'getHtmlMessage',
        'html_body' => 'getHtmlBody',
        'plain_text' => 'getPlainText',
        'attachments' => 'getAttachments',
        'linked_to' => 'getLinkedTo',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['sent_at'] = $data['sent_at'] ?? null;
        $this->container['received_at'] = $data['received_at'] ?? null;
        $this->container['sender'] = $data['sender'] ?? null;
        $this->container['recipients'] = $data['recipients'] ?? null;
        $this->container['cc_recipients'] = $data['cc_recipients'] ?? null;
        $this->container['bcc_recipients'] = $data['bcc_recipients'] ?? null;
        $this->container['subject'] = $data['subject'] ?? null;
        $this->container['html_message'] = $data['html_message'] ?? null;
        $this->container['html_body'] = $data['html_body'] ?? null;
        $this->container['plain_text'] = $data['plain_text'] ?? null;
        $this->container['attachments'] = $data['attachments'] ?? null;
        $this->container['linked_to'] = $data['linked_to'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets sent_at
     *
     * @return string
     */
    public function getSentAt()
    {
        return $this->container['sent_at'];
    }

    /**
     * Sets sent_at
     *
     * @param string $sent_at sent_at
     *
     * @return $this
     */
    public function setSentAt($sent_at)
    {
        $this->container['sent_at'] = $sent_at;

        return $this;
    }

    /**
     * Gets received_at
     *
     * @return string
     */
    public function getReceivedAt()
    {
        return $this->container['received_at'];
    }

    /**
     * Sets received_at
     *
     * @param string $received_at received_at
     *
     * @return $this
     */
    public function setReceivedAt($received_at)
    {
        $this->container['received_at'] = $received_at;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return string
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param string $recipients recipients
     *
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets cc_recipients
     *
     * @return string
     */
    public function getCcRecipients()
    {
        return $this->container['cc_recipients'];
    }

    /**
     * Sets cc_recipients
     *
     * @param string $cc_recipients cc_recipients
     *
     * @return $this
     */
    public function setCcRecipients($cc_recipients)
    {
        $this->container['cc_recipients'] = $cc_recipients;

        return $this;
    }

    /**
     * Gets bcc_recipients
     *
     * @return string
     */
    public function getBccRecipients()
    {
        return $this->container['bcc_recipients'];
    }

    /**
     * Sets bcc_recipients
     *
     * @param string $bcc_recipients bcc_recipients
     *
     * @return $this
     */
    public function setBccRecipients($bcc_recipients)
    {
        $this->container['bcc_recipients'] = $bcc_recipients;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets html_message
     *
     * @return string
     */
    public function getHtmlMessage()
    {
        return $this->container['html_message'];
    }

    /**
     * Sets html_message
     *
     * @param string $html_message html_message
     *
     * @return $this
     */
    public function setHtmlMessage($html_message)
    {
        $this->container['html_message'] = $html_message;

        return $this;
    }

    /**
     * Gets html_body
     *
     * @return string
     */
    public function getHtmlBody()
    {
        return $this->container['html_body'];
    }

    /**
     * Sets html_body
     *
     * @param string $html_body html_body
     *
     * @return $this
     */
    public function setHtmlBody($html_body)
    {
        $this->container['html_body'] = $html_body;

        return $this;
    }

    /**
     * Gets plain_text
     *
     * @return string
     */
    public function getPlainText()
    {
        return $this->container['plain_text'];
    }

    /**
     * Sets plain_text
     *
     * @param string $plain_text plain_text
     *
     * @return $this
     */
    public function setPlainText($plain_text)
    {
        $this->container['plain_text'] = $plain_text;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \Paqtcom\Simplicate\Model\EmailAttachment[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \Paqtcom\Simplicate\Model\EmailAttachment[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets linked_to
     *
     * @return \Paqtcom\Simplicate\Model\LinkedToEntity[]
     */
    public function getLinkedTo()
    {
        return $this->container['linked_to'];
    }

    /**
     * Sets linked_to
     *
     * @param \Paqtcom\Simplicate\Model\LinkedToEntity[] $linked_to
     *
     * @return $this
     */
    public function setLinkedTo($linked_to)
    {
        $this->container['linked_to'] = $linked_to;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return (string) json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return (string) json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
