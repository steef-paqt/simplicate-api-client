<?php

declare(strict_types=1);

namespace Steefdw\Simplicate;

use Http\Client\Common\Plugin\AddHostPlugin;
use Http\Client\Common\Plugin\AddPathPlugin;
use Http\Client\Common\PluginClient;
use Http\Discovery\Psr17FactoryDiscovery;
use Http\Discovery\Psr18ClientDiscovery;
use Psr\Http\Message\ResponseInterface;
use Steefdw\Simplicate\Endpoint\DeleteCrmContactpersonById;
use Steefdw\Simplicate\Endpoint\DeleteCrmDocumentById;
use Steefdw\Simplicate\Endpoint\DeleteCrmOrganizationById;
use Steefdw\Simplicate\Endpoint\DeleteCrmPersonById;
use Steefdw\Simplicate\Endpoint\DeleteCustomFieldsGroupById;
use Steefdw\Simplicate\Endpoint\DeleteCustomFieldsOptionById;
use Steefdw\Simplicate\Endpoint\DeleteDocumentsDocumentById;
use Steefdw\Simplicate\Endpoint\DeleteHoursApprovalById;
use Steefdw\Simplicate\Endpoint\DeleteHoursHourById;
use Steefdw\Simplicate\Endpoint\DeleteHoursTimesheetrowById;
use Steefdw\Simplicate\Endpoint\DeleteHrmAbsenceById;
use Steefdw\Simplicate\Endpoint\DeleteHrmDocumentById;
use Steefdw\Simplicate\Endpoint\DeleteHrmTimetableById;
use Steefdw\Simplicate\Endpoint\DeleteInvoicesDocumentById;
use Steefdw\Simplicate\Endpoint\DeleteInvoicesInvoiceById;
use Steefdw\Simplicate\Endpoint\DeleteMileageMileageById;
use Steefdw\Simplicate\Endpoint\DeleteProjectsDocumentById;
use Steefdw\Simplicate\Endpoint\DeleteProjectsProjectById;
use Steefdw\Simplicate\Endpoint\DeleteProjectsServiceById;
use Steefdw\Simplicate\Endpoint\DeleteSalesDocumentById;
use Steefdw\Simplicate\Endpoint\DeleteSalesQuoteById;
use Steefdw\Simplicate\Endpoint\DeleteSalesQuotetemplateById;
use Steefdw\Simplicate\Endpoint\DeleteSalesServiceById;
use Steefdw\Simplicate\Endpoint\DeleteServicesDefaultserviceById;
use Steefdw\Simplicate\Endpoint\DeleteSharedItemById;
use Steefdw\Simplicate\Endpoint\DeleteTimelineAttachmentById;
use Steefdw\Simplicate\Endpoint\DeleteTimelineMessageById;
use Steefdw\Simplicate\Endpoint\DeleteTimersTimerById;
use Steefdw\Simplicate\Endpoint\GetCostsCoststype;
use Steefdw\Simplicate\Endpoint\GetCostsCoststypeById;
use Steefdw\Simplicate\Endpoint\GetCostsExpense;
use Steefdw\Simplicate\Endpoint\GetCostsExpenseById;
use Steefdw\Simplicate\Endpoint\GetCrmContactperson;
use Steefdw\Simplicate\Endpoint\GetCrmContactpersonById;
use Steefdw\Simplicate\Endpoint\GetCrmCountry;
use Steefdw\Simplicate\Endpoint\GetCrmCountryById;
use Steefdw\Simplicate\Endpoint\GetCrmDebtor;
use Steefdw\Simplicate\Endpoint\GetCrmDocument;
use Steefdw\Simplicate\Endpoint\GetCrmDocumentById;
use Steefdw\Simplicate\Endpoint\GetCrmDocumenttype;
use Steefdw\Simplicate\Endpoint\GetCrmDocumenttypeById;
use Steefdw\Simplicate\Endpoint\GetCrmGender;
use Steefdw\Simplicate\Endpoint\GetCrmGenderById;
use Steefdw\Simplicate\Endpoint\GetCrmIndustry;
use Steefdw\Simplicate\Endpoint\GetCrmIndustryById;
use Steefdw\Simplicate\Endpoint\GetCrmInterest;
use Steefdw\Simplicate\Endpoint\GetCrmInterestById;
use Steefdw\Simplicate\Endpoint\GetCrmMyorganizationprofile;
use Steefdw\Simplicate\Endpoint\GetCrmMyorganizationprofileById;
use Steefdw\Simplicate\Endpoint\GetCrmOrganization;
use Steefdw\Simplicate\Endpoint\GetCrmOrganizationById;
use Steefdw\Simplicate\Endpoint\GetCrmOrganizationcustomfield;
use Steefdw\Simplicate\Endpoint\GetCrmOrganizationcustomfieldById;
use Steefdw\Simplicate\Endpoint\GetCrmOrganizationcustomfieldgroup;
use Steefdw\Simplicate\Endpoint\GetCrmOrganizationcustomfieldgroupById;
use Steefdw\Simplicate\Endpoint\GetCrmOrganizationsize;
use Steefdw\Simplicate\Endpoint\GetCrmOrganizationsizeById;
use Steefdw\Simplicate\Endpoint\GetCrmPerson;
use Steefdw\Simplicate\Endpoint\GetCrmPersonById;
use Steefdw\Simplicate\Endpoint\GetCrmPersoncustomfield;
use Steefdw\Simplicate\Endpoint\GetCrmPersoncustomfieldById;
use Steefdw\Simplicate\Endpoint\GetCrmPersoncustomfieldgroup;
use Steefdw\Simplicate\Endpoint\GetCrmPersoncustomfieldgroupById;
use Steefdw\Simplicate\Endpoint\GetCrmRelationtype;
use Steefdw\Simplicate\Endpoint\GetCrmRelationtypeById;
use Steefdw\Simplicate\Endpoint\GetCustomFieldsGroup;
use Steefdw\Simplicate\Endpoint\GetCustomFieldsGroupById;
use Steefdw\Simplicate\Endpoint\GetCustomFieldsModel;
use Steefdw\Simplicate\Endpoint\GetCustomFieldsModelById;
use Steefdw\Simplicate\Endpoint\GetCustomFieldsOption;
use Steefdw\Simplicate\Endpoint\GetCustomFieldsOptionById;
use Steefdw\Simplicate\Endpoint\GetCustomFieldsType;
use Steefdw\Simplicate\Endpoint\GetCustomFieldsTypeById;
use Steefdw\Simplicate\Endpoint\GetDocumentsDocument;
use Steefdw\Simplicate\Endpoint\GetDocumentsDocumentById;
use Steefdw\Simplicate\Endpoint\GetDocumentsDocumenttype;
use Steefdw\Simplicate\Endpoint\GetDocumentsDocumenttypeById;
use Steefdw\Simplicate\Endpoint\GetDocumentsDownloadById;
use Steefdw\Simplicate\Endpoint\GetHoursApproval;
use Steefdw\Simplicate\Endpoint\GetHoursApprovalById;
use Steefdw\Simplicate\Endpoint\GetHoursApprovalstatus;
use Steefdw\Simplicate\Endpoint\GetHoursApprovalstatusById;
use Steefdw\Simplicate\Endpoint\GetHoursEmployeeexpense;
use Steefdw\Simplicate\Endpoint\GetHoursEmployeeexpenseById;
use Steefdw\Simplicate\Endpoint\GetHoursHour;
use Steefdw\Simplicate\Endpoint\GetHoursHourById;
use Steefdw\Simplicate\Endpoint\GetHoursHourstype;
use Steefdw\Simplicate\Endpoint\GetHoursHourstypeById;
use Steefdw\Simplicate\Endpoint\GetHoursSubmission;
use Steefdw\Simplicate\Endpoint\GetHoursTimesheetrow;
use Steefdw\Simplicate\Endpoint\GetHoursTimesheetrowMostrecent;
use Steefdw\Simplicate\Endpoint\GetHrmAbsence;
use Steefdw\Simplicate\Endpoint\GetHrmAbsenceById;
use Steefdw\Simplicate\Endpoint\GetHrmAbsencetype;
use Steefdw\Simplicate\Endpoint\GetHrmAbsencetypeById;
use Steefdw\Simplicate\Endpoint\GetHrmCivilstatus;
use Steefdw\Simplicate\Endpoint\GetHrmCivilstatusById;
use Steefdw\Simplicate\Endpoint\GetHrmContract;
use Steefdw\Simplicate\Endpoint\GetHrmContractById;
use Steefdw\Simplicate\Endpoint\GetHrmContracttype;
use Steefdw\Simplicate\Endpoint\GetHrmContracttypeById;
use Steefdw\Simplicate\Endpoint\GetHrmDocument;
use Steefdw\Simplicate\Endpoint\GetHrmDocumentById;
use Steefdw\Simplicate\Endpoint\GetHrmDocumenttype;
use Steefdw\Simplicate\Endpoint\GetHrmDocumenttypeById;
use Steefdw\Simplicate\Endpoint\GetHrmEmployee;
use Steefdw\Simplicate\Endpoint\GetHrmEmployeeById;
use Steefdw\Simplicate\Endpoint\GetHrmEmployeecustomfield;
use Steefdw\Simplicate\Endpoint\GetHrmEmployeecustomfieldById;
use Steefdw\Simplicate\Endpoint\GetHrmEmployeecustomfieldgroup;
use Steefdw\Simplicate\Endpoint\GetHrmEmployeecustomfieldgroupById;
use Steefdw\Simplicate\Endpoint\GetHrmEmployeetype;
use Steefdw\Simplicate\Endpoint\GetHrmEmployeetypeById;
use Steefdw\Simplicate\Endpoint\GetHrmEmploymenttype;
use Steefdw\Simplicate\Endpoint\GetHrmEmploymenttypeById;
use Steefdw\Simplicate\Endpoint\GetHrmLeave;
use Steefdw\Simplicate\Endpoint\GetHrmLeavebalance;
use Steefdw\Simplicate\Endpoint\GetHrmLeaveById;
use Steefdw\Simplicate\Endpoint\GetHrmLeavetype;
use Steefdw\Simplicate\Endpoint\GetHrmLeavetypeById;
use Steefdw\Simplicate\Endpoint\GetHrmTeam;
use Steefdw\Simplicate\Endpoint\GetHrmTeamById;
use Steefdw\Simplicate\Endpoint\GetHrmTimetable;
use Steefdw\Simplicate\Endpoint\GetInvoicesDocument;
use Steefdw\Simplicate\Endpoint\GetInvoicesDocumentById;
use Steefdw\Simplicate\Endpoint\GetInvoicesDocumenttype;
use Steefdw\Simplicate\Endpoint\GetInvoicesDocumenttypeById;
use Steefdw\Simplicate\Endpoint\GetInvoicesInvoice;
use Steefdw\Simplicate\Endpoint\GetInvoicesInvoiceById;
use Steefdw\Simplicate\Endpoint\GetInvoicesInvoicestatus;
use Steefdw\Simplicate\Endpoint\GetInvoicesInvoicestatusById;
use Steefdw\Simplicate\Endpoint\GetInvoicesPayment;
use Steefdw\Simplicate\Endpoint\GetInvoicesPaymentById;
use Steefdw\Simplicate\Endpoint\GetInvoicesPaymentterm;
use Steefdw\Simplicate\Endpoint\GetInvoicesPaymenttermById;
use Steefdw\Simplicate\Endpoint\GetInvoicesProposition;
use Steefdw\Simplicate\Endpoint\GetInvoicesReminderset;
use Steefdw\Simplicate\Endpoint\GetInvoicesRemindersetById;
use Steefdw\Simplicate\Endpoint\GetInvoicesRemindertemplate;
use Steefdw\Simplicate\Endpoint\GetInvoicesRemindertemplateById;
use Steefdw\Simplicate\Endpoint\GetInvoicesVatclass;
use Steefdw\Simplicate\Endpoint\GetInvoicesVatclassById;
use Steefdw\Simplicate\Endpoint\GetMileageMileage;
use Steefdw\Simplicate\Endpoint\GetMileageMileageById;
use Steefdw\Simplicate\Endpoint\GetProjectsAssignment;
use Steefdw\Simplicate\Endpoint\GetProjectsAssignmentbudget;
use Steefdw\Simplicate\Endpoint\GetProjectsAssignmentById;
use Steefdw\Simplicate\Endpoint\GetProjectsAssignmentstatus;
use Steefdw\Simplicate\Endpoint\GetProjectsAssignmentstatusById;
use Steefdw\Simplicate\Endpoint\GetProjectsDocument;
use Steefdw\Simplicate\Endpoint\GetProjectsDocumentById;
use Steefdw\Simplicate\Endpoint\GetProjectsDocumenttype;
use Steefdw\Simplicate\Endpoint\GetProjectsDocumenttypeById;
use Steefdw\Simplicate\Endpoint\GetProjectsProject;
use Steefdw\Simplicate\Endpoint\GetProjectsProjectById;
use Steefdw\Simplicate\Endpoint\GetProjectsProjectByIdPlanningBudget;
use Steefdw\Simplicate\Endpoint\GetProjectsProjectcustomfield;
use Steefdw\Simplicate\Endpoint\GetProjectsProjectcustomfieldById;
use Steefdw\Simplicate\Endpoint\GetProjectsProjectcustomfieldgroup;
use Steefdw\Simplicate\Endpoint\GetProjectsProjectcustomfieldgroupById;
use Steefdw\Simplicate\Endpoint\GetProjectsProjectfilter;
use Steefdw\Simplicate\Endpoint\GetProjectsProjectfilterById;
use Steefdw\Simplicate\Endpoint\GetProjectsProjectstatus;
use Steefdw\Simplicate\Endpoint\GetProjectsProjectstatusById;
use Steefdw\Simplicate\Endpoint\GetProjectsPurchase;
use Steefdw\Simplicate\Endpoint\GetProjectsPurchaseById;
use Steefdw\Simplicate\Endpoint\GetProjectsPurchasetype;
use Steefdw\Simplicate\Endpoint\GetProjectsPurchasetypeById;
use Steefdw\Simplicate\Endpoint\GetProjectsReverseinvoice;
use Steefdw\Simplicate\Endpoint\GetProjectsReverseinvoiceById;
use Steefdw\Simplicate\Endpoint\GetProjectsService;
use Steefdw\Simplicate\Endpoint\GetProjectsServiceById;
use Steefdw\Simplicate\Endpoint\GetProjectsServiceByIdPlanningBudget;
use Steefdw\Simplicate\Endpoint\GetSalesConverttoprojectById;
use Steefdw\Simplicate\Endpoint\GetSalesDocument;
use Steefdw\Simplicate\Endpoint\GetSalesDocumentById;
use Steefdw\Simplicate\Endpoint\GetSalesDocumenttype;
use Steefdw\Simplicate\Endpoint\GetSalesDocumenttypeById;
use Steefdw\Simplicate\Endpoint\GetSalesQuote;
use Steefdw\Simplicate\Endpoint\GetSalesQuoteById;
use Steefdw\Simplicate\Endpoint\GetSalesQuotestatus;
use Steefdw\Simplicate\Endpoint\GetSalesQuotestatusById;
use Steefdw\Simplicate\Endpoint\GetSalesQuotetemplate;
use Steefdw\Simplicate\Endpoint\GetSalesQuotetemplateById;
use Steefdw\Simplicate\Endpoint\GetSalesRevenuegroup;
use Steefdw\Simplicate\Endpoint\GetSalesRevenuegroupById;
use Steefdw\Simplicate\Endpoint\GetSalesSale;
use Steefdw\Simplicate\Endpoint\GetSalesSaleById;
use Steefdw\Simplicate\Endpoint\GetSalesSalescustomfield;
use Steefdw\Simplicate\Endpoint\GetSalesSalescustomfieldById;
use Steefdw\Simplicate\Endpoint\GetSalesSalescustomfieldgroup;
use Steefdw\Simplicate\Endpoint\GetSalesSalescustomfieldgroupById;
use Steefdw\Simplicate\Endpoint\GetSalesSalesfilter;
use Steefdw\Simplicate\Endpoint\GetSalesSalesfilterById;
use Steefdw\Simplicate\Endpoint\GetSalesSalesprogress;
use Steefdw\Simplicate\Endpoint\GetSalesSalesprogressById;
use Steefdw\Simplicate\Endpoint\GetSalesSalesreason;
use Steefdw\Simplicate\Endpoint\GetSalesSalesreasonById;
use Steefdw\Simplicate\Endpoint\GetSalesSalessource;
use Steefdw\Simplicate\Endpoint\GetSalesSalessourceById;
use Steefdw\Simplicate\Endpoint\GetSalesSalesstatus;
use Steefdw\Simplicate\Endpoint\GetSalesSalesstatusById;
use Steefdw\Simplicate\Endpoint\GetSalesService;
use Steefdw\Simplicate\Endpoint\GetSalesServiceById;
use Steefdw\Simplicate\Endpoint\GetServicesDefaultservice;
use Steefdw\Simplicate\Endpoint\GetServicesDefaultserviceById;
use Steefdw\Simplicate\Endpoint\GetSharedItem;
use Steefdw\Simplicate\Endpoint\GetSharedItemById;
use Steefdw\Simplicate\Endpoint\GetTimelineMessage;
use Steefdw\Simplicate\Endpoint\GetTimelineMessageById;
use Steefdw\Simplicate\Endpoint\GetTimelineMessagetype;
use Steefdw\Simplicate\Endpoint\GetTimelineMessagetypeById;
use Steefdw\Simplicate\Endpoint\GetTimersTimer;
use Steefdw\Simplicate\Endpoint\GetTimersTimerById;
use Steefdw\Simplicate\Endpoint\PostCrmDocument;
use Steefdw\Simplicate\Endpoint\PostCrmMergeorganization;
use Steefdw\Simplicate\Endpoint\PostCrmMergeperson;
use Steefdw\Simplicate\Endpoint\PostCrmOrganization;
use Steefdw\Simplicate\Endpoint\PostCrmPerson;
use Steefdw\Simplicate\Endpoint\PostCustomFieldsGroupById;
use Steefdw\Simplicate\Endpoint\PostCustomFieldsOptionById;
use Steefdw\Simplicate\Endpoint\PostDocumentsDocument;
use Steefdw\Simplicate\Endpoint\PostHoursAbsence;
use Steefdw\Simplicate\Endpoint\PostHoursApproval;
use Steefdw\Simplicate\Endpoint\PostHoursHour;
use Steefdw\Simplicate\Endpoint\PostHoursHourstype;
use Steefdw\Simplicate\Endpoint\PostHoursLeave;
use Steefdw\Simplicate\Endpoint\PostHoursSubmission;
use Steefdw\Simplicate\Endpoint\PostHoursSubmit;
use Steefdw\Simplicate\Endpoint\PostHoursTimesheetrow;
use Steefdw\Simplicate\Endpoint\PostHrmAbsence;
use Steefdw\Simplicate\Endpoint\PostHrmDocument;
use Steefdw\Simplicate\Endpoint\PostHrmEmployee;
use Steefdw\Simplicate\Endpoint\PostHrmLeave;
use Steefdw\Simplicate\Endpoint\PostHrmTimetable;
use Steefdw\Simplicate\Endpoint\PostInvoicesDocument;
use Steefdw\Simplicate\Endpoint\PostInvoicesInvoice;
use Steefdw\Simplicate\Endpoint\PostInvoicesPayment;
use Steefdw\Simplicate\Endpoint\PostMergerCompareorganization;
use Steefdw\Simplicate\Endpoint\PostMergerCompareperson;
use Steefdw\Simplicate\Endpoint\PostMileageMileage;
use Steefdw\Simplicate\Endpoint\PostProjectsAssignment;
use Steefdw\Simplicate\Endpoint\PostProjectsAssignmentstatus;
use Steefdw\Simplicate\Endpoint\PostProjectsDocument;
use Steefdw\Simplicate\Endpoint\PostProjectsProject;
use Steefdw\Simplicate\Endpoint\PostProjectsService;
use Steefdw\Simplicate\Endpoint\PostProjectsServiceByIdDuplicate;
use Steefdw\Simplicate\Endpoint\PostSalesDocument;
use Steefdw\Simplicate\Endpoint\PostSalesQuote;
use Steefdw\Simplicate\Endpoint\PostSalesQuotetemplate;
use Steefdw\Simplicate\Endpoint\PostSalesSale;
use Steefdw\Simplicate\Endpoint\PostSalesSalesByIdDuplicate;
use Steefdw\Simplicate\Endpoint\PostSalesServiceByIdDuplicate;
use Steefdw\Simplicate\Endpoint\PostServicesDefaultservice;
use Steefdw\Simplicate\Endpoint\PostTimelineAttachment;
use Steefdw\Simplicate\Endpoint\PostTimelineMessage;
use Steefdw\Simplicate\Endpoint\PostTimersTimer;
use Steefdw\Simplicate\Endpoint\PostUploadChunked;
use Steefdw\Simplicate\Endpoint\PutCrmDocument;
use Steefdw\Simplicate\Endpoint\PutCrmOrganizationById;
use Steefdw\Simplicate\Endpoint\PutCrmPersonById;
use Steefdw\Simplicate\Endpoint\PutCustomFieldsGroupById;
use Steefdw\Simplicate\Endpoint\PutCustomFieldsOptionById;
use Steefdw\Simplicate\Endpoint\PutDocumentsDocument;
use Steefdw\Simplicate\Endpoint\PutHoursAbsenceById;
use Steefdw\Simplicate\Endpoint\PutHoursApprovalById;
use Steefdw\Simplicate\Endpoint\PutHoursHourById;
use Steefdw\Simplicate\Endpoint\PutHoursHourstypeById;
use Steefdw\Simplicate\Endpoint\PutHoursLeaveById;
use Steefdw\Simplicate\Endpoint\PutHoursTimesheetrowOrder;
use Steefdw\Simplicate\Endpoint\PutHrmAbsenceById;
use Steefdw\Simplicate\Endpoint\PutHrmDocument;
use Steefdw\Simplicate\Endpoint\PutHrmEmployeeById;
use Steefdw\Simplicate\Endpoint\PutHrmLeaveById;
use Steefdw\Simplicate\Endpoint\PutHrmTimetableById;
use Steefdw\Simplicate\Endpoint\PutInvoicesDocument;
use Steefdw\Simplicate\Endpoint\PutInvoicesInvoiceById;
use Steefdw\Simplicate\Endpoint\PutInvoicesPaymentById;
use Steefdw\Simplicate\Endpoint\PutMileageMileageById;
use Steefdw\Simplicate\Endpoint\PutProjectsAssignmentById;
use Steefdw\Simplicate\Endpoint\PutProjectsAssignmentstatusById;
use Steefdw\Simplicate\Endpoint\PutProjectsDocument;
use Steefdw\Simplicate\Endpoint\PutProjectsProjectById;
use Steefdw\Simplicate\Endpoint\PutProjectsServiceById;
use Steefdw\Simplicate\Endpoint\PutSalesDocument;
use Steefdw\Simplicate\Endpoint\PutSalesQuoteById;
use Steefdw\Simplicate\Endpoint\PutSalesQuoteemailById;
use Steefdw\Simplicate\Endpoint\PutSalesQuotetemplateById;
use Steefdw\Simplicate\Endpoint\PutSalesSaleById;
use Steefdw\Simplicate\Endpoint\PutSalesServiceById;
use Steefdw\Simplicate\Endpoint\PutServicesDefaultserviceById;
use Steefdw\Simplicate\Endpoint\PutSharedItemById;
use Steefdw\Simplicate\Endpoint\PutTimersTimerById;
use Steefdw\Simplicate\Endpoint\PutUploadChunkedById;
use Steefdw\Simplicate\Exception\DeleteCrmContactpersonByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteCrmContactpersonByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteCrmContactpersonByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteCrmDocumentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteCrmDocumentByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteCrmDocumentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteCrmOrganizationByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteCrmOrganizationByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteCrmOrganizationByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteCrmPersonByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteCrmPersonByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteCrmPersonByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteCustomFieldsGroupByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteCustomFieldsGroupByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteCustomFieldsGroupByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteCustomFieldsOptionByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteCustomFieldsOptionByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteCustomFieldsOptionByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteDocumentsDocumentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteDocumentsDocumentByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteDocumentsDocumentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteHoursApprovalByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteHoursApprovalByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteHoursApprovalByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteHoursHourByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteHoursHourByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteHoursHourByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteHoursTimesheetrowByIdBadRequestException;
use Steefdw\Simplicate\Exception\DeleteHoursTimesheetrowByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteHoursTimesheetrowByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteHoursTimesheetrowByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteHrmAbsenceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteHrmAbsenceByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteHrmAbsenceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteHrmDocumentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteHrmDocumentByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteHrmDocumentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteHrmTimetableByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteHrmTimetableByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteHrmTimetableByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteInvoicesDocumentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteInvoicesDocumentByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteInvoicesDocumentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteInvoicesInvoiceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteInvoicesInvoiceByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteInvoicesInvoiceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteMileageMileageByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteMileageMileageByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteMileageMileageByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteProjectsDocumentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteProjectsDocumentByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteProjectsDocumentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteProjectsProjectByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteProjectsProjectByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteProjectsProjectByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteProjectsServiceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteProjectsServiceByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteProjectsServiceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteSalesDocumentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteSalesDocumentByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteSalesDocumentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteSalesQuoteByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteSalesQuoteByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteSalesQuoteByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteSalesQuotetemplateByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteSalesQuotetemplateByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteSalesQuotetemplateByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteSalesServiceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteSalesServiceByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteSalesServiceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteServicesDefaultserviceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteServicesDefaultserviceByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteServicesDefaultserviceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteSharedItemByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteSharedItemByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteSharedItemByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteTimelineAttachmentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteTimelineAttachmentByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteTimelineAttachmentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteTimelineMessageByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteTimelineMessageByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteTimelineMessageByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\DeleteTimersTimerByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\DeleteTimersTimerByIdNotFoundException;
use Steefdw\Simplicate\Exception\DeleteTimersTimerByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCostsCoststypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCostsCoststypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCostsCoststypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCostsCoststypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCostsExpenseByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCostsExpenseByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCostsExpenseByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCostsExpenseByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmContactpersonByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmContactpersonByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmContactpersonByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmContactpersonByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmCountryByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmCountryByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmCountryByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmCountryByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmDocumentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmDocumentByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmDocumentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmDocumentByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmDocumenttypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmDocumenttypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmDocumenttypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmDocumenttypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmDocumenttypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmDocumenttypeNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmDocumenttypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmGenderByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmGenderByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmGenderByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmGenderByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmGenderInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmGenderNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmGenderUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmIndustryByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmIndustryByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmIndustryByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmIndustryByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmIndustryInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmIndustryNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmIndustryUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmInterestByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmInterestByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmInterestByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmInterestByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmInterestInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmInterestNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmInterestUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmMyorganizationprofileByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmMyorganizationprofileByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmMyorganizationprofileByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmMyorganizationprofileByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmMyorganizationprofileInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmMyorganizationprofileNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmMyorganizationprofileUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationByIdBadRequestException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldgroupByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldgroupByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldgroupByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldgroupByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldgroupInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldgroupNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldgroupUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationcustomfieldUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationsizeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationsizeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationsizeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationsizeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationsizeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationsizeNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationsizeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmOrganizationUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmPersonByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmPersonByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmPersonByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmPersonByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldgroupByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldgroupByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldgroupByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldgroupByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldgroupInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldgroupNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldgroupUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmPersoncustomfieldUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmPersonInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmPersonNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmPersonUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmRelationtypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmRelationtypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmRelationtypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCrmRelationtypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetCrmRelationtypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCrmRelationtypeNotFoundException;
use Steefdw\Simplicate\Exception\GetCrmRelationtypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCustomFieldsGroupByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCustomFieldsGroupByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCustomFieldsGroupByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCustomFieldsGroupInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCustomFieldsGroupNotFoundException;
use Steefdw\Simplicate\Exception\GetCustomFieldsGroupUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCustomFieldsModelByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCustomFieldsModelByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCustomFieldsModelByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCustomFieldsModelInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCustomFieldsModelNotFoundException;
use Steefdw\Simplicate\Exception\GetCustomFieldsModelUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCustomFieldsOptionByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCustomFieldsOptionByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCustomFieldsOptionByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCustomFieldsOptionInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCustomFieldsOptionNotFoundException;
use Steefdw\Simplicate\Exception\GetCustomFieldsOptionUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCustomFieldsTypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCustomFieldsTypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetCustomFieldsTypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetCustomFieldsTypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetCustomFieldsTypeNotFoundException;
use Steefdw\Simplicate\Exception\GetCustomFieldsTypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumentByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumentByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumentNotFoundException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumenttypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumenttypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumenttypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumenttypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumenttypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumenttypeNotFoundException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumenttypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetDocumentsDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\GetDocumentsDownloadByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetDocumentsDownloadByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetDocumentsDownloadByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetDocumentsDownloadByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHoursApprovalByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursApprovalByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHoursApprovalByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHoursApprovalByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHoursApprovalInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursApprovalNotFoundException;
use Steefdw\Simplicate\Exception\GetHoursApprovalstatusByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursApprovalstatusByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHoursApprovalstatusByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHoursApprovalstatusByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHoursApprovalstatusInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursApprovalstatusNotFoundException;
use Steefdw\Simplicate\Exception\GetHoursApprovalstatusUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHoursApprovalUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHoursEmployeeexpenseByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursEmployeeexpenseByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHoursEmployeeexpenseByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHoursEmployeeexpenseByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHoursEmployeeexpenseInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursEmployeeexpenseNotFoundException;
use Steefdw\Simplicate\Exception\GetHoursEmployeeexpenseUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHoursHourByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursHourByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHoursHourByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHoursHourByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHoursHourInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursHourNotFoundException;
use Steefdw\Simplicate\Exception\GetHoursHourstypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursHourstypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHoursHourstypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHoursHourstypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHoursHourstypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursHourstypeNotFoundException;
use Steefdw\Simplicate\Exception\GetHoursHourstypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHoursHourUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHoursSubmissionInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursSubmissionNotFoundException;
use Steefdw\Simplicate\Exception\GetHoursSubmissionUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHoursTimesheetrowBadRequestException;
use Steefdw\Simplicate\Exception\GetHoursTimesheetrowInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursTimesheetrowMostrecentBadRequestException;
use Steefdw\Simplicate\Exception\GetHoursTimesheetrowMostrecentInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHoursTimesheetrowMostrecentNotFoundException;
use Steefdw\Simplicate\Exception\GetHoursTimesheetrowMostrecentUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHoursTimesheetrowUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmAbsenceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmAbsenceByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmAbsenceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmAbsenceInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmAbsenceNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmAbsencetypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmAbsencetypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmAbsencetypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmAbsencetypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmAbsencetypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmAbsencetypeNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmAbsencetypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmAbsenceUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmCivilstatusByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmCivilstatusByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmCivilstatusByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmCivilstatusByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmCivilstatusInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmCivilstatusNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmCivilstatusUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmContractByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmContractByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmContractByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmContractByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmContractInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmContractNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmContracttypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmContracttypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmContracttypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmContracttypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmContracttypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmContracttypeNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmContracttypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmContractUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmDocumentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmDocumentByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmDocumentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmDocumentByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmDocumentNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmDocumenttypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmDocumenttypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmDocumenttypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmDocumenttypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmDocumenttypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmDocumenttypeNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmDocumenttypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmEmployeeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmEmployeeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmEmployeeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmEmployeeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldgroupByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldgroupByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldgroupByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldgroupByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldgroupInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldgroupNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldgroupUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmEmployeecustomfieldUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmEmployeeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmEmployeeNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmEmployeetypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmEmployeetypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmEmployeetypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmEmployeetypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmEmployeetypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmEmployeetypeNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmEmployeetypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmEmployeeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmEmploymenttypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmEmploymenttypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmEmploymenttypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmEmploymenttypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmEmploymenttypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmEmploymenttypeNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmEmploymenttypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmLeavebalanceInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmLeavebalanceNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmLeavebalanceUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmLeaveByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmLeaveByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmLeaveByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmLeaveInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmLeaveNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmLeavetypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmLeavetypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmLeavetypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmLeavetypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmLeavetypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmLeavetypeNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmLeavetypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmLeaveUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmTeamByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmTeamByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmTeamByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmTeamByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetHrmTeamInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmTeamNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmTeamUnauthorizedException;
use Steefdw\Simplicate\Exception\GetHrmTimetableInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetHrmTimetableNotFoundException;
use Steefdw\Simplicate\Exception\GetHrmTimetableUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumentByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumentByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumentNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumenttypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumenttypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumenttypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumenttypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumenttypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumenttypeNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumenttypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoiceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoiceByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoiceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoiceByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoiceInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoiceNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoicestatusByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoicestatusByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoicestatusByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoicestatusByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoicestatusInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoicestatusNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoicestatusUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesInvoiceUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymentByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymentByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymentInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymentNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymenttermByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymenttermByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymenttermByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymenttermByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymenttermInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymenttermNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymenttermUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesPaymentUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesPropositionInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesPropositionNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesPropositionUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindersetByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindersetByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindersetByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindersetByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindersetInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindersetNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindersetUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindertemplateByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindertemplateByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindertemplateByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindertemplateByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindertemplateInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindertemplateNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesRemindertemplateUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesVatclassByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesVatclassByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesVatclassByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetInvoicesVatclassByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetInvoicesVatclassInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetInvoicesVatclassNotFoundException;
use Steefdw\Simplicate\Exception\GetInvoicesVatclassUnauthorizedException;
use Steefdw\Simplicate\Exception\GetMileageMileageByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetMileageMileageByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetMileageMileageByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetMileageMileageByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetMileageMileageInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetMileageMileageNotFoundException;
use Steefdw\Simplicate\Exception\GetMileageMileageUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentbudgetInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentbudgetNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentbudgetPaymentRequiredException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentbudgetUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentstatusByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentstatusByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentstatusByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentstatusInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentstatusNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentstatusUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsAssignmentUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsDocumentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsDocumentByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsDocumentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsDocumentByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetProjectsDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsDocumentNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsDocumenttypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsDocumenttypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsDocumenttypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsDocumenttypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetProjectsDocumenttypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsDocumenttypeNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsDocumenttypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsProjectByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsProjectByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsProjectByIdPlanningBudgetInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsProjectByIdPlanningBudgetNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsProjectByIdPlanningBudgetUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsProjectByIdPlanningBudgetUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetProjectsProjectByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsProjectByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldgroupByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldgroupByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldgroupByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldgroupByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldgroupInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldgroupNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldgroupUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsProjectcustomfieldUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsProjectfilterByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsProjectfilterByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsProjectfilterByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsProjectfilterByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetProjectsProjectfilterInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsProjectfilterNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsProjectfilterUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsProjectInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsProjectNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsProjectstatusByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsProjectstatusByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsProjectstatusByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsProjectstatusByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetProjectsProjectstatusInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsProjectstatusNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsProjectstatusUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsProjectUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsPurchaseByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsPurchaseByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsPurchaseByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsPurchaseInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsPurchaseNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsPurchasetypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsPurchasetypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsPurchasetypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsPurchasetypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetProjectsPurchasetypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsPurchasetypeNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsPurchasetypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsPurchaseUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsReverseinvoiceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsReverseinvoiceByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsReverseinvoiceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsReverseinvoiceInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsReverseinvoiceNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsReverseinvoiceUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsServiceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsServiceByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsServiceByIdPlanningBudgetInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsServiceByIdPlanningBudgetNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsServiceByIdPlanningBudgetUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsServiceByIdPlanningBudgetUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetProjectsServiceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetProjectsServiceByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetProjectsServiceInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetProjectsServiceNotFoundException;
use Steefdw\Simplicate\Exception\GetProjectsServiceUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesConverttoprojectByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesConverttoprojectByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesConverttoprojectByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesConverttoprojectByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesDocumentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesDocumentByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesDocumentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesDocumentByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesDocumentNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesDocumenttypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesDocumenttypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesDocumenttypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesDocumenttypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesDocumenttypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesDocumenttypeNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesDocumenttypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesQuoteByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesQuoteByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesQuoteByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesQuoteByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesQuoteInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesQuoteNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesQuotestatusByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesQuotestatusByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesQuotestatusByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesQuotestatusByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesQuotestatusInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesQuotestatusNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesQuotestatusUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesQuotestatusUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesQuotetemplateByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesQuotetemplateByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesQuotetemplateByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesQuotetemplateByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesQuotetemplateInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesQuotetemplateNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesQuotetemplateUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesQuoteUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesRevenuegroupByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesRevenuegroupByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesRevenuegroupByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesRevenuegroupByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesRevenuegroupInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesRevenuegroupNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesRevenuegroupUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSaleByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSaleByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSaleByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSaleByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesSaleInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSaleNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldgroupByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldgroupByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldgroupByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldgroupByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldgroupInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldgroupNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldgroupUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalescustomfieldUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalesfilterByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalesfilterByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalesfilterByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalesfilterByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesSalesfilterInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalesfilterNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalesfilterUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalesprogressByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalesprogressByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalesprogressByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalesprogressByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesSalesprogressInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalesprogressNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalesprogressUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalesreasonByIdBadRequestException;
use Steefdw\Simplicate\Exception\GetSalesSalesreasonByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalesreasonByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalesreasonByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesSalesreasonInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalesreasonNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalesreasonUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalessourceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalessourceByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalessourceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalessourceByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesSalessourceInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalessourceNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalessourceUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalesstatusByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalesstatusByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalesstatusByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSalesstatusByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesSalesstatusInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesSalesstatusNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesSalesstatusUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesSaleUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesServiceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesServiceByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesServiceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSalesServiceByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSalesServiceInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSalesServiceNotFoundException;
use Steefdw\Simplicate\Exception\GetSalesServiceUnauthorizedException;
use Steefdw\Simplicate\Exception\GetServicesDefaultserviceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetServicesDefaultserviceByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetServicesDefaultserviceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetServicesDefaultserviceByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetServicesDefaultserviceInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetServicesDefaultserviceNotFoundException;
use Steefdw\Simplicate\Exception\GetServicesDefaultserviceUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSharedItemByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSharedItemByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetSharedItemByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetSharedItemByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetSharedItemInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetSharedItemNotFoundException;
use Steefdw\Simplicate\Exception\GetSharedItemUnauthorizedException;
use Steefdw\Simplicate\Exception\GetTimelineMessageByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetTimelineMessageByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetTimelineMessageByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetTimelineMessageByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetTimelineMessageInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetTimelineMessageNotFoundException;
use Steefdw\Simplicate\Exception\GetTimelineMessagetypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetTimelineMessagetypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetTimelineMessagetypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetTimelineMessagetypeByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetTimelineMessagetypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetTimelineMessagetypeNotFoundException;
use Steefdw\Simplicate\Exception\GetTimelineMessagetypeUnauthorizedException;
use Steefdw\Simplicate\Exception\GetTimelineMessageUnauthorizedException;
use Steefdw\Simplicate\Exception\GetTimersTimerByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetTimersTimerByIdNotFoundException;
use Steefdw\Simplicate\Exception\GetTimersTimerByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\GetTimersTimerByIdUnprocessableEntityException;
use Steefdw\Simplicate\Exception\GetTimersTimerInternalServerErrorException;
use Steefdw\Simplicate\Exception\GetTimersTimerNotFoundException;
use Steefdw\Simplicate\Exception\GetTimersTimerUnauthorizedException;
use Steefdw\Simplicate\Exception\PostCrmDocumentBadRequestException;
use Steefdw\Simplicate\Exception\PostCrmDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostCrmDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\PostCrmMergeorganizationBadRequestException;
use Steefdw\Simplicate\Exception\PostCrmMergeorganizationInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostCrmMergeorganizationUnauthorizedException;
use Steefdw\Simplicate\Exception\PostCrmMergepersonBadRequestException;
use Steefdw\Simplicate\Exception\PostCrmMergepersonInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostCrmMergepersonUnauthorizedException;
use Steefdw\Simplicate\Exception\PostCrmOrganizationBadRequestException;
use Steefdw\Simplicate\Exception\PostCrmOrganizationInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostCrmOrganizationUnauthorizedException;
use Steefdw\Simplicate\Exception\PostCrmPersonInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostCrmPersonNotFoundException;
use Steefdw\Simplicate\Exception\PostCrmPersonUnauthorizedException;
use Steefdw\Simplicate\Exception\PostCustomFieldsGroupByIdBadRequestException;
use Steefdw\Simplicate\Exception\PostCustomFieldsGroupByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostCustomFieldsGroupByIdNotFoundException;
use Steefdw\Simplicate\Exception\PostCustomFieldsGroupByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PostCustomFieldsOptionByIdBadRequestException;
use Steefdw\Simplicate\Exception\PostCustomFieldsOptionByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostCustomFieldsOptionByIdNotFoundException;
use Steefdw\Simplicate\Exception\PostCustomFieldsOptionByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PostDocumentsDocumentBadRequestException;
use Steefdw\Simplicate\Exception\PostDocumentsDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostDocumentsDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHoursAbsenceBadRequestException;
use Steefdw\Simplicate\Exception\PostHoursAbsenceInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHoursAbsenceUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHoursApprovalInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHoursApprovalNotFoundException;
use Steefdw\Simplicate\Exception\PostHoursApprovalUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHoursHourInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHoursHourNotFoundException;
use Steefdw\Simplicate\Exception\PostHoursHourstypeInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHoursHourstypeNotFoundException;
use Steefdw\Simplicate\Exception\PostHoursHourstypeUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHoursHourUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHoursLeaveBadRequestException;
use Steefdw\Simplicate\Exception\PostHoursLeaveInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHoursLeaveUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHoursSubmissionInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHoursSubmissionNotFoundException;
use Steefdw\Simplicate\Exception\PostHoursSubmissionUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHoursSubmitInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHoursSubmitNotFoundException;
use Steefdw\Simplicate\Exception\PostHoursSubmitUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHoursTimesheetrowBadRequestException;
use Steefdw\Simplicate\Exception\PostHoursTimesheetrowInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHoursTimesheetrowUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHrmAbsenceBadRequestException;
use Steefdw\Simplicate\Exception\PostHrmAbsenceInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHrmAbsenceUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHrmDocumentBadRequestException;
use Steefdw\Simplicate\Exception\PostHrmDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHrmDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHrmEmployeeInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHrmEmployeeNotFoundException;
use Steefdw\Simplicate\Exception\PostHrmEmployeeUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHrmLeaveBadRequestException;
use Steefdw\Simplicate\Exception\PostHrmLeaveInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHrmLeaveUnauthorizedException;
use Steefdw\Simplicate\Exception\PostHrmTimetableInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostHrmTimetableNotFoundException;
use Steefdw\Simplicate\Exception\PostHrmTimetableUnauthorizedException;
use Steefdw\Simplicate\Exception\PostInvoicesDocumentBadRequestException;
use Steefdw\Simplicate\Exception\PostInvoicesDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostInvoicesDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\PostInvoicesInvoiceInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostInvoicesInvoiceNotFoundException;
use Steefdw\Simplicate\Exception\PostInvoicesInvoiceUnauthorizedException;
use Steefdw\Simplicate\Exception\PostInvoicesPaymentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostInvoicesPaymentNotFoundException;
use Steefdw\Simplicate\Exception\PostInvoicesPaymentUnauthorizedException;
use Steefdw\Simplicate\Exception\PostMergerCompareorganizationBadRequestException;
use Steefdw\Simplicate\Exception\PostMergerCompareorganizationInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostMergerCompareorganizationUnauthorizedException;
use Steefdw\Simplicate\Exception\PostMergerComparepersonBadRequestException;
use Steefdw\Simplicate\Exception\PostMergerComparepersonInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostMergerComparepersonUnauthorizedException;
use Steefdw\Simplicate\Exception\PostMileageMileageInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostMileageMileageNotFoundException;
use Steefdw\Simplicate\Exception\PostMileageMileageUnauthorizedException;
use Steefdw\Simplicate\Exception\PostProjectsAssignmentBadRequestException;
use Steefdw\Simplicate\Exception\PostProjectsAssignmentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostProjectsAssignmentNotFoundException;
use Steefdw\Simplicate\Exception\PostProjectsAssignmentstatusBadRequestException;
use Steefdw\Simplicate\Exception\PostProjectsAssignmentstatusInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostProjectsAssignmentstatusNotFoundException;
use Steefdw\Simplicate\Exception\PostProjectsAssignmentstatusUnauthorizedException;
use Steefdw\Simplicate\Exception\PostProjectsAssignmentUnauthorizedException;
use Steefdw\Simplicate\Exception\PostProjectsDocumentBadRequestException;
use Steefdw\Simplicate\Exception\PostProjectsDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostProjectsDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\PostProjectsProjectInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostProjectsProjectNotFoundException;
use Steefdw\Simplicate\Exception\PostProjectsProjectUnauthorizedException;
use Steefdw\Simplicate\Exception\PostProjectsServiceByIdDuplicateBadRequestException;
use Steefdw\Simplicate\Exception\PostProjectsServiceByIdDuplicateInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostProjectsServiceByIdDuplicateNotFoundException;
use Steefdw\Simplicate\Exception\PostProjectsServiceByIdDuplicateUnauthorizedException;
use Steefdw\Simplicate\Exception\PostProjectsServiceInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostProjectsServiceNotFoundException;
use Steefdw\Simplicate\Exception\PostProjectsServiceUnauthorizedException;
use Steefdw\Simplicate\Exception\PostSalesDocumentBadRequestException;
use Steefdw\Simplicate\Exception\PostSalesDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostSalesDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\PostSalesQuoteBadRequestException;
use Steefdw\Simplicate\Exception\PostSalesQuoteInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostSalesQuotetemplateBadRequestException;
use Steefdw\Simplicate\Exception\PostSalesQuotetemplateInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostSalesQuotetemplateUnauthorizedException;
use Steefdw\Simplicate\Exception\PostSalesQuoteUnauthorizedException;
use Steefdw\Simplicate\Exception\PostSalesSaleInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostSalesSaleNotFoundException;
use Steefdw\Simplicate\Exception\PostSalesSalesByIdDuplicateBadRequestException;
use Steefdw\Simplicate\Exception\PostSalesSalesByIdDuplicateInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostSalesSalesByIdDuplicateNotFoundException;
use Steefdw\Simplicate\Exception\PostSalesSalesByIdDuplicateUnauthorizedException;
use Steefdw\Simplicate\Exception\PostSalesSaleUnauthorizedException;
use Steefdw\Simplicate\Exception\PostSalesServiceByIdDuplicateBadRequestException;
use Steefdw\Simplicate\Exception\PostSalesServiceByIdDuplicateInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostSalesServiceByIdDuplicateNotFoundException;
use Steefdw\Simplicate\Exception\PostSalesServiceByIdDuplicateUnauthorizedException;
use Steefdw\Simplicate\Exception\PostSalesServiceInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostSalesServiceNotFoundException;
use Steefdw\Simplicate\Exception\PostSalesServiceUnauthorizedException;
use Steefdw\Simplicate\Exception\PostServicesDefaultserviceInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostServicesDefaultserviceNotFoundException;
use Steefdw\Simplicate\Exception\PostServicesDefaultserviceUnauthorizedException;
use Steefdw\Simplicate\Exception\PostSharedItemInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostSharedItemNotFoundException;
use Steefdw\Simplicate\Exception\PostSharedItemUnauthorizedException;
use Steefdw\Simplicate\Exception\PostTimelineAttachmentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostTimelineAttachmentNotFoundException;
use Steefdw\Simplicate\Exception\PostTimelineAttachmentUnauthorizedException;
use Steefdw\Simplicate\Exception\PostTimelineMessageInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostTimelineMessageNotFoundException;
use Steefdw\Simplicate\Exception\PostTimelineMessageUnauthorizedException;
use Steefdw\Simplicate\Exception\PostTimersTimerInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostTimersTimerNotFoundException;
use Steefdw\Simplicate\Exception\PostTimersTimerUnauthorizedException;
use Steefdw\Simplicate\Exception\PostUploadChunkedBadRequestException;
use Steefdw\Simplicate\Exception\PostUploadChunkedInternalServerErrorException;
use Steefdw\Simplicate\Exception\PostUploadChunkedNotFoundException;
use Steefdw\Simplicate\Exception\PostUploadChunkedUnauthorizedException;
use Steefdw\Simplicate\Exception\PutCrmDocumentBadRequestException;
use Steefdw\Simplicate\Exception\PutCrmDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutCrmDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\PutCrmOrganizationByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutCrmOrganizationByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutCrmOrganizationByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutCrmOrganizationByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutCrmPersonByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutCrmPersonByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutCrmPersonByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutCrmPersonByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutCustomFieldsGroupByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutCustomFieldsGroupByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutCustomFieldsGroupByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutCustomFieldsGroupByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutCustomFieldsOptionByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutCustomFieldsOptionByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutCustomFieldsOptionByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutCustomFieldsOptionByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutDocumentsDocumentBadRequestException;
use Steefdw\Simplicate\Exception\PutDocumentsDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutDocumentsDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\PutHoursAbsenceByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutHoursAbsenceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutHoursAbsenceByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutHoursAbsenceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutHoursApprovalByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutHoursApprovalByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutHoursApprovalByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutHoursApprovalByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutHoursHourByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutHoursHourByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutHoursHourByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutHoursHourByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutHoursHourstypeByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutHoursHourstypeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutHoursHourstypeByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutHoursHourstypeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutHoursLeaveByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutHoursLeaveByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutHoursLeaveByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutHoursLeaveByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutHoursTimesheetrowOrderBadRequestException;
use Steefdw\Simplicate\Exception\PutHoursTimesheetrowOrderInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutHoursTimesheetrowOrderNotFoundException;
use Steefdw\Simplicate\Exception\PutHoursTimesheetrowOrderUnauthorizedException;
use Steefdw\Simplicate\Exception\PutHrmAbsenceByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutHrmAbsenceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutHrmAbsenceByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutHrmAbsenceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutHrmDocumentBadRequestException;
use Steefdw\Simplicate\Exception\PutHrmDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutHrmDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\PutHrmEmployeeByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutHrmEmployeeByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutHrmEmployeeByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutHrmLeaveByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutHrmLeaveByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutHrmLeaveByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutHrmLeaveByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutHrmTimetableByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutHrmTimetableByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutHrmTimetableByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutInvoicesDocumentBadRequestException;
use Steefdw\Simplicate\Exception\PutInvoicesDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutInvoicesDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\PutInvoicesInvoiceByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutInvoicesInvoiceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutInvoicesInvoiceByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutInvoicesInvoiceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutInvoicesPaymentByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutInvoicesPaymentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutInvoicesPaymentByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutInvoicesPaymentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutMileageMileageByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutMileageMileageByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutMileageMileageByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutMileageMileageByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutProjectsAssignmentByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutProjectsAssignmentByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutProjectsAssignmentByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutProjectsAssignmentByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutProjectsAssignmentstatusByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutProjectsAssignmentstatusByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutProjectsAssignmentstatusByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutProjectsAssignmentstatusByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutProjectsDocumentBadRequestException;
use Steefdw\Simplicate\Exception\PutProjectsDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutProjectsDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\PutProjectsProjectByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutProjectsProjectByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutProjectsProjectByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutProjectsProjectByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutProjectsServiceByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutProjectsServiceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutProjectsServiceByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutProjectsServiceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutSalesDocumentBadRequestException;
use Steefdw\Simplicate\Exception\PutSalesDocumentInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutSalesDocumentUnauthorizedException;
use Steefdw\Simplicate\Exception\PutSalesQuoteByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutSalesQuoteByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutSalesQuoteByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutSalesQuoteemailByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutSalesQuoteemailByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutSalesQuoteemailByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutSalesQuotetemplateByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutSalesQuotetemplateByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutSalesQuotetemplateByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutSalesSaleByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutSalesSaleByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutSalesSaleByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutSalesSaleByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutSalesServiceByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutSalesServiceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutSalesServiceByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutSalesServiceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutServicesDefaultserviceByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutServicesDefaultserviceByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutServicesDefaultserviceByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutServicesDefaultserviceByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutSharedItemByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutSharedItemByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutSharedItemByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutTimersTimerByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutTimersTimerByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutTimersTimerByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutTimersTimerByIdUnauthorizedException;
use Steefdw\Simplicate\Exception\PutUploadChunkedByIdBadRequestException;
use Steefdw\Simplicate\Exception\PutUploadChunkedByIdInternalServerErrorException;
use Steefdw\Simplicate\Exception\PutUploadChunkedByIdNotFoundException;
use Steefdw\Simplicate\Exception\PutUploadChunkedByIdUnauthorizedException;
use Steefdw\Simplicate\Model\AssignmentStatus;
use Steefdw\Simplicate\Model\CustomFieldGroup;
use Steefdw\Simplicate\Model\CustomFieldOption;
use Steefdw\Simplicate\Model\Invoice;
use Steefdw\Simplicate\Model\Payment;
use Steefdw\Simplicate\Model\PostAbsence;
use Steefdw\Simplicate\Model\PostApproval;
use Steefdw\Simplicate\Model\PostAssignment;
use Steefdw\Simplicate\Model\PostAttachment;
use Steefdw\Simplicate\Model\PostChunked;
use Steefdw\Simplicate\Model\PostDefaultService;
use Steefdw\Simplicate\Model\PostDocument;
use Steefdw\Simplicate\Model\PostDuplicateSales;
use Steefdw\Simplicate\Model\PostEmployee;
use Steefdw\Simplicate\Model\PostHours;
use Steefdw\Simplicate\Model\PostHoursType;
use Steefdw\Simplicate\Model\PostInvoice;
use Steefdw\Simplicate\Model\PostLeave;
use Steefdw\Simplicate\Model\PostMerger;
use Steefdw\Simplicate\Model\PostMergerCompare;
use Steefdw\Simplicate\Model\PostMessage;
use Steefdw\Simplicate\Model\PostMileage;
use Steefdw\Simplicate\Model\PostOrganization;
use Steefdw\Simplicate\Model\PostPerson;
use Steefdw\Simplicate\Model\PostProject;
use Steefdw\Simplicate\Model\PostProjectService;
use Steefdw\Simplicate\Model\PostQuote;
use Steefdw\Simplicate\Model\PostQuoteTemplate;
use Steefdw\Simplicate\Model\PostSales;
use Steefdw\Simplicate\Model\PostSalesService;
use Steefdw\Simplicate\Model\PostSharedItem;
use Steefdw\Simplicate\Model\PostSubmission;
use Steefdw\Simplicate\Model\PostTimer;
use Steefdw\Simplicate\Model\PostTimesheetRow;
use Steefdw\Simplicate\Model\PostTimetable;
use Steefdw\Simplicate\Model\PutAssignment;
use Steefdw\Simplicate\Model\PutChunked;
use Steefdw\Simplicate\Model\PutDocument;
use Steefdw\Simplicate\Model\PutEmployee;
use Steefdw\Simplicate\Model\PutMileage;
use Steefdw\Simplicate\Model\PutProjectService;
use Steefdw\Simplicate\Model\PutQuoteEmail;
use Steefdw\Simplicate\Model\PutTimer;
use Steefdw\Simplicate\Model\PutTimetable;
use Steefdw\Simplicate\Model\RestResultAbsence;
use Steefdw\Simplicate\Model\RestResultAbsenceMultiple;
use Steefdw\Simplicate\Model\RestResultAbsenceType;
use Steefdw\Simplicate\Model\RestResultAbsenceTypes;
use Steefdw\Simplicate\Model\RestResultApproval;
use Steefdw\Simplicate\Model\RestResultApprovals;
use Steefdw\Simplicate\Model\RestResultApprovalStatus;
use Steefdw\Simplicate\Model\RestResultApprovalStatusList;
use Steefdw\Simplicate\Model\RestResultCivilStatus;
use Steefdw\Simplicate\Model\RestResultCivilStatuses;
use Steefdw\Simplicate\Model\RestResultContactPerson;
use Steefdw\Simplicate\Model\RestResultContract;
use Steefdw\Simplicate\Model\RestResultContracts;
use Steefdw\Simplicate\Model\RestResultContractType;
use Steefdw\Simplicate\Model\RestResultContractTypes;
use Steefdw\Simplicate\Model\RestResultCountry;
use Steefdw\Simplicate\Model\RestResultCustomField;
use Steefdw\Simplicate\Model\RestResultCustomFieldGroup;
use Steefdw\Simplicate\Model\RestResultCustomFieldGroups;
use Steefdw\Simplicate\Model\RestResultCustomFieldModel;
use Steefdw\Simplicate\Model\RestResultCustomFieldModels;
use Steefdw\Simplicate\Model\RestResultCustomFieldOption;
use Steefdw\Simplicate\Model\RestResultCustomFieldOptions;
use Steefdw\Simplicate\Model\RestResultCustomFields;
use Steefdw\Simplicate\Model\RestResultCustomFieldType;
use Steefdw\Simplicate\Model\RestResultCustomFieldTypes;
use Steefdw\Simplicate\Model\RestResultDateTimeRange;
use Steefdw\Simplicate\Model\RestResultDefaultService;
use Steefdw\Simplicate\Model\RestResultDefaultServices;
use Steefdw\Simplicate\Model\RestResultDocument;
use Steefdw\Simplicate\Model\RestResultDocuments;
use Steefdw\Simplicate\Model\RestResultDocumentType;
use Steefdw\Simplicate\Model\RestResultDocumentTypes;
use Steefdw\Simplicate\Model\RestResultEmployee;
use Steefdw\Simplicate\Model\RestResultEmployeeExpense;
use Steefdw\Simplicate\Model\RestResultEmployeeExpenseList;
use Steefdw\Simplicate\Model\RestResultEmployees;
use Steefdw\Simplicate\Model\RestResultEmployeeType;
use Steefdw\Simplicate\Model\RestResultEmployeeTypes;
use Steefdw\Simplicate\Model\RestResultEmploymentType;
use Steefdw\Simplicate\Model\RestResultEmploymentTypes;
use Steefdw\Simplicate\Model\RestResultGender;
use Steefdw\Simplicate\Model\RestResultGenders;
use Steefdw\Simplicate\Model\RestResultHour;
use Steefdw\Simplicate\Model\RestResultHours;
use Steefdw\Simplicate\Model\RestResultHoursSubmissions;
use Steefdw\Simplicate\Model\RestResultHoursTimesheetRows;
use Steefdw\Simplicate\Model\RestResultHourType;
use Steefdw\Simplicate\Model\RestResultHourTypes;
use Steefdw\Simplicate\Model\RestResultIndustries;
use Steefdw\Simplicate\Model\RestResultIndustry;
use Steefdw\Simplicate\Model\RestResultInterest;
use Steefdw\Simplicate\Model\RestResultInterests;
use Steefdw\Simplicate\Model\RestResultInvoice;
use Steefdw\Simplicate\Model\RestResultInvoices;
use Steefdw\Simplicate\Model\RestResultInvoiceStatus;
use Steefdw\Simplicate\Model\RestResultInvoiceStatuses;
use Steefdw\Simplicate\Model\RestResultLeave;
use Steefdw\Simplicate\Model\RestResultLeaveBalances;
use Steefdw\Simplicate\Model\RestResultLeaveMultiple;
use Steefdw\Simplicate\Model\RestResultLeaveType;
use Steefdw\Simplicate\Model\RestResultLeaveTypes;
use Steefdw\Simplicate\Model\RestResultMergerCompare;
use Steefdw\Simplicate\Model\RestResultMileage;
use Steefdw\Simplicate\Model\RestResultMileageList;
use Steefdw\Simplicate\Model\RestResultMyOrganizationProfile;
use Steefdw\Simplicate\Model\RestResultMyOrganizationProfiles;
use Steefdw\Simplicate\Model\RestResultOrganization;
use Steefdw\Simplicate\Model\RestResultOrganizations;
use Steefdw\Simplicate\Model\RestResultOrganizationSize;
use Steefdw\Simplicate\Model\RestResultOrganizationSizes;
use Steefdw\Simplicate\Model\RestResultPayment;
use Steefdw\Simplicate\Model\RestResultPayments;
use Steefdw\Simplicate\Model\RestResultPaymentTerm;
use Steefdw\Simplicate\Model\RestResultPaymentTerms;
use Steefdw\Simplicate\Model\RestResultPerson;
use Steefdw\Simplicate\Model\RestResultPersons;
use Steefdw\Simplicate\Model\RestResultProject;
use Steefdw\Simplicate\Model\RestResultProjectAssignment;
use Steefdw\Simplicate\Model\RestResultProjectAssignmentbudget;
use Steefdw\Simplicate\Model\RestResultProjectAssignments;
use Steefdw\Simplicate\Model\RestResultProjectAssignmentStatus;
use Steefdw\Simplicate\Model\RestResultProjectAssignmentStatuses;
use Steefdw\Simplicate\Model\RestResultProjects;
use Steefdw\Simplicate\Model\RestResultProjectService;
use Steefdw\Simplicate\Model\RestResultProjectServices;
use Steefdw\Simplicate\Model\RestResultProjectStatus;
use Steefdw\Simplicate\Model\RestResultProjectStatusses;
use Steefdw\Simplicate\Model\RestResultPropositions;
use Steefdw\Simplicate\Model\RestResultPurchase;
use Steefdw\Simplicate\Model\RestResultPurchases;
use Steefdw\Simplicate\Model\RestResultPurchaseType;
use Steefdw\Simplicate\Model\RestResultPurchaseTypes;
use Steefdw\Simplicate\Model\RestResultQuote;
use Steefdw\Simplicate\Model\RestResultQuotes;
use Steefdw\Simplicate\Model\RestResultQuoteStatus;
use Steefdw\Simplicate\Model\RestResultQuoteStatuses;
use Steefdw\Simplicate\Model\RestResultQuoteTemplate;
use Steefdw\Simplicate\Model\RestResultQuoteTemplates;
use Steefdw\Simplicate\Model\RestResultRelationType;
use Steefdw\Simplicate\Model\RestResultRelationTypes;
use Steefdw\Simplicate\Model\RestResultReminderSet;
use Steefdw\Simplicate\Model\RestResultReminderSets;
use Steefdw\Simplicate\Model\RestResultReminderTemplate;
use Steefdw\Simplicate\Model\RestResultReminderTemplates;
use Steefdw\Simplicate\Model\RestResultRevenueGroup;
use Steefdw\Simplicate\Model\RestResultRevenueGroups;
use Steefdw\Simplicate\Model\RestResultReverseInvoice;
use Steefdw\Simplicate\Model\RestResultReverseInvoices;
use Steefdw\Simplicate\Model\RestResultSale;
use Steefdw\Simplicate\Model\RestResultSales;
use Steefdw\Simplicate\Model\RestResultSalesProgress;
use Steefdw\Simplicate\Model\RestResultSalesProgresses;
use Steefdw\Simplicate\Model\RestResultSalesReason;
use Steefdw\Simplicate\Model\RestResultSalesReasons;
use Steefdw\Simplicate\Model\RestResultSalesService;
use Steefdw\Simplicate\Model\RestResultSalesServices;
use Steefdw\Simplicate\Model\RestResultSalesSource;
use Steefdw\Simplicate\Model\RestResultSalesSources;
use Steefdw\Simplicate\Model\RestResultSalesStatus;
use Steefdw\Simplicate\Model\RestResultSalesStatusses;
use Steefdw\Simplicate\Model\RestResultSharedItem;
use Steefdw\Simplicate\Model\RestResultSharedItems;
use Steefdw\Simplicate\Model\RestResultTeam;
use Steefdw\Simplicate\Model\RestResultTeams;
use Steefdw\Simplicate\Model\RestResultTimelineMessage;
use Steefdw\Simplicate\Model\RestResultTimelineMessages;
use Steefdw\Simplicate\Model\RestResultTimelineMessageType;
use Steefdw\Simplicate\Model\RestResultTimelineMessageTypes;
use Steefdw\Simplicate\Model\RestResultTimer;
use Steefdw\Simplicate\Model\RestResultTimers;
use Steefdw\Simplicate\Model\RestResultTimetables;
use Steefdw\Simplicate\Model\RestResultVatClass;
use Steefdw\Simplicate\Model\RestResultVatClasses;
use Steefdw\Simplicate\Model\ResultMergerMerge;
use Steefdw\Simplicate\Model\Submit;
use Steefdw\Simplicate\Normalizer\JaneObjectNormalizer;
use Steefdw\Simplicate\Runtime\Client\Client as ParentClient;
use Symfony\Component\Serializer\Encoder\JsonDecode;
use Symfony\Component\Serializer\Encoder\JsonEncode;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ArrayDenormalizer;
use Symfony\Component\Serializer\Serializer;

class Client extends ParentClient
{
    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultHourTypes|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws \Steefdw\Simplicate\Exception\GetCostsCoststypeUnauthorizedException
     * @throws \Steefdw\Simplicate\Exception\GetCostsCoststypeNotFoundException
     * @throws \Steefdw\Simplicate\Exception\GetCostsCoststypeInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCostsCoststype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCostsCoststype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCostsCoststypeByIdUnauthorizedException
     * @throws GetCostsCoststypeByIdNotFoundException
     * @throws GetCostsCoststypeByIdUnprocessableEntityException
     * @throws GetCostsCoststypeByIdInternalServerErrorException
     *
     * @return null|RestResultHourType|ResponseInterface
     */
    public function getCostsCoststypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCostsCoststypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultEmployeeExpenseList|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws \Steefdw\Simplicate\Exception\GetCostsExpenseUnauthorizedException
     * @throws \Steefdw\Simplicate\Exception\GetCostsExpenseNotFoundException
     * @throws \Steefdw\Simplicate\Exception\GetCostsExpenseInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCostsExpense(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCostsExpense($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCostsExpenseByIdUnauthorizedException
     * @throws GetCostsExpenseByIdNotFoundException
     * @throws GetCostsExpenseByIdUnprocessableEntityException
     * @throws GetCostsExpenseByIdInternalServerErrorException
     *
     * @return null|RestResultEmployeeExpense|ResponseInterface
     */
    public function getCostsExpenseById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCostsExpenseById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|\Steefdw\Simplicate\Model\RestResultContactPersons|ResponseInterface
     *@var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     *     @var string $select Select only specific fields to return
     * }
     * @throws \Steefdw\Simplicate\Exception\GetCrmContactpersonUnauthorizedException
     * @throws \Steefdw\Simplicate\Exception\GetCrmContactpersonNotFoundException
     * @throws \Steefdw\Simplicate\Exception\GetCrmContactpersonInternalServerErrorException
     *
     */
    public function getCrmContactperson(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmContactperson($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteCrmContactpersonByIdUnauthorizedException
     * @throws DeleteCrmContactpersonByIdNotFoundException
     * @throws DeleteCrmContactpersonByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteCrmContactpersonById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteCrmContactpersonById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmContactpersonByIdUnauthorizedException
     * @throws GetCrmContactpersonByIdNotFoundException
     * @throws GetCrmContactpersonByIdUnprocessableEntityException
     * @throws GetCrmContactpersonByIdInternalServerErrorException
     *
     * @return null|RestResultContactPerson|ResponseInterface
     */
    public function getCrmContactpersonById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmContactpersonById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|\Steefdw\Simplicate\Model\RestResultCountries|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws \Steefdw\Simplicate\Exception\GetCrmCountryUnauthorizedException
     * @throws \Steefdw\Simplicate\Exception\GetCrmCountryNotFoundException
     * @throws \Steefdw\Simplicate\Exception\GetCrmCountryInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmCountry(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmCountry($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmCountryByIdUnauthorizedException
     * @throws GetCrmCountryByIdNotFoundException
     * @throws GetCrmCountryByIdUnprocessableEntityException
     * @throws GetCrmCountryByIdInternalServerErrorException
     *
     * @return null|RestResultCountry|ResponseInterface
     */
    public function getCrmCountryById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmCountryById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|\Steefdw\Simplicate\Model\RestResultDebtorList|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws \Steefdw\Simplicate\Exception\GetCrmDebtorUnauthorizedException
     * @throws \Steefdw\Simplicate\Exception\GetCrmDebtorNotFoundException
     * @throws \Steefdw\Simplicate\Exception\GetCrmDebtorInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmDebtor(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmDebtor($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultDocuments|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws \Steefdw\Simplicate\Exception\GetCrmDocumentUnauthorizedException
     * @throws \Steefdw\Simplicate\Exception\GetCrmDocumentNotFoundException
     * @throws \Steefdw\Simplicate\Exception\GetCrmDocumentInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmDocument(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmDocument($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostDocument $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostCrmDocumentBadRequestException
     * @throws PostCrmDocumentUnauthorizedException
     * @throws PostCrmDocumentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postCrmDocument(PostDocument $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostCrmDocument($body), $fetch);
    }

    /**
     *
     *
     * @param PutDocument $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutCrmDocumentBadRequestException
     * @throws PutCrmDocumentUnauthorizedException
     * @throws PutCrmDocumentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putCrmDocument(PutDocument $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutCrmDocument($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteCrmDocumentByIdUnauthorizedException
     * @throws DeleteCrmDocumentByIdNotFoundException
     * @throws DeleteCrmDocumentByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteCrmDocumentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteCrmDocumentById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmDocumentByIdUnauthorizedException
     * @throws GetCrmDocumentByIdNotFoundException
     * @throws GetCrmDocumentByIdUnprocessableEntityException
     * @throws GetCrmDocumentByIdInternalServerErrorException
     *
     * @return null|RestResultDocument|ResponseInterface
     */
    public function getCrmDocumentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmDocumentById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultDocumentTypes|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetCrmDocumenttypeUnauthorizedException
     * @throws GetCrmDocumenttypeNotFoundException
     * @throws GetCrmDocumenttypeInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmDocumenttype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmDocumenttype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmDocumenttypeByIdUnauthorizedException
     * @throws GetCrmDocumenttypeByIdNotFoundException
     * @throws GetCrmDocumenttypeByIdUnprocessableEntityException
     * @throws GetCrmDocumenttypeByIdInternalServerErrorException
     *
     * @return null|RestResultDocumentType|ResponseInterface
     */
    public function getCrmDocumenttypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmDocumenttypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultGenders|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetCrmGenderUnauthorizedException
     * @throws GetCrmGenderNotFoundException
     * @throws GetCrmGenderInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmGender(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmGender($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmGenderByIdUnauthorizedException
     * @throws GetCrmGenderByIdNotFoundException
     * @throws GetCrmGenderByIdUnprocessableEntityException
     * @throws GetCrmGenderByIdInternalServerErrorException
     *
     * @return null|RestResultGender|ResponseInterface
     */
    public function getCrmGenderById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmGenderById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultIndustries|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetCrmIndustryUnauthorizedException
     * @throws GetCrmIndustryNotFoundException
     * @throws GetCrmIndustryInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmIndustry(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmIndustry($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmIndustryByIdUnauthorizedException
     * @throws GetCrmIndustryByIdNotFoundException
     * @throws GetCrmIndustryByIdUnprocessableEntityException
     * @throws GetCrmIndustryByIdInternalServerErrorException
     *
     * @return null|RestResultIndustry|ResponseInterface
     */
    public function getCrmIndustryById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmIndustryById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultInterests|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetCrmInterestUnauthorizedException
     * @throws GetCrmInterestNotFoundException
     * @throws GetCrmInterestInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmInterest(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmInterest($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmInterestByIdUnauthorizedException
     * @throws GetCrmInterestByIdNotFoundException
     * @throws GetCrmInterestByIdUnprocessableEntityException
     * @throws GetCrmInterestByIdInternalServerErrorException
     *
     * @return null|RestResultInterest|ResponseInterface
     */
    public function getCrmInterestById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmInterestById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultMyOrganizationProfiles|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetCrmMyorganizationprofileUnauthorizedException
     * @throws GetCrmMyorganizationprofileNotFoundException
     * @throws GetCrmMyorganizationprofileInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmMyorganizationprofile(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmMyorganizationprofile($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmMyorganizationprofileByIdUnauthorizedException
     * @throws GetCrmMyorganizationprofileByIdNotFoundException
     * @throws GetCrmMyorganizationprofileByIdUnprocessableEntityException
     * @throws GetCrmMyorganizationprofileByIdInternalServerErrorException
     *
     * @return null|RestResultMyOrganizationProfile|ResponseInterface
     */
    public function getCrmMyorganizationprofileById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmMyorganizationprofileById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultOrganizations|ResponseInterface
     *@var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     *     @var string $select Select only specific fields to return
     * }
     * @throws GetCrmOrganizationUnauthorizedException
     * @throws GetCrmOrganizationNotFoundException
     * @throws GetCrmOrganizationInternalServerErrorException
     *
     */
    public function getCrmOrganization(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmOrganization($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostOrganization $body Organization object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostCrmOrganizationBadRequestException
     * @throws PostCrmOrganizationUnauthorizedException
     * @throws PostCrmOrganizationInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postCrmOrganization(PostOrganization $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostCrmOrganization($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteCrmOrganizationByIdUnauthorizedException
     * @throws DeleteCrmOrganizationByIdNotFoundException
     * @throws DeleteCrmOrganizationByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteCrmOrganizationById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteCrmOrganizationById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmOrganizationByIdBadRequestException
     * @throws GetCrmOrganizationByIdUnauthorizedException
     * @throws GetCrmOrganizationByIdUnprocessableEntityException
     * @throws GetCrmOrganizationByIdInternalServerErrorException
     *
     * @return null|RestResultOrganization|ResponseInterface
     */
    public function getCrmOrganizationById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmOrganizationById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostOrganization $body Organization object containing data that with the new values
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutCrmOrganizationByIdBadRequestException
     * @throws PutCrmOrganizationByIdUnauthorizedException
     * @throws PutCrmOrganizationByIdNotFoundException
     * @throws PutCrmOrganizationByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putCrmOrganizationById(string $id, PostOrganization $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutCrmOrganizationById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultCustomFieldGroups|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetCrmOrganizationcustomfieldgroupUnauthorizedException
     * @throws GetCrmOrganizationcustomfieldgroupNotFoundException
     * @throws GetCrmOrganizationcustomfieldgroupInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmOrganizationcustomfieldgroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmOrganizationcustomfieldgroup($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmOrganizationcustomfieldgroupByIdUnauthorizedException
     * @throws GetCrmOrganizationcustomfieldgroupByIdNotFoundException
     * @throws GetCrmOrganizationcustomfieldgroupByIdUnprocessableEntityException
     * @throws GetCrmOrganizationcustomfieldgroupByIdInternalServerErrorException
     *
     * @return null|RestResultCustomFieldGroup|ResponseInterface
     */
    public function getCrmOrganizationcustomfieldgroupById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmOrganizationcustomfieldgroupById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultCustomFields|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetCrmOrganizationcustomfieldUnauthorizedException
     * @throws GetCrmOrganizationcustomfieldNotFoundException
     * @throws GetCrmOrganizationcustomfieldInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmOrganizationcustomfield(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmOrganizationcustomfield($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmOrganizationcustomfieldByIdUnauthorizedException
     * @throws GetCrmOrganizationcustomfieldByIdNotFoundException
     * @throws GetCrmOrganizationcustomfieldByIdUnprocessableEntityException
     * @throws GetCrmOrganizationcustomfieldByIdInternalServerErrorException
     *
     * @return null|RestResultCustomField|ResponseInterface
     */
    public function getCrmOrganizationcustomfieldById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmOrganizationcustomfieldById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultOrganizationSizes|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetCrmOrganizationsizeUnauthorizedException
     * @throws GetCrmOrganizationsizeNotFoundException
     * @throws GetCrmOrganizationsizeInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmOrganizationsize(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmOrganizationsize($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmOrganizationsizeByIdUnauthorizedException
     * @throws GetCrmOrganizationsizeByIdNotFoundException
     * @throws GetCrmOrganizationsizeByIdUnprocessableEntityException
     * @throws GetCrmOrganizationsizeByIdInternalServerErrorException
     *
     * @return null|RestResultOrganizationSize|ResponseInterface
     */
    public function getCrmOrganizationsizeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmOrganizationsizeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultPersons|ResponseInterface
     *@var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     *     @var string $select Select only specific fields to return
     * }
     * @throws GetCrmPersonUnauthorizedException
     * @throws GetCrmPersonNotFoundException
     * @throws GetCrmPersonInternalServerErrorException
     *
     */
    public function getCrmPerson(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmPerson($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostPerson $body Person object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostCrmPersonUnauthorizedException
     * @throws PostCrmPersonNotFoundException
     * @throws PostCrmPersonInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postCrmPerson(PostPerson $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostCrmPerson($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteCrmPersonByIdUnauthorizedException
     * @throws DeleteCrmPersonByIdNotFoundException
     * @throws DeleteCrmPersonByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteCrmPersonById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteCrmPersonById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmPersonByIdUnauthorizedException
     * @throws GetCrmPersonByIdNotFoundException
     * @throws GetCrmPersonByIdUnprocessableEntityException
     * @throws GetCrmPersonByIdInternalServerErrorException
     *
     * @return null|RestResultPerson|ResponseInterface
     */
    public function getCrmPersonById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmPersonById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostPerson $body Person object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutCrmPersonByIdBadRequestException
     * @throws PutCrmPersonByIdUnauthorizedException
     * @throws PutCrmPersonByIdNotFoundException
     * @throws PutCrmPersonByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putCrmPersonById(string $id, PostPerson $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutCrmPersonById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultCustomFieldGroups|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetCrmPersoncustomfieldgroupUnauthorizedException
     * @throws GetCrmPersoncustomfieldgroupNotFoundException
     * @throws GetCrmPersoncustomfieldgroupInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmPersoncustomfieldgroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmPersoncustomfieldgroup($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmPersoncustomfieldgroupByIdUnauthorizedException
     * @throws GetCrmPersoncustomfieldgroupByIdNotFoundException
     * @throws GetCrmPersoncustomfieldgroupByIdUnprocessableEntityException
     * @throws GetCrmPersoncustomfieldgroupByIdInternalServerErrorException
     *
     * @return null|RestResultCustomFieldGroup|ResponseInterface
     */
    public function getCrmPersoncustomfieldgroupById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmPersoncustomfieldgroupById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultCustomFields|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetCrmPersoncustomfieldUnauthorizedException
     * @throws GetCrmPersoncustomfieldNotFoundException
     * @throws GetCrmPersoncustomfieldInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCrmPersoncustomfield(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmPersoncustomfield($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmPersoncustomfieldByIdUnauthorizedException
     * @throws GetCrmPersoncustomfieldByIdNotFoundException
     * @throws GetCrmPersoncustomfieldByIdUnprocessableEntityException
     * @throws GetCrmPersoncustomfieldByIdInternalServerErrorException
     *
     * @return null|RestResultCustomField|ResponseInterface
     */
    public function getCrmPersoncustomfieldById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmPersoncustomfieldById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmRelationtypeUnauthorizedException
     * @throws GetCrmRelationtypeNotFoundException
     * @throws GetCrmRelationtypeInternalServerErrorException
     *
     * @return null|RestResultRelationTypes|ResponseInterface
     */
    public function getCrmRelationtype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmRelationtype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCrmRelationtypeByIdUnauthorizedException
     * @throws GetCrmRelationtypeByIdNotFoundException
     * @throws GetCrmRelationtypeByIdUnprocessableEntityException
     * @throws GetCrmRelationtypeByIdInternalServerErrorException
     *
     * @return null|RestResultRelationType|ResponseInterface
     */
    public function getCrmRelationtypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCrmRelationtypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultCustomFieldGroups|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetCustomFieldsGroupUnauthorizedException
     * @throws GetCustomFieldsGroupNotFoundException
     * @throws GetCustomFieldsGroupInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getCustomFieldsGroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCustomFieldsGroup($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteCustomFieldsGroupByIdUnauthorizedException
     * @throws DeleteCustomFieldsGroupByIdNotFoundException
     * @throws DeleteCustomFieldsGroupByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteCustomFieldsGroupById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteCustomFieldsGroupById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCustomFieldsGroupByIdUnauthorizedException
     * @throws GetCustomFieldsGroupByIdNotFoundException
     * @throws GetCustomFieldsGroupByIdInternalServerErrorException
     *
     * @return null|RestResultCustomFieldGroup|ResponseInterface
     */
    public function getCustomFieldsGroupById(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCustomFieldsGroupById($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param CustomFieldGroup $body Organization object containing data that with the new values
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostCustomFieldsGroupByIdBadRequestException
     * @throws PostCustomFieldsGroupByIdUnauthorizedException
     * @throws PostCustomFieldsGroupByIdNotFoundException
     * @throws PostCustomFieldsGroupByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postCustomFieldsGroupById(string $id, CustomFieldGroup $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostCustomFieldsGroupById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param CustomFieldGroup $body Organization object containing data that with the new values
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutCustomFieldsGroupByIdBadRequestException
     * @throws PutCustomFieldsGroupByIdUnauthorizedException
     * @throws PutCustomFieldsGroupByIdNotFoundException
     * @throws PutCustomFieldsGroupByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putCustomFieldsGroupById(string $id, CustomFieldGroup $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutCustomFieldsGroupById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCustomFieldsModelUnauthorizedException
     * @throws GetCustomFieldsModelNotFoundException
     * @throws GetCustomFieldsModelInternalServerErrorException
     *
     * @return null|RestResultCustomFieldModels|ResponseInterface
     */
    public function getCustomFieldsModel(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCustomFieldsModel($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCustomFieldsModelByIdUnauthorizedException
     * @throws GetCustomFieldsModelByIdNotFoundException
     * @throws GetCustomFieldsModelByIdInternalServerErrorException
     *
     * @return null|RestResultCustomFieldModel|ResponseInterface
     */
    public function getCustomFieldsModelById(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCustomFieldsModelById($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCustomFieldsOptionUnauthorizedException
     * @throws GetCustomFieldsOptionNotFoundException
     * @throws GetCustomFieldsOptionInternalServerErrorException
     *
     * @return null|RestResultCustomFieldOptions|ResponseInterface
     */
    public function getCustomFieldsOption(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCustomFieldsOption($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteCustomFieldsOptionByIdUnauthorizedException
     * @throws DeleteCustomFieldsOptionByIdNotFoundException
     * @throws DeleteCustomFieldsOptionByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteCustomFieldsOptionById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteCustomFieldsOptionById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCustomFieldsOptionByIdUnauthorizedException
     * @throws GetCustomFieldsOptionByIdNotFoundException
     * @throws GetCustomFieldsOptionByIdInternalServerErrorException
     *
     * @return null|RestResultCustomFieldOption|ResponseInterface
     */
    public function getCustomFieldsOptionById(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCustomFieldsOptionById($id, $queryParameters), $fetch);
    }

    /**
     *
     *
     * @param CustomFieldOption $body CustomFieldOption object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostCustomFieldsOptionByIdBadRequestException
     * @throws PostCustomFieldsOptionByIdUnauthorizedException
     * @throws PostCustomFieldsOptionByIdNotFoundException
     * @throws PostCustomFieldsOptionByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postCustomFieldsOptionById(CustomFieldOption $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostCustomFieldsOptionById($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param CustomFieldOption $body CustomFieldOption object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutCustomFieldsOptionByIdBadRequestException
     * @throws PutCustomFieldsOptionByIdUnauthorizedException
     * @throws PutCustomFieldsOptionByIdNotFoundException
     * @throws PutCustomFieldsOptionByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putCustomFieldsOptionById(string $id, CustomFieldOption $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutCustomFieldsOptionById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCustomFieldsTypeUnauthorizedException
     * @throws GetCustomFieldsTypeNotFoundException
     * @throws GetCustomFieldsTypeInternalServerErrorException
     *
     * @return null|RestResultCustomFieldTypes|ResponseInterface
     */
    public function getCustomFieldsType(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCustomFieldsType($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetCustomFieldsTypeByIdUnauthorizedException
     * @throws GetCustomFieldsTypeByIdNotFoundException
     * @throws GetCustomFieldsTypeByIdInternalServerErrorException
     *
     * @return null|RestResultCustomFieldType|ResponseInterface
     */
    public function getCustomFieldsTypeById(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetCustomFieldsTypeById($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetDocumentsDocumentUnauthorizedException
     * @throws GetDocumentsDocumentNotFoundException
     * @throws GetDocumentsDocumentInternalServerErrorException
     *
     * @return null|RestResultDocuments|ResponseInterface
     */
    public function getDocumentsDocument(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetDocumentsDocument($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostDocument $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostDocumentsDocumentBadRequestException
     * @throws PostDocumentsDocumentUnauthorizedException
     * @throws PostDocumentsDocumentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postDocumentsDocument(PostDocument $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostDocumentsDocument($body), $fetch);
    }

    /**
     *
     *
     * @param PutDocument $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutDocumentsDocumentBadRequestException
     * @throws PutDocumentsDocumentUnauthorizedException
     * @throws PutDocumentsDocumentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putDocumentsDocument(PutDocument $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutDocumentsDocument($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteDocumentsDocumentByIdUnauthorizedException
     * @throws DeleteDocumentsDocumentByIdNotFoundException
     * @throws DeleteDocumentsDocumentByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteDocumentsDocumentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteDocumentsDocumentById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetDocumentsDocumentByIdUnauthorizedException
     * @throws GetDocumentsDocumentByIdNotFoundException
     * @throws GetDocumentsDocumentByIdUnprocessableEntityException
     * @throws GetDocumentsDocumentByIdInternalServerErrorException
     *
     * @return null|RestResultDocument|ResponseInterface
     */
    public function getDocumentsDocumentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetDocumentsDocumentById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetDocumentsDocumenttypeUnauthorizedException
     * @throws GetDocumentsDocumenttypeNotFoundException
     * @throws GetDocumentsDocumenttypeInternalServerErrorException
     *
     * @return null|RestResultDocumentTypes|ResponseInterface
     */
    public function getDocumentsDocumenttype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetDocumentsDocumenttype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetDocumentsDocumenttypeByIdUnauthorizedException
     * @throws GetDocumentsDocumenttypeByIdNotFoundException
     * @throws GetDocumentsDocumenttypeByIdUnprocessableEntityException
     * @throws GetDocumentsDocumenttypeByIdInternalServerErrorException
     *
     * @return null|RestResultDocumentType|ResponseInterface
     */
    public function getDocumentsDocumenttypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetDocumentsDocumenttypeById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetDocumentsDownloadByIdUnauthorizedException
     * @throws GetDocumentsDownloadByIdNotFoundException
     * @throws GetDocumentsDownloadByIdUnprocessableEntityException
     * @throws GetDocumentsDownloadByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function getDocumentsDownloadById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetDocumentsDownloadById($id), $fetch);
    }

    /**
     *
     *
     * @param PostAbsence $body absence object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHoursAbsenceBadRequestException
     * @throws PostHoursAbsenceUnauthorizedException
     * @throws PostHoursAbsenceInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHoursAbsence(PostAbsence $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHoursAbsence($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostAbsence $body Absence object containing data that with the new values
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutHoursAbsenceByIdBadRequestException
     * @throws PutHoursAbsenceByIdUnauthorizedException
     * @throws PutHoursAbsenceByIdNotFoundException
     * @throws PutHoursAbsenceByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putHoursAbsenceById(string $id, PostAbsence $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutHoursAbsenceById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursApprovalUnauthorizedException
     * @throws GetHoursApprovalNotFoundException
     * @throws GetHoursApprovalInternalServerErrorException
     *
     * @return null|RestResultApprovals|ResponseInterface
     */
    public function getHoursApproval(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursApproval($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostApproval $body Approval object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHoursApprovalUnauthorizedException
     * @throws PostHoursApprovalNotFoundException
     * @throws PostHoursApprovalInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHoursApproval(PostApproval $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHoursApproval($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteHoursApprovalByIdUnauthorizedException
     * @throws DeleteHoursApprovalByIdNotFoundException
     * @throws DeleteHoursApprovalByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteHoursApprovalById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteHoursApprovalById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursApprovalByIdUnauthorizedException
     * @throws GetHoursApprovalByIdNotFoundException
     * @throws GetHoursApprovalByIdUnprocessableEntityException
     * @throws GetHoursApprovalByIdInternalServerErrorException
     *
     * @return null|RestResultApproval|ResponseInterface
     */
    public function getHoursApprovalById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursApprovalById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostApproval $body Approval object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutHoursApprovalByIdBadRequestException
     * @throws PutHoursApprovalByIdUnauthorizedException
     * @throws PutHoursApprovalByIdNotFoundException
     * @throws PutHoursApprovalByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putHoursApprovalById(string $id, PostApproval $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutHoursApprovalById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursApprovalstatusUnauthorizedException
     * @throws GetHoursApprovalstatusNotFoundException
     * @throws GetHoursApprovalstatusInternalServerErrorException
     *
     * @return null|RestResultApprovalStatusList|ResponseInterface
     */
    public function getHoursApprovalstatus(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursApprovalstatus($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursApprovalstatusByIdUnauthorizedException
     * @throws GetHoursApprovalstatusByIdNotFoundException
     * @throws GetHoursApprovalstatusByIdUnprocessableEntityException
     * @throws GetHoursApprovalstatusByIdInternalServerErrorException
     *
     * @return null|RestResultApprovalStatus|ResponseInterface
     */
    public function getHoursApprovalstatusById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursApprovalstatusById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursEmployeeexpenseUnauthorizedException
     * @throws GetHoursEmployeeexpenseNotFoundException
     * @throws GetHoursEmployeeexpenseInternalServerErrorException
     *
     * @return null|RestResultEmployeeExpenseList|ResponseInterface
     */
    public function getHoursEmployeeexpense(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursEmployeeexpense($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursEmployeeexpenseByIdUnauthorizedException
     * @throws GetHoursEmployeeexpenseByIdNotFoundException
     * @throws GetHoursEmployeeexpenseByIdUnprocessableEntityException
     * @throws GetHoursEmployeeexpenseByIdInternalServerErrorException
     *
     * @return null|RestResultEmployeeExpense|ResponseInterface
     */
    public function getHoursEmployeeexpenseById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursEmployeeexpenseById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursHourUnauthorizedException
     * @throws GetHoursHourNotFoundException
     * @throws GetHoursHourInternalServerErrorException
     *
     * @return null|RestResultHours|ResponseInterface
     */
    public function getHoursHour(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursHour($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostHours $body Hours object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHoursHourUnauthorizedException
     * @throws PostHoursHourNotFoundException
     * @throws PostHoursHourInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHoursHour(PostHours $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHoursHour($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteHoursHourByIdUnauthorizedException
     * @throws DeleteHoursHourByIdNotFoundException
     * @throws DeleteHoursHourByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteHoursHourById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteHoursHourById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursHourByIdUnauthorizedException
     * @throws GetHoursHourByIdNotFoundException
     * @throws GetHoursHourByIdUnprocessableEntityException
     * @throws GetHoursHourByIdInternalServerErrorException
     *
     * @return null|RestResultHour|ResponseInterface
     */
    public function getHoursHourById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursHourById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostHours $body Hours object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutHoursHourByIdBadRequestException
     * @throws PutHoursHourByIdUnauthorizedException
     * @throws PutHoursHourByIdNotFoundException
     * @throws PutHoursHourByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putHoursHourById(string $id, PostHours $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutHoursHourById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursHourstypeUnauthorizedException
     * @throws GetHoursHourstypeNotFoundException
     * @throws GetHoursHourstypeInternalServerErrorException
     *
     * @return null|RestResultHourTypes|ResponseInterface
     */
    public function getHoursHourstype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursHourstype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostHoursType $body Hour type object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHoursHourstypeUnauthorizedException
     * @throws PostHoursHourstypeNotFoundException
     * @throws PostHoursHourstypeInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHoursHourstype(PostHoursType $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHoursHourstype($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursHourstypeByIdUnauthorizedException
     * @throws GetHoursHourstypeByIdNotFoundException
     * @throws GetHoursHourstypeByIdUnprocessableEntityException
     * @throws GetHoursHourstypeByIdInternalServerErrorException
     *
     * @return null|RestResultHourType|ResponseInterface
     */
    public function getHoursHourstypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursHourstypeById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostHoursType $body Hours type object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutHoursHourstypeByIdBadRequestException
     * @throws PutHoursHourstypeByIdUnauthorizedException
     * @throws PutHoursHourstypeByIdNotFoundException
     * @throws PutHoursHourstypeByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putHoursHourstypeById(string $id, PostHoursType $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutHoursHourstypeById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param PostLeave $body leave object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHoursLeaveBadRequestException
     * @throws PostHoursLeaveUnauthorizedException
     * @throws PostHoursLeaveInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHoursLeave(PostLeave $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHoursLeave($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostLeave $body Leave object containing data that with the new values
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutHoursLeaveByIdBadRequestException
     * @throws PutHoursLeaveByIdUnauthorizedException
     * @throws PutHoursLeaveByIdNotFoundException
     * @throws PutHoursLeaveByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putHoursLeaveById(string $id, PostLeave $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutHoursLeaveById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var string $q[start_date]
     *     @var string $q[end_date]
     *     @var string $q[employee_id]
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursSubmissionUnauthorizedException
     * @throws GetHoursSubmissionNotFoundException
     * @throws GetHoursSubmissionInternalServerErrorException
     *
     * @return null|RestResultHoursSubmissions|ResponseInterface
     */
    public function getHoursSubmission(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursSubmission($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostSubmission $body Description of hours that need to be submitted.
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHoursSubmissionUnauthorizedException
     * @throws PostHoursSubmissionNotFoundException
     * @throws PostHoursSubmissionInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHoursSubmission(PostSubmission $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHoursSubmission($body), $fetch);
    }

    /**
     *
     *
     * @param Submit $body Data that is needed to submit hours
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHoursSubmitUnauthorizedException
     * @throws PostHoursSubmitNotFoundException
     * @throws PostHoursSubmitInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHoursSubmit(Submit $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHoursSubmit($body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var string $q[start_date] Y-m-d, must be a Monday
     *     @var string $q[end_date] Y-m-d, must be the Sunday after the Monday of the start_date
     *     @var string $q[employee_id]
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursTimesheetrowBadRequestException
     * @throws GetHoursTimesheetrowUnauthorizedException
     * @throws GetHoursTimesheetrowInternalServerErrorException
     *
     * @return null|RestResultHoursTimesheetRows|ResponseInterface
     */
    public function getHoursTimesheetrow(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursTimesheetrow($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostTimesheetRow $body Description of timesheetrow that is submitted.
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHoursTimesheetrowBadRequestException
     * @throws PostHoursTimesheetrowUnauthorizedException
     * @throws PostHoursTimesheetrowInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHoursTimesheetrow(PostTimesheetRow $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHoursTimesheetrow($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteHoursTimesheetrowByIdBadRequestException
     * @throws DeleteHoursTimesheetrowByIdUnauthorizedException
     * @throws DeleteHoursTimesheetrowByIdNotFoundException
     * @throws DeleteHoursTimesheetrowByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteHoursTimesheetrowById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteHoursTimesheetrowById($id), $fetch);
    }

    /**
     *
     *
     * @param array $body List of external ids for timesheetrows that need to be ordered.
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutHoursTimesheetrowOrderBadRequestException
     * @throws PutHoursTimesheetrowOrderUnauthorizedException
     * @throws PutHoursTimesheetrowOrderNotFoundException
     * @throws PutHoursTimesheetrowOrderInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putHoursTimesheetrowOrder(array $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutHoursTimesheetrowOrder($body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var string $q[before_date]
     *     @var string $q[employee_id]
     *     @var string $q[type]
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHoursTimesheetrowMostrecentBadRequestException
     * @throws GetHoursTimesheetrowMostrecentUnauthorizedException
     * @throws GetHoursTimesheetrowMostrecentNotFoundException
     * @throws GetHoursTimesheetrowMostrecentInternalServerErrorException
     *
     * @return null|RestResultDateTimeRange|ResponseInterface
     */
    public function getHoursTimesheetrowMostrecent(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHoursTimesheetrowMostrecent($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmAbsenceUnauthorizedException
     * @throws GetHrmAbsenceNotFoundException
     * @throws GetHrmAbsenceInternalServerErrorException
     *
     * @return null|RestResultAbsenceMultiple|ResponseInterface
     */
    public function getHrmAbsence(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmAbsence($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostAbsence $body absence object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHrmAbsenceBadRequestException
     * @throws PostHrmAbsenceUnauthorizedException
     * @throws PostHrmAbsenceInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHrmAbsence(PostAbsence $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHrmAbsence($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteHrmAbsenceByIdUnauthorizedException
     * @throws DeleteHrmAbsenceByIdNotFoundException
     * @throws DeleteHrmAbsenceByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteHrmAbsenceById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteHrmAbsenceById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmAbsenceByIdUnauthorizedException
     * @throws GetHrmAbsenceByIdNotFoundException
     * @throws GetHrmAbsenceByIdInternalServerErrorException
     *
     * @return null|RestResultAbsence|ResponseInterface
     */
    public function getHrmAbsenceById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmAbsenceById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostAbsence $body Absence object containing data that with the new values
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutHrmAbsenceByIdBadRequestException
     * @throws PutHrmAbsenceByIdUnauthorizedException
     * @throws PutHrmAbsenceByIdNotFoundException
     * @throws PutHrmAbsenceByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putHrmAbsenceById(string $id, PostAbsence $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutHrmAbsenceById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmAbsencetypeUnauthorizedException
     * @throws GetHrmAbsencetypeNotFoundException
     * @throws GetHrmAbsencetypeInternalServerErrorException
     *
     * @return null|RestResultAbsenceTypes|ResponseInterface
     */
    public function getHrmAbsencetype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmAbsencetype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmAbsencetypeByIdUnauthorizedException
     * @throws GetHrmAbsencetypeByIdNotFoundException
     * @throws GetHrmAbsencetypeByIdUnprocessableEntityException
     * @throws GetHrmAbsencetypeByIdInternalServerErrorException
     *
     * @return null|RestResultAbsenceType|ResponseInterface
     */
    public function getHrmAbsencetypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmAbsencetypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmCivilstatusUnauthorizedException
     * @throws GetHrmCivilstatusNotFoundException
     * @throws GetHrmCivilstatusInternalServerErrorException
     *
     * @return null|RestResultCivilStatuses|ResponseInterface
     */
    public function getHrmCivilstatus(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmCivilstatus($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmCivilstatusByIdUnauthorizedException
     * @throws GetHrmCivilstatusByIdNotFoundException
     * @throws GetHrmCivilstatusByIdUnprocessableEntityException
     * @throws GetHrmCivilstatusByIdInternalServerErrorException
     *
     * @return null|RestResultCivilStatus|ResponseInterface
     */
    public function getHrmCivilstatusById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmCivilstatusById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmContractUnauthorizedException
     * @throws GetHrmContractNotFoundException
     * @throws GetHrmContractInternalServerErrorException
     *
     * @return null|RestResultContracts|ResponseInterface
     */
    public function getHrmContract(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmContract($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmContractByIdUnauthorizedException
     * @throws GetHrmContractByIdNotFoundException
     * @throws GetHrmContractByIdUnprocessableEntityException
     * @throws GetHrmContractByIdInternalServerErrorException
     *
     * @return null|RestResultContract|ResponseInterface
     */
    public function getHrmContractById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmContractById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmContracttypeUnauthorizedException
     * @throws GetHrmContracttypeNotFoundException
     * @throws GetHrmContracttypeInternalServerErrorException
     *
     * @return null|RestResultContractTypes|ResponseInterface
     */
    public function getHrmContracttype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmContracttype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmContracttypeByIdUnauthorizedException
     * @throws GetHrmContracttypeByIdNotFoundException
     * @throws GetHrmContracttypeByIdUnprocessableEntityException
     * @throws GetHrmContracttypeByIdInternalServerErrorException
     *
     * @return null|RestResultContractType|ResponseInterface
     */
    public function getHrmContracttypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmContracttypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmDocumentUnauthorizedException
     * @throws GetHrmDocumentNotFoundException
     * @throws GetHrmDocumentInternalServerErrorException
     *
     * @return null|RestResultDocuments|ResponseInterface
     */
    public function getHrmDocument(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmDocument($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostDocument $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHrmDocumentBadRequestException
     * @throws PostHrmDocumentUnauthorizedException
     * @throws PostHrmDocumentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHrmDocument(PostDocument $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHrmDocument($body), $fetch);
    }

    /**
     *
     *
     * @param PutDocument $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutHrmDocumentBadRequestException
     * @throws PutHrmDocumentUnauthorizedException
     * @throws PutHrmDocumentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putHrmDocument(PutDocument $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutHrmDocument($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteHrmDocumentByIdUnauthorizedException
     * @throws DeleteHrmDocumentByIdNotFoundException
     * @throws DeleteHrmDocumentByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteHrmDocumentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteHrmDocumentById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmDocumentByIdUnauthorizedException
     * @throws GetHrmDocumentByIdNotFoundException
     * @throws GetHrmDocumentByIdUnprocessableEntityException
     * @throws GetHrmDocumentByIdInternalServerErrorException
     *
     * @return null|RestResultDocument|ResponseInterface
     */
    public function getHrmDocumentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmDocumentById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmDocumenttypeUnauthorizedException
     * @throws GetHrmDocumenttypeNotFoundException
     * @throws GetHrmDocumenttypeInternalServerErrorException
     *
     * @return null|RestResultDocumentTypes|ResponseInterface
     */
    public function getHrmDocumenttype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmDocumenttype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmDocumenttypeByIdUnauthorizedException
     * @throws GetHrmDocumenttypeByIdNotFoundException
     * @throws GetHrmDocumenttypeByIdUnprocessableEntityException
     * @throws GetHrmDocumenttypeByIdInternalServerErrorException
     *
     * @return null|RestResultDocumentType|ResponseInterface
     */
    public function getHrmDocumenttypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmDocumenttypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmEmployeeUnauthorizedException
     * @throws GetHrmEmployeeNotFoundException
     * @throws GetHrmEmployeeInternalServerErrorException
     *
     * @return null|RestResultEmployees|ResponseInterface
     */
    public function getHrmEmployee(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmEmployee($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostEmployee $body Employee object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHrmEmployeeUnauthorizedException
     * @throws PostHrmEmployeeNotFoundException
     * @throws PostHrmEmployeeInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHrmEmployee(PostEmployee $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHrmEmployee($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmEmployeeByIdUnauthorizedException
     * @throws GetHrmEmployeeByIdNotFoundException
     * @throws GetHrmEmployeeByIdUnprocessableEntityException
     * @throws GetHrmEmployeeByIdInternalServerErrorException
     *
     * @return null|RestResultEmployee|ResponseInterface
     */
    public function getHrmEmployeeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmEmployeeById($id), $fetch);
    }

    /**
     *
     *
     * @param PutEmployee $body Employee object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutHrmEmployeeByIdUnauthorizedException
     * @throws PutHrmEmployeeByIdNotFoundException
     * @throws PutHrmEmployeeByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putHrmEmployeeById(PutEmployee $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutHrmEmployeeById($body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmEmployeecustomfieldgroupUnauthorizedException
     * @throws GetHrmEmployeecustomfieldgroupNotFoundException
     * @throws GetHrmEmployeecustomfieldgroupInternalServerErrorException
     *
     * @return null|RestResultCustomFieldGroups|ResponseInterface
     */
    public function getHrmEmployeecustomfieldgroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmEmployeecustomfieldgroup($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmEmployeecustomfieldgroupByIdUnauthorizedException
     * @throws GetHrmEmployeecustomfieldgroupByIdNotFoundException
     * @throws GetHrmEmployeecustomfieldgroupByIdUnprocessableEntityException
     * @throws GetHrmEmployeecustomfieldgroupByIdInternalServerErrorException
     *
     * @return null|RestResultCustomFieldGroup|ResponseInterface
     */
    public function getHrmEmployeecustomfieldgroupById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmEmployeecustomfieldgroupById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmEmployeecustomfieldUnauthorizedException
     * @throws GetHrmEmployeecustomfieldNotFoundException
     * @throws GetHrmEmployeecustomfieldInternalServerErrorException
     *
     * @return null|RestResultCustomFields|ResponseInterface
     */
    public function getHrmEmployeecustomfield(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmEmployeecustomfield($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmEmployeecustomfieldByIdUnauthorizedException
     * @throws GetHrmEmployeecustomfieldByIdNotFoundException
     * @throws GetHrmEmployeecustomfieldByIdUnprocessableEntityException
     * @throws GetHrmEmployeecustomfieldByIdInternalServerErrorException
     *
     * @return null|RestResultCustomField|ResponseInterface
     */
    public function getHrmEmployeecustomfieldById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmEmployeecustomfieldById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmEmployeetypeUnauthorizedException
     * @throws GetHrmEmployeetypeNotFoundException
     * @throws GetHrmEmployeetypeInternalServerErrorException
     *
     * @return null|RestResultEmployeeTypes|ResponseInterface
     */
    public function getHrmEmployeetype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmEmployeetype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmEmployeetypeByIdUnauthorizedException
     * @throws GetHrmEmployeetypeByIdNotFoundException
     * @throws GetHrmEmployeetypeByIdUnprocessableEntityException
     * @throws GetHrmEmployeetypeByIdInternalServerErrorException
     *
     * @return null|RestResultEmployeeType|ResponseInterface
     */
    public function getHrmEmployeetypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmEmployeetypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmEmploymenttypeUnauthorizedException
     * @throws GetHrmEmploymenttypeNotFoundException
     * @throws GetHrmEmploymenttypeInternalServerErrorException
     *
     * @return null|RestResultEmploymentTypes|ResponseInterface
     */
    public function getHrmEmploymenttype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmEmploymenttype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmEmploymenttypeByIdUnauthorizedException
     * @throws GetHrmEmploymenttypeByIdNotFoundException
     * @throws GetHrmEmploymenttypeByIdUnprocessableEntityException
     * @throws GetHrmEmploymenttypeByIdInternalServerErrorException
     *
     * @return null|RestResultEmploymentType|ResponseInterface
     */
    public function getHrmEmploymenttypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmEmploymenttypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmLeaveUnauthorizedException
     * @throws GetHrmLeaveNotFoundException
     * @throws GetHrmLeaveInternalServerErrorException
     *
     * @return null|RestResultLeaveMultiple|ResponseInterface
     */
    public function getHrmLeave(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmLeave($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostLeave $body Leave object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHrmLeaveBadRequestException
     * @throws PostHrmLeaveUnauthorizedException
     * @throws PostHrmLeaveInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHrmLeave(PostLeave $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHrmLeave($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmLeaveByIdUnauthorizedException
     * @throws GetHrmLeaveByIdNotFoundException
     * @throws GetHrmLeaveByIdInternalServerErrorException
     *
     * @return null|RestResultLeave|ResponseInterface
     */
    public function getHrmLeaveById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmLeaveById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostLeave $body Leave object containing data that with the new values
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutHrmLeaveByIdBadRequestException
     * @throws PutHrmLeaveByIdUnauthorizedException
     * @throws PutHrmLeaveByIdNotFoundException
     * @throws PutHrmLeaveByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putHrmLeaveById(string $id, PostLeave $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutHrmLeaveById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmLeavebalanceUnauthorizedException
     * @throws GetHrmLeavebalanceNotFoundException
     * @throws GetHrmLeavebalanceInternalServerErrorException
     *
     * @return null|RestResultLeaveBalances|ResponseInterface
     */
    public function getHrmLeavebalance(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmLeavebalance($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmLeavetypeUnauthorizedException
     * @throws GetHrmLeavetypeNotFoundException
     * @throws GetHrmLeavetypeInternalServerErrorException
     *
     * @return null|RestResultLeaveTypes|ResponseInterface
     */
    public function getHrmLeavetype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmLeavetype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmLeavetypeByIdUnauthorizedException
     * @throws GetHrmLeavetypeByIdNotFoundException
     * @throws GetHrmLeavetypeByIdUnprocessableEntityException
     * @throws GetHrmLeavetypeByIdInternalServerErrorException
     *
     * @return null|RestResultLeaveType|ResponseInterface
     */
    public function getHrmLeavetypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmLeavetypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmTeamUnauthorizedException
     * @throws GetHrmTeamNotFoundException
     * @throws GetHrmTeamInternalServerErrorException
     *
     * @return null|RestResultTeams|ResponseInterface
     */
    public function getHrmTeam(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmTeam($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmTeamByIdUnauthorizedException
     * @throws GetHrmTeamByIdNotFoundException
     * @throws GetHrmTeamByIdUnprocessableEntityException
     * @throws GetHrmTeamByIdInternalServerErrorException
     *
     * @return null|RestResultTeam|ResponseInterface
     */
    public function getHrmTeamById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmTeamById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetHrmTimetableUnauthorizedException
     * @throws GetHrmTimetableNotFoundException
     * @throws GetHrmTimetableInternalServerErrorException
     *
     * @return null|RestResultTimetables|ResponseInterface
     */
    public function getHrmTimetable(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetHrmTimetable($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostTimetable $body Timetable object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostHrmTimetableUnauthorizedException
     * @throws PostHrmTimetableNotFoundException
     * @throws PostHrmTimetableInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postHrmTimetable(PostTimetable $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostHrmTimetable($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteHrmTimetableByIdUnauthorizedException
     * @throws DeleteHrmTimetableByIdNotFoundException
     * @throws DeleteHrmTimetableByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteHrmTimetableById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteHrmTimetableById($id), $fetch);
    }

    /**
     *
     *
     * @param PutTimetable $body Timetable object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutHrmTimetableByIdUnauthorizedException
     * @throws PutHrmTimetableByIdNotFoundException
     * @throws PutHrmTimetableByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putHrmTimetableById(PutTimetable $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutHrmTimetableById($body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesDocumentUnauthorizedException
     * @throws GetInvoicesDocumentNotFoundException
     * @throws GetInvoicesDocumentInternalServerErrorException
     *
     * @return null|RestResultDocuments|ResponseInterface
     */
    public function getInvoicesDocument(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesDocument($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostDocument $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostInvoicesDocumentBadRequestException
     * @throws PostInvoicesDocumentUnauthorizedException
     * @throws PostInvoicesDocumentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postInvoicesDocument(PostDocument $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostInvoicesDocument($body), $fetch);
    }

    /**
     *
     *
     * @param PutDocument $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutInvoicesDocumentBadRequestException
     * @throws PutInvoicesDocumentUnauthorizedException
     * @throws PutInvoicesDocumentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putInvoicesDocument(PutDocument $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutInvoicesDocument($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteInvoicesDocumentByIdUnauthorizedException
     * @throws DeleteInvoicesDocumentByIdNotFoundException
     * @throws DeleteInvoicesDocumentByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteInvoicesDocumentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteInvoicesDocumentById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesDocumentByIdUnauthorizedException
     * @throws GetInvoicesDocumentByIdNotFoundException
     * @throws GetInvoicesDocumentByIdUnprocessableEntityException
     * @throws GetInvoicesDocumentByIdInternalServerErrorException
     *
     * @return null|RestResultDocument|ResponseInterface
     */
    public function getInvoicesDocumentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesDocumentById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesDocumenttypeUnauthorizedException
     * @throws GetInvoicesDocumenttypeNotFoundException
     * @throws GetInvoicesDocumenttypeInternalServerErrorException
     *
     * @return null|RestResultDocumentTypes|ResponseInterface
     */
    public function getInvoicesDocumenttype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesDocumenttype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesDocumenttypeByIdUnauthorizedException
     * @throws GetInvoicesDocumenttypeByIdNotFoundException
     * @throws GetInvoicesDocumenttypeByIdUnprocessableEntityException
     * @throws GetInvoicesDocumenttypeByIdInternalServerErrorException
     *
     * @return null|RestResultDocumentType|ResponseInterface
     */
    public function getInvoicesDocumenttypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesDocumenttypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesInvoiceUnauthorizedException
     * @throws GetInvoicesInvoiceNotFoundException
     * @throws GetInvoicesInvoiceInternalServerErrorException
     *
     * @return null|RestResultInvoices|ResponseInterface
     */
    public function getInvoicesInvoice(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesInvoice($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostInvoice $body Invoice object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostInvoicesInvoiceUnauthorizedException
     * @throws PostInvoicesInvoiceNotFoundException
     * @throws PostInvoicesInvoiceInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postInvoicesInvoice(PostInvoice $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostInvoicesInvoice($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteInvoicesInvoiceByIdUnauthorizedException
     * @throws DeleteInvoicesInvoiceByIdNotFoundException
     * @throws DeleteInvoicesInvoiceByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteInvoicesInvoiceById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteInvoicesInvoiceById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesInvoiceByIdUnauthorizedException
     * @throws GetInvoicesInvoiceByIdNotFoundException
     * @throws GetInvoicesInvoiceByIdUnprocessableEntityException
     * @throws GetInvoicesInvoiceByIdInternalServerErrorException
     *
     * @return null|RestResultInvoice|ResponseInterface
     */
    public function getInvoicesInvoiceById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesInvoiceById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param Invoice $body template object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutInvoicesInvoiceByIdBadRequestException
     * @throws PutInvoicesInvoiceByIdUnauthorizedException
     * @throws PutInvoicesInvoiceByIdNotFoundException
     * @throws PutInvoicesInvoiceByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putInvoicesInvoiceById(string $id, Invoice $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutInvoicesInvoiceById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesInvoicestatusUnauthorizedException
     * @throws GetInvoicesInvoicestatusNotFoundException
     * @throws GetInvoicesInvoicestatusInternalServerErrorException
     *
     * @return null|RestResultInvoiceStatuses|ResponseInterface
     */
    public function getInvoicesInvoicestatus(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesInvoicestatus($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesInvoicestatusByIdUnauthorizedException
     * @throws GetInvoicesInvoicestatusByIdNotFoundException
     * @throws GetInvoicesInvoicestatusByIdUnprocessableEntityException
     * @throws GetInvoicesInvoicestatusByIdInternalServerErrorException
     *
     * @return null|RestResultInvoiceStatus|ResponseInterface
     */
    public function getInvoicesInvoicestatusById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesInvoicestatusById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesPaymentUnauthorizedException
     * @throws GetInvoicesPaymentNotFoundException
     * @throws GetInvoicesPaymentInternalServerErrorException
     *
     * @return null|RestResultPayments|ResponseInterface
     */
    public function getInvoicesPayment(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesPayment($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param Payment $body Payment object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostInvoicesPaymentUnauthorizedException
     * @throws PostInvoicesPaymentNotFoundException
     * @throws PostInvoicesPaymentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postInvoicesPayment(Payment $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostInvoicesPayment($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesPaymentByIdUnauthorizedException
     * @throws GetInvoicesPaymentByIdNotFoundException
     * @throws GetInvoicesPaymentByIdUnprocessableEntityException
     * @throws GetInvoicesPaymentByIdInternalServerErrorException
     *
     * @return null|RestResultPayment|ResponseInterface
     */
    public function getInvoicesPaymentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesPaymentById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param Payment $body Payment object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutInvoicesPaymentByIdBadRequestException
     * @throws PutInvoicesPaymentByIdUnauthorizedException
     * @throws PutInvoicesPaymentByIdNotFoundException
     * @throws PutInvoicesPaymentByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putInvoicesPaymentById(string $id, Payment $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutInvoicesPaymentById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesPaymenttermUnauthorizedException
     * @throws GetInvoicesPaymenttermNotFoundException
     * @throws GetInvoicesPaymenttermInternalServerErrorException
     *
     * @return null|RestResultPaymentTerms|ResponseInterface
     */
    public function getInvoicesPaymentterm(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesPaymentterm($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesPaymenttermByIdUnauthorizedException
     * @throws GetInvoicesPaymenttermByIdNotFoundException
     * @throws GetInvoicesPaymenttermByIdUnprocessableEntityException
     * @throws GetInvoicesPaymenttermByIdInternalServerErrorException
     *
     * @return null|RestResultPaymentTerm|ResponseInterface
     */
    public function getInvoicesPaymenttermById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesPaymenttermById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesPropositionUnauthorizedException
     * @throws GetInvoicesPropositionNotFoundException
     * @throws GetInvoicesPropositionInternalServerErrorException
     *
     * @return null|RestResultPropositions|ResponseInterface
     */
    public function getInvoicesProposition(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesProposition($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesRemindersetUnauthorizedException
     * @throws GetInvoicesRemindersetNotFoundException
     * @throws GetInvoicesRemindersetInternalServerErrorException
     *
     * @return null|RestResultReminderSets|ResponseInterface
     */
    public function getInvoicesReminderset(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesReminderset($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesRemindersetByIdUnauthorizedException
     * @throws GetInvoicesRemindersetByIdNotFoundException
     * @throws GetInvoicesRemindersetByIdUnprocessableEntityException
     * @throws GetInvoicesRemindersetByIdInternalServerErrorException
     *
     * @return null|RestResultReminderSet|ResponseInterface
     */
    public function getInvoicesRemindersetById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesRemindersetById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesRemindertemplateUnauthorizedException
     * @throws GetInvoicesRemindertemplateNotFoundException
     * @throws GetInvoicesRemindertemplateInternalServerErrorException
     *
     * @return null|RestResultReminderTemplates|ResponseInterface
     */
    public function getInvoicesRemindertemplate(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesRemindertemplate($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesRemindertemplateByIdUnauthorizedException
     * @throws GetInvoicesRemindertemplateByIdNotFoundException
     * @throws GetInvoicesRemindertemplateByIdUnprocessableEntityException
     * @throws GetInvoicesRemindertemplateByIdInternalServerErrorException
     *
     * @return null|RestResultReminderTemplate|ResponseInterface
     */
    public function getInvoicesRemindertemplateById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesRemindertemplateById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesVatclassUnauthorizedException
     * @throws GetInvoicesVatclassNotFoundException
     * @throws GetInvoicesVatclassInternalServerErrorException
     *
     * @return null|RestResultVatClasses|ResponseInterface
     */
    public function getInvoicesVatclass(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesVatclass($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetInvoicesVatclassByIdUnauthorizedException
     * @throws GetInvoicesVatclassByIdNotFoundException
     * @throws GetInvoicesVatclassByIdUnprocessableEntityException
     * @throws GetInvoicesVatclassByIdInternalServerErrorException
     *
     * @return null|RestResultVatClass|ResponseInterface
     */
    public function getInvoicesVatclassById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetInvoicesVatclassById($id), $fetch);
    }

    /**
     *
     *
     * @param PostMergerCompare $body Compare objects containing the source id and target id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostMergerCompareorganizationBadRequestException
     * @throws PostMergerCompareorganizationUnauthorizedException
     * @throws PostMergerCompareorganizationInternalServerErrorException
     *
     * @return null|RestResultMergerCompare|ResponseInterface
     */
    public function postMergerCompareorganization(PostMergerCompare $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostMergerCompareorganization($body), $fetch);
    }

    /**
     *
     *
     * @param PostMergerCompare $body Compare objects containing the source id and target id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostMergerComparepersonBadRequestException
     * @throws PostMergerComparepersonUnauthorizedException
     * @throws PostMergerComparepersonInternalServerErrorException
     *
     * @return null|RestResultMergerCompare|ResponseInterface
     */
    public function postMergerCompareperson(PostMergerCompare $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostMergerCompareperson($body), $fetch);
    }

    /**
     *
     *
     * @param PostMerger $body Merge object containing the source id and target id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostCrmMergeorganizationBadRequestException
     * @throws PostCrmMergeorganizationUnauthorizedException
     * @throws PostCrmMergeorganizationInternalServerErrorException
     *
     * @return null|ResultMergerMerge|ResponseInterface
     */
    public function postCrmMergeorganization(PostMerger $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostCrmMergeorganization($body), $fetch);
    }

    /**
     *
     *
     * @param PostMerger $body Merge object containing the source id and target id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostCrmMergepersonBadRequestException
     * @throws PostCrmMergepersonUnauthorizedException
     * @throws PostCrmMergepersonInternalServerErrorException
     *
     * @return null|ResultMergerMerge|ResponseInterface
     */
    public function postCrmMergeperson(PostMerger $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostCrmMergeperson($body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetMileageMileageUnauthorizedException
     * @throws GetMileageMileageNotFoundException
     * @throws GetMileageMileageInternalServerErrorException
     *
     * @return null|RestResultMileageList|ResponseInterface
     */
    public function getMileageMileage(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetMileageMileage($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostMileage $body Mileage object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostMileageMileageUnauthorizedException
     * @throws PostMileageMileageNotFoundException
     * @throws PostMileageMileageInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postMileageMileage(PostMileage $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostMileageMileage($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteMileageMileageByIdUnauthorizedException
     * @throws DeleteMileageMileageByIdNotFoundException
     * @throws DeleteMileageMileageByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteMileageMileageById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteMileageMileageById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetMileageMileageByIdUnauthorizedException
     * @throws GetMileageMileageByIdNotFoundException
     * @throws GetMileageMileageByIdUnprocessableEntityException
     * @throws GetMileageMileageByIdInternalServerErrorException
     *
     * @return null|RestResultMileage|ResponseInterface
     */
    public function getMileageMileageById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetMileageMileageById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PutMileage $body Mileage object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutMileageMileageByIdBadRequestException
     * @throws PutMileageMileageByIdUnauthorizedException
     * @throws PutMileageMileageByIdNotFoundException
     * @throws PutMileageMileageByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putMileageMileageById(string $id, PutMileage $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutMileageMileageById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsAssignmentUnauthorizedException
     * @throws GetProjectsAssignmentNotFoundException
     * @throws GetProjectsAssignmentInternalServerErrorException
     *
     * @return null|RestResultProjectAssignments|ResponseInterface
     */
    public function getProjectsAssignment(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsAssignment($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostAssignment $body Project assignment POST body
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostProjectsAssignmentBadRequestException
     * @throws PostProjectsAssignmentUnauthorizedException
     * @throws PostProjectsAssignmentNotFoundException
     * @throws PostProjectsAssignmentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postProjectsAssignment(PostAssignment $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostProjectsAssignment($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsAssignmentByIdUnauthorizedException
     * @throws GetProjectsAssignmentByIdNotFoundException
     * @throws GetProjectsAssignmentByIdInternalServerErrorException
     *
     * @return null|RestResultProjectAssignment|ResponseInterface
     */
    public function getProjectsAssignmentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsAssignmentById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PutAssignment $body Project assignment PUT body
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutProjectsAssignmentByIdBadRequestException
     * @throws PutProjectsAssignmentByIdUnauthorizedException
     * @throws PutProjectsAssignmentByIdNotFoundException
     * @throws PutProjectsAssignmentByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putProjectsAssignmentById(string $id, PutAssignment $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutProjectsAssignmentById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultProjectAssignmentbudget|ResponseInterface
     *@var string $q[range_start]
     *     @var string $q[employee_id]
     *     @var string $q[assignment_id]
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @throws GetProjectsAssignmentbudgetUnauthorizedException
     * @throws GetProjectsAssignmentbudgetPaymentRequiredException
     * @throws GetProjectsAssignmentbudgetNotFoundException
     * @throws GetProjectsAssignmentbudgetInternalServerErrorException
     *
     */
    public function getProjectsAssignmentbudget(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsAssignmentbudget($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultProjectAssignmentStatuses|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetProjectsAssignmentstatusUnauthorizedException
     * @throws GetProjectsAssignmentstatusNotFoundException
     * @throws GetProjectsAssignmentstatusInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getProjectsAssignmentstatus(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsAssignmentstatus($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param AssignmentStatus $body Project assignment POST body
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostProjectsAssignmentstatusBadRequestException
     * @throws PostProjectsAssignmentstatusUnauthorizedException
     * @throws PostProjectsAssignmentstatusNotFoundException
     * @throws PostProjectsAssignmentstatusInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postProjectsAssignmentstatus(AssignmentStatus $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostProjectsAssignmentstatus($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsAssignmentstatusByIdUnauthorizedException
     * @throws GetProjectsAssignmentstatusByIdNotFoundException
     * @throws GetProjectsAssignmentstatusByIdInternalServerErrorException
     *
     * @return null|RestResultProjectAssignmentStatus|ResponseInterface
     */
    public function getProjectsAssignmentstatusById(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsAssignmentstatusById($id, $queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param AssignmentStatus $body Project assignment POST body
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutProjectsAssignmentstatusByIdBadRequestException
     * @throws PutProjectsAssignmentstatusByIdUnauthorizedException
     * @throws PutProjectsAssignmentstatusByIdNotFoundException
     * @throws PutProjectsAssignmentstatusByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putProjectsAssignmentstatusById(string $id, AssignmentStatus $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutProjectsAssignmentstatusById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsDocumentUnauthorizedException
     * @throws GetProjectsDocumentNotFoundException
     * @throws GetProjectsDocumentInternalServerErrorException
     *
     * @return null|RestResultDocuments|ResponseInterface
     */
    public function getProjectsDocument(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsDocument($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostDocument $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostProjectsDocumentBadRequestException
     * @throws PostProjectsDocumentUnauthorizedException
     * @throws PostProjectsDocumentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postProjectsDocument(PostDocument $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostProjectsDocument($body), $fetch);
    }

    /**
     *
     *
     * @param PutDocument $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutProjectsDocumentBadRequestException
     * @throws PutProjectsDocumentUnauthorizedException
     * @throws PutProjectsDocumentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putProjectsDocument(PutDocument $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutProjectsDocument($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteProjectsDocumentByIdUnauthorizedException
     * @throws DeleteProjectsDocumentByIdNotFoundException
     * @throws DeleteProjectsDocumentByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteProjectsDocumentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteProjectsDocumentById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsDocumentByIdUnauthorizedException
     * @throws GetProjectsDocumentByIdNotFoundException
     * @throws GetProjectsDocumentByIdUnprocessableEntityException
     * @throws GetProjectsDocumentByIdInternalServerErrorException
     *
     * @return null|RestResultDocument|ResponseInterface
     */
    public function getProjectsDocumentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsDocumentById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsDocumenttypeUnauthorizedException
     * @throws GetProjectsDocumenttypeNotFoundException
     * @throws GetProjectsDocumenttypeInternalServerErrorException
     *
     * @return null|RestResultDocumentTypes|ResponseInterface
     */
    public function getProjectsDocumenttype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsDocumenttype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsDocumenttypeByIdUnauthorizedException
     * @throws GetProjectsDocumenttypeByIdNotFoundException
     * @throws GetProjectsDocumenttypeByIdUnprocessableEntityException
     * @throws GetProjectsDocumenttypeByIdInternalServerErrorException
     *
     * @return null|RestResultDocumentType|ResponseInterface
     */
    public function getProjectsDocumenttypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsDocumenttypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsProjectUnauthorizedException
     * @throws GetProjectsProjectNotFoundException
     * @throws GetProjectsProjectInternalServerErrorException
     *
     * @return null|RestResultProjects|ResponseInterface
     */
    public function getProjectsProject(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsProject($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostProject $body Project object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostProjectsProjectUnauthorizedException
     * @throws PostProjectsProjectNotFoundException
     * @throws PostProjectsProjectInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postProjectsProject(PostProject $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostProjectsProject($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteProjectsProjectByIdUnauthorizedException
     * @throws DeleteProjectsProjectByIdNotFoundException
     * @throws DeleteProjectsProjectByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteProjectsProjectById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteProjectsProjectById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsProjectByIdUnauthorizedException
     * @throws GetProjectsProjectByIdNotFoundException
     * @throws GetProjectsProjectByIdUnprocessableEntityException
     * @throws GetProjectsProjectByIdInternalServerErrorException
     *
     * @return null|RestResultProject|ResponseInterface
     */
    public function getProjectsProjectById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsProjectById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostProject $body project object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutProjectsProjectByIdBadRequestException
     * @throws PutProjectsProjectByIdUnauthorizedException
     * @throws PutProjectsProjectByIdNotFoundException
     * @throws PutProjectsProjectByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putProjectsProjectById(string $id, PostProject $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutProjectsProjectById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param array $queryParameters {
     *     @var string $by
     *     @var string $until_date Y-m-d
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsProjectByIdPlanningBudgetUnauthorizedException
     * @throws GetProjectsProjectByIdPlanningBudgetNotFoundException
     * @throws GetProjectsProjectByIdPlanningBudgetUnprocessableEntityException
     * @throws GetProjectsProjectByIdPlanningBudgetInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function getProjectsProjectByIdPlanningBudget(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsProjectByIdPlanningBudget($id, $queryParameters), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsProjectcustomfieldgroupUnauthorizedException
     * @throws GetProjectsProjectcustomfieldgroupNotFoundException
     * @throws GetProjectsProjectcustomfieldgroupInternalServerErrorException
     *
     * @return null|RestResultCustomFieldGroups|ResponseInterface
     */
    public function getProjectsProjectcustomfieldgroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsProjectcustomfieldgroup($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsProjectcustomfieldgroupByIdUnauthorizedException
     * @throws GetProjectsProjectcustomfieldgroupByIdNotFoundException
     * @throws GetProjectsProjectcustomfieldgroupByIdUnprocessableEntityException
     * @throws GetProjectsProjectcustomfieldgroupByIdInternalServerErrorException
     *
     * @return null|RestResultCustomFieldGroup|ResponseInterface
     */
    public function getProjectsProjectcustomfieldgroupById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsProjectcustomfieldgroupById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsProjectcustomfieldUnauthorizedException
     * @throws GetProjectsProjectcustomfieldNotFoundException
     * @throws GetProjectsProjectcustomfieldInternalServerErrorException
     *
     * @return null|RestResultCustomFields|ResponseInterface
     */
    public function getProjectsProjectcustomfield(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsProjectcustomfield($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsProjectcustomfieldByIdUnauthorizedException
     * @throws GetProjectsProjectcustomfieldByIdNotFoundException
     * @throws GetProjectsProjectcustomfieldByIdUnprocessableEntityException
     * @throws GetProjectsProjectcustomfieldByIdInternalServerErrorException
     *
     * @return null|RestResultCustomField|ResponseInterface
     */
    public function getProjectsProjectcustomfieldById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsProjectcustomfieldById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsProjectfilterUnauthorizedException
     * @throws GetProjectsProjectfilterNotFoundException
     * @throws GetProjectsProjectfilterInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function getProjectsProjectfilter(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsProjectfilter($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsProjectfilterByIdUnauthorizedException
     * @throws GetProjectsProjectfilterByIdNotFoundException
     * @throws GetProjectsProjectfilterByIdUnprocessableEntityException
     * @throws GetProjectsProjectfilterByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function getProjectsProjectfilterById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsProjectfilterById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsProjectstatusUnauthorizedException
     * @throws GetProjectsProjectstatusNotFoundException
     * @throws GetProjectsProjectstatusInternalServerErrorException
     *
     * @return null|RestResultProjectStatusses|ResponseInterface
     */
    public function getProjectsProjectstatus(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsProjectstatus($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsProjectstatusByIdUnauthorizedException
     * @throws GetProjectsProjectstatusByIdNotFoundException
     * @throws GetProjectsProjectstatusByIdUnprocessableEntityException
     * @throws GetProjectsProjectstatusByIdInternalServerErrorException
     *
     * @return null|RestResultProjectStatus|ResponseInterface
     */
    public function getProjectsProjectstatusById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsProjectstatusById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsPurchaseUnauthorizedException
     * @throws GetProjectsPurchaseNotFoundException
     * @throws GetProjectsPurchaseInternalServerErrorException
     *
     * @return null|RestResultPurchases|ResponseInterface
     */
    public function getProjectsPurchase(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsPurchase($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsPurchaseByIdUnauthorizedException
     * @throws GetProjectsPurchaseByIdNotFoundException
     * @throws GetProjectsPurchaseByIdInternalServerErrorException
     *
     * @return null|RestResultPurchase|ResponseInterface
     */
    public function getProjectsPurchaseById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsPurchaseById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsPurchasetypeUnauthorizedException
     * @throws GetProjectsPurchasetypeNotFoundException
     * @throws GetProjectsPurchasetypeInternalServerErrorException
     *
     * @return null|RestResultPurchaseTypes|ResponseInterface
     */
    public function getProjectsPurchasetype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsPurchasetype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsPurchasetypeByIdUnauthorizedException
     * @throws GetProjectsPurchasetypeByIdNotFoundException
     * @throws GetProjectsPurchasetypeByIdUnprocessableEntityException
     * @throws GetProjectsPurchasetypeByIdInternalServerErrorException
     *
     * @return null|RestResultPurchaseType|ResponseInterface
     */
    public function getProjectsPurchasetypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsPurchasetypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsReverseinvoiceUnauthorizedException
     * @throws GetProjectsReverseinvoiceNotFoundException
     * @throws GetProjectsReverseinvoiceInternalServerErrorException
     *
     * @return null|RestResultReverseInvoices|ResponseInterface
     */
    public function getProjectsReverseinvoice(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsReverseinvoice($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsReverseinvoiceByIdUnauthorizedException
     * @throws GetProjectsReverseinvoiceByIdNotFoundException
     * @throws GetProjectsReverseinvoiceByIdInternalServerErrorException
     *
     * @return null|RestResultReverseInvoice|ResponseInterface
     */
    public function getProjectsReverseinvoiceById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsReverseinvoiceById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $body Optional parameters to overwrite
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostProjectsServiceByIdDuplicateBadRequestException
     * @throws PostProjectsServiceByIdDuplicateUnauthorizedException
     * @throws PostProjectsServiceByIdDuplicateNotFoundException
     * @throws PostProjectsServiceByIdDuplicateInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postProjectsServiceByIdDuplicate(string $id, string $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostProjectsServiceByIdDuplicate($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsServiceUnauthorizedException
     * @throws GetProjectsServiceNotFoundException
     * @throws GetProjectsServiceInternalServerErrorException
     *
     * @return null|RestResultProjectServices|ResponseInterface
     */
    public function getProjectsService(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsService($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostProjectService $body template object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostProjectsServiceUnauthorizedException
     * @throws PostProjectsServiceNotFoundException
     * @throws PostProjectsServiceInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postProjectsService(PostProjectService $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostProjectsService($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteProjectsServiceByIdUnauthorizedException
     * @throws DeleteProjectsServiceByIdNotFoundException
     * @throws DeleteProjectsServiceByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteProjectsServiceById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteProjectsServiceById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsServiceByIdUnauthorizedException
     * @throws GetProjectsServiceByIdNotFoundException
     * @throws GetProjectsServiceByIdUnprocessableEntityException
     * @throws GetProjectsServiceByIdInternalServerErrorException
     *
     * @return null|RestResultProjectService|ResponseInterface
     */
    public function getProjectsServiceById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsServiceById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PutProjectService $body Service object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutProjectsServiceByIdBadRequestException
     * @throws PutProjectsServiceByIdUnauthorizedException
     * @throws PutProjectsServiceByIdNotFoundException
     * @throws PutProjectsServiceByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putProjectsServiceById(string $id, PutProjectService $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutProjectsServiceById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param array $queryParameters {
     *     @var string $by
     *     @var string $until_date Y-m-d
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetProjectsServiceByIdPlanningBudgetUnauthorizedException
     * @throws GetProjectsServiceByIdPlanningBudgetNotFoundException
     * @throws GetProjectsServiceByIdPlanningBudgetUnprocessableEntityException
     * @throws GetProjectsServiceByIdPlanningBudgetInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function getProjectsServiceByIdPlanningBudget(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetProjectsServiceByIdPlanningBudget($id, $queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesConverttoprojectByIdUnauthorizedException
     * @throws GetSalesConverttoprojectByIdNotFoundException
     * @throws GetSalesConverttoprojectByIdUnprocessableEntityException
     * @throws GetSalesConverttoprojectByIdInternalServerErrorException
     *
     * @return null|RestResultSale|ResponseInterface
     */
    public function getSalesConverttoprojectById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesConverttoprojectById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesDocumentUnauthorizedException
     * @throws GetSalesDocumentNotFoundException
     * @throws GetSalesDocumentInternalServerErrorException
     *
     * @return null|RestResultDocuments|ResponseInterface
     */
    public function getSalesDocument(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesDocument($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostDocument $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostSalesDocumentBadRequestException
     * @throws PostSalesDocumentUnauthorizedException
     * @throws PostSalesDocumentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postSalesDocument(PostDocument $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostSalesDocument($body), $fetch);
    }

    /**
     *
     *
     * @param PutDocument $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutSalesDocumentBadRequestException
     * @throws PutSalesDocumentUnauthorizedException
     * @throws PutSalesDocumentInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putSalesDocument(PutDocument $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutSalesDocument($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteSalesDocumentByIdUnauthorizedException
     * @throws DeleteSalesDocumentByIdNotFoundException
     * @throws DeleteSalesDocumentByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteSalesDocumentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteSalesDocumentById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesDocumentByIdUnauthorizedException
     * @throws GetSalesDocumentByIdNotFoundException
     * @throws GetSalesDocumentByIdUnprocessableEntityException
     * @throws GetSalesDocumentByIdInternalServerErrorException
     *
     * @return null|RestResultDocument|ResponseInterface
     */
    public function getSalesDocumentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesDocumentById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesDocumenttypeUnauthorizedException
     * @throws GetSalesDocumenttypeNotFoundException
     * @throws GetSalesDocumenttypeInternalServerErrorException
     *
     * @return null|RestResultDocumentTypes|ResponseInterface
     */
    public function getSalesDocumenttype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesDocumenttype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesDocumenttypeByIdUnauthorizedException
     * @throws GetSalesDocumenttypeByIdNotFoundException
     * @throws GetSalesDocumenttypeByIdUnprocessableEntityException
     * @throws GetSalesDocumenttypeByIdInternalServerErrorException
     *
     * @return null|RestResultDocumentType|ResponseInterface
     */
    public function getSalesDocumenttypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesDocumenttypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesQuoteUnauthorizedException
     * @throws GetSalesQuoteNotFoundException
     * @throws GetSalesQuoteInternalServerErrorException
     *
     * @return null|RestResultQuotes|ResponseInterface
     */
    public function getSalesQuote(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesQuote($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostQuote $body Quote template object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostSalesQuoteBadRequestException
     * @throws PostSalesQuoteUnauthorizedException
     * @throws PostSalesQuoteInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postSalesQuote(PostQuote $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostSalesQuote($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteSalesQuoteByIdUnauthorizedException
     * @throws DeleteSalesQuoteByIdNotFoundException
     * @throws DeleteSalesQuoteByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteSalesQuoteById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteSalesQuoteById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesQuoteByIdUnauthorizedException
     * @throws GetSalesQuoteByIdNotFoundException
     * @throws GetSalesQuoteByIdUnprocessableEntityException
     * @throws GetSalesQuoteByIdInternalServerErrorException
     *
     * @return null|RestResultQuote|ResponseInterface
     */
    public function getSalesQuoteById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesQuoteById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostQuote $body Quote template object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutSalesQuoteByIdBadRequestException
     * @throws PutSalesQuoteByIdUnauthorizedException
     * @throws PutSalesQuoteByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putSalesQuoteById(string $id, PostQuote $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutSalesQuoteById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PutQuoteEmail $body Document object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutSalesQuoteemailByIdBadRequestException
     * @throws PutSalesQuoteemailByIdUnauthorizedException
     * @throws PutSalesQuoteemailByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putSalesQuoteemailById(string $id, PutQuoteEmail $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutSalesQuoteemailById($id, $body), $fetch);
    }

    /**
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesQuotestatusUnauthorizedException
     * @throws GetSalesQuotestatusNotFoundException
     * @throws GetSalesQuotestatusUnprocessableEntityException
     * @throws GetSalesQuotestatusInternalServerErrorException
     *
     * @return null|RestResultQuoteStatuses|ResponseInterface
     */
    public function getSalesQuotestatus(string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesQuotestatus(), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesQuotestatusByIdUnauthorizedException
     * @throws GetSalesQuotestatusByIdNotFoundException
     * @throws GetSalesQuotestatusByIdUnprocessableEntityException
     * @throws GetSalesQuotestatusByIdInternalServerErrorException
     *
     * @return null|RestResultQuoteStatus|ResponseInterface
     */
    public function getSalesQuotestatusById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesQuotestatusById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesQuotetemplateUnauthorizedException
     * @throws GetSalesQuotetemplateNotFoundException
     * @throws GetSalesQuotetemplateInternalServerErrorException
     *
     * @return null|RestResultQuoteTemplates|ResponseInterface
     */
    public function getSalesQuotetemplate(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesQuotetemplate($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostQuoteTemplate $body Quote template object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostSalesQuotetemplateBadRequestException
     * @throws PostSalesQuotetemplateUnauthorizedException
     * @throws PostSalesQuotetemplateInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postSalesQuotetemplate(PostQuoteTemplate $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostSalesQuotetemplate($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteSalesQuotetemplateByIdUnauthorizedException
     * @throws DeleteSalesQuotetemplateByIdNotFoundException
     * @throws DeleteSalesQuotetemplateByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteSalesQuotetemplateById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteSalesQuotetemplateById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesQuotetemplateByIdUnauthorizedException
     * @throws GetSalesQuotetemplateByIdNotFoundException
     * @throws GetSalesQuotetemplateByIdUnprocessableEntityException
     * @throws GetSalesQuotetemplateByIdInternalServerErrorException
     *
     * @return null|RestResultQuoteTemplate|ResponseInterface
     */
    public function getSalesQuotetemplateById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesQuotetemplateById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostQuoteTemplate $body Quote template object containing data
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutSalesQuotetemplateByIdBadRequestException
     * @throws PutSalesQuotetemplateByIdUnauthorizedException
     * @throws PutSalesQuotetemplateByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putSalesQuotetemplateById(string $id, PostQuoteTemplate $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutSalesQuotetemplateById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesRevenuegroupUnauthorizedException
     * @throws GetSalesRevenuegroupNotFoundException
     * @throws GetSalesRevenuegroupInternalServerErrorException
     *
     * @return null|RestResultRevenueGroups|ResponseInterface
     */
    public function getSalesRevenuegroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesRevenuegroup($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesRevenuegroupByIdUnauthorizedException
     * @throws GetSalesRevenuegroupByIdNotFoundException
     * @throws GetSalesRevenuegroupByIdUnprocessableEntityException
     * @throws GetSalesRevenuegroupByIdInternalServerErrorException
     *
     * @return null|RestResultRevenueGroup|ResponseInterface
     */
    public function getSalesRevenuegroupById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesRevenuegroupById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSaleUnauthorizedException
     * @throws GetSalesSaleNotFoundException
     * @throws GetSalesSaleInternalServerErrorException
     *
     * @return null|RestResultSales|ResponseInterface
     */
    public function getSalesSale(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSale($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostSales $body Sales object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostSalesSaleUnauthorizedException
     * @throws PostSalesSaleNotFoundException
     * @throws PostSalesSaleInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postSalesSale(PostSales $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostSalesSale($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSaleByIdUnauthorizedException
     * @throws GetSalesSaleByIdNotFoundException
     * @throws GetSalesSaleByIdUnprocessableEntityException
     * @throws GetSalesSaleByIdInternalServerErrorException
     *
     * @return null|RestResultSale|ResponseInterface
     */
    public function getSalesSaleById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSaleById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostSales $body project object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutSalesSaleByIdBadRequestException
     * @throws PutSalesSaleByIdUnauthorizedException
     * @throws PutSalesSaleByIdNotFoundException
     * @throws PutSalesSaleByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putSalesSaleById(string $id, PostSales $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutSalesSaleById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostDuplicateSales $body Optional parameters to overwrite
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostSalesSalesByIdDuplicateBadRequestException
     * @throws PostSalesSalesByIdDuplicateUnauthorizedException
     * @throws PostSalesSalesByIdDuplicateNotFoundException
     * @throws PostSalesSalesByIdDuplicateInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postSalesSalesByIdDuplicate(string $id, PostDuplicateSales $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostSalesSalesByIdDuplicate($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalescustomfieldgroupUnauthorizedException
     * @throws GetSalesSalescustomfieldgroupNotFoundException
     * @throws GetSalesSalescustomfieldgroupInternalServerErrorException
     *
     * @return null|RestResultCustomFieldGroups|ResponseInterface
     */
    public function getSalesSalescustomfieldgroup(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalescustomfieldgroup($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalescustomfieldgroupByIdUnauthorizedException
     * @throws GetSalesSalescustomfieldgroupByIdNotFoundException
     * @throws GetSalesSalescustomfieldgroupByIdUnprocessableEntityException
     * @throws GetSalesSalescustomfieldgroupByIdInternalServerErrorException
     *
     * @return null|RestResultCustomFieldGroup|ResponseInterface
     */
    public function getSalesSalescustomfieldgroupById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalescustomfieldgroupById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalescustomfieldUnauthorizedException
     * @throws GetSalesSalescustomfieldNotFoundException
     * @throws GetSalesSalescustomfieldInternalServerErrorException
     *
     * @return null|RestResultCustomFields|ResponseInterface
     */
    public function getSalesSalescustomfield(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalescustomfield($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalescustomfieldByIdUnauthorizedException
     * @throws GetSalesSalescustomfieldByIdNotFoundException
     * @throws GetSalesSalescustomfieldByIdUnprocessableEntityException
     * @throws GetSalesSalescustomfieldByIdInternalServerErrorException
     *
     * @return null|RestResultCustomField|ResponseInterface
     */
    public function getSalesSalescustomfieldById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalescustomfieldById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalesfilterUnauthorizedException
     * @throws GetSalesSalesfilterNotFoundException
     * @throws GetSalesSalesfilterInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function getSalesSalesfilter(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalesfilter($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalesfilterByIdUnauthorizedException
     * @throws GetSalesSalesfilterByIdNotFoundException
     * @throws GetSalesSalesfilterByIdUnprocessableEntityException
     * @throws GetSalesSalesfilterByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function getSalesSalesfilterById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalesfilterById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalesprogressUnauthorizedException
     * @throws GetSalesSalesprogressNotFoundException
     * @throws GetSalesSalesprogressInternalServerErrorException
     *
     * @return null|RestResultSalesProgresses|ResponseInterface
     */
    public function getSalesSalesprogress(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalesprogress($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalesprogressByIdUnauthorizedException
     * @throws GetSalesSalesprogressByIdNotFoundException
     * @throws GetSalesSalesprogressByIdUnprocessableEntityException
     * @throws GetSalesSalesprogressByIdInternalServerErrorException
     *
     * @return null|RestResultSalesProgress|ResponseInterface
     */
    public function getSalesSalesprogressById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalesprogressById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     *     @var string $select Select only specific fields to return
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalesreasonUnauthorizedException
     * @throws GetSalesSalesreasonNotFoundException
     * @throws GetSalesSalesreasonInternalServerErrorException
     *
     * @return null|RestResultSalesReasons|ResponseInterface
     */
    public function getSalesSalesreason(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalesreason($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalesreasonByIdBadRequestException
     * @throws GetSalesSalesreasonByIdUnauthorizedException
     * @throws GetSalesSalesreasonByIdUnprocessableEntityException
     * @throws GetSalesSalesreasonByIdInternalServerErrorException
     *
     * @return null|RestResultSalesReason|ResponseInterface
     */
    public function getSalesSalesreasonById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalesreasonById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalessourceUnauthorizedException
     * @throws GetSalesSalessourceNotFoundException
     * @throws GetSalesSalessourceInternalServerErrorException
     *
     * @return null|RestResultSalesSources|ResponseInterface
     */
    public function getSalesSalessource(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalessource($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalessourceByIdUnauthorizedException
     * @throws GetSalesSalessourceByIdNotFoundException
     * @throws GetSalesSalessourceByIdUnprocessableEntityException
     * @throws GetSalesSalessourceByIdInternalServerErrorException
     *
     * @return null|RestResultSalesSource|ResponseInterface
     */
    public function getSalesSalessourceById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalessourceById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalesstatusUnauthorizedException
     * @throws GetSalesSalesstatusNotFoundException
     * @throws GetSalesSalesstatusInternalServerErrorException
     *
     * @return null|RestResultSalesStatusses|ResponseInterface
     */
    public function getSalesSalesstatus(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalesstatus($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesSalesstatusByIdUnauthorizedException
     * @throws GetSalesSalesstatusByIdNotFoundException
     * @throws GetSalesSalesstatusByIdUnprocessableEntityException
     * @throws GetSalesSalesstatusByIdInternalServerErrorException
     *
     * @return null|RestResultSalesStatus|ResponseInterface
     */
    public function getSalesSalesstatusById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesSalesstatusById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $body Optional parameters to overwrite
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostSalesServiceByIdDuplicateBadRequestException
     * @throws PostSalesServiceByIdDuplicateUnauthorizedException
     * @throws PostSalesServiceByIdDuplicateNotFoundException
     * @throws PostSalesServiceByIdDuplicateInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postSalesServiceByIdDuplicate(string $id, string $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostSalesServiceByIdDuplicate($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesServiceUnauthorizedException
     * @throws GetSalesServiceNotFoundException
     * @throws GetSalesServiceInternalServerErrorException
     *
     * @return null|RestResultSalesServices|ResponseInterface
     */
    public function getSalesService(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesService($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostSalesService $body template object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostSalesServiceUnauthorizedException
     * @throws PostSalesServiceNotFoundException
     * @throws PostSalesServiceInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postSalesService(PostSalesService $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Steefdw\Simplicate\Endpoint\PostSalesService($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteSalesServiceByIdUnauthorizedException
     * @throws DeleteSalesServiceByIdNotFoundException
     * @throws DeleteSalesServiceByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteSalesServiceById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteSalesServiceById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSalesServiceByIdUnauthorizedException
     * @throws GetSalesServiceByIdNotFoundException
     * @throws GetSalesServiceByIdUnprocessableEntityException
     * @throws GetSalesServiceByIdInternalServerErrorException
     *
     * @return null|RestResultSalesService|ResponseInterface
     */
    public function getSalesServiceById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSalesServiceById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostSalesService $body Service object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutSalesServiceByIdBadRequestException
     * @throws PutSalesServiceByIdUnauthorizedException
     * @throws PutSalesServiceByIdNotFoundException
     * @throws PutSalesServiceByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putSalesServiceById(string $id, PostSalesService $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutSalesServiceById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetServicesDefaultserviceUnauthorizedException
     * @throws GetServicesDefaultserviceNotFoundException
     * @throws GetServicesDefaultserviceInternalServerErrorException
     *
     * @return null|RestResultDefaultServices|ResponseInterface
     */
    public function getServicesDefaultservice(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetServicesDefaultservice($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostDefaultService $body Default service object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostServicesDefaultserviceUnauthorizedException
     * @throws PostServicesDefaultserviceNotFoundException
     * @throws PostServicesDefaultserviceInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postServicesDefaultservice(PostDefaultService $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostServicesDefaultservice($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteServicesDefaultserviceByIdUnauthorizedException
     * @throws DeleteServicesDefaultserviceByIdNotFoundException
     * @throws DeleteServicesDefaultserviceByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteServicesDefaultserviceById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteServicesDefaultserviceById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetServicesDefaultserviceByIdUnauthorizedException
     * @throws GetServicesDefaultserviceByIdNotFoundException
     * @throws GetServicesDefaultserviceByIdUnprocessableEntityException
     * @throws GetServicesDefaultserviceByIdInternalServerErrorException
     *
     * @return null|RestResultDefaultService|ResponseInterface
     */
    public function getServicesDefaultserviceById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetServicesDefaultserviceById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostDefaultService $body default service object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutServicesDefaultserviceByIdBadRequestException
     * @throws PutServicesDefaultserviceByIdUnauthorizedException
     * @throws PutServicesDefaultserviceByIdNotFoundException
     * @throws PutServicesDefaultserviceByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putServicesDefaultserviceById(string $id, PostDefaultService $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutServicesDefaultserviceById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSharedItemUnauthorizedException
     * @throws GetSharedItemNotFoundException
     * @throws GetSharedItemInternalServerErrorException
     *
     * @return null|RestResultSharedItems|ResponseInterface
     */
    public function getSharedItem(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSharedItem($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostSharedItem $body Item object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostSharedItemUnauthorizedException
     * @throws PostSharedItemNotFoundException
     * @throws PostSharedItemInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postSharedItem(PostSharedItem $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new \Steefdw\Simplicate\Endpoint\PostSharedItem($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteSharedItemByIdUnauthorizedException
     * @throws DeleteSharedItemByIdNotFoundException
     * @throws DeleteSharedItemByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteSharedItemById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteSharedItemById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetSharedItemByIdUnauthorizedException
     * @throws GetSharedItemByIdNotFoundException
     * @throws GetSharedItemByIdUnprocessableEntityException
     * @throws GetSharedItemByIdInternalServerErrorException
     *
     * @return null|RestResultSharedItem|ResponseInterface
     */
    public function getSharedItemById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetSharedItemById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PostSharedItem $body Shared item object that with the data that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutSharedItemByIdUnauthorizedException
     * @throws PutSharedItemByIdNotFoundException
     * @throws PutSharedItemByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putSharedItemById(string $id, PostSharedItem $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutSharedItemById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostTimelineAttachmentUnauthorizedException
     * @throws PostTimelineAttachmentNotFoundException
     * @throws PostTimelineAttachmentInternalServerErrorException
     * @return null|ResponseInterface
     */
    public function postTimelineAttachment(PostAttachment $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostTimelineAttachment($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteTimelineAttachmentByIdUnauthorizedException
     * @throws DeleteTimelineAttachmentByIdNotFoundException
     * @throws DeleteTimelineAttachmentByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteTimelineAttachmentById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteTimelineAttachmentById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @var int $offset The offset to search from
     *     @var int $limit The limit of max allowed results
     *     @var string $sort Sort the result by column name
     * }
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetTimelineMessageUnauthorizedException
     * @throws GetTimelineMessageNotFoundException
     * @throws GetTimelineMessageInternalServerErrorException
     *
     * @return null|RestResultTimelineMessages|ResponseInterface
     */
    public function getTimelineMessage(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTimelineMessage($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostMessage $body Timeline message that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostTimelineMessageUnauthorizedException
     * @throws PostTimelineMessageNotFoundException
     * @throws PostTimelineMessageInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postTimelineMessage(PostMessage $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostTimelineMessage($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteTimelineMessageByIdUnauthorizedException
     * @throws DeleteTimelineMessageByIdNotFoundException
     * @throws DeleteTimelineMessageByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteTimelineMessageById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteTimelineMessageById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetTimelineMessageByIdUnauthorizedException
     * @throws GetTimelineMessageByIdNotFoundException
     * @throws GetTimelineMessageByIdUnprocessableEntityException
     * @throws GetTimelineMessageByIdInternalServerErrorException
     *
     * @return null|RestResultTimelineMessage|ResponseInterface
     */
    public function getTimelineMessageById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTimelineMessageById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultTimelineMessageTypes|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetTimelineMessagetypeUnauthorizedException
     * @throws GetTimelineMessagetypeNotFoundException
     * @throws GetTimelineMessagetypeInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getTimelineMessagetype(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTimelineMessagetype($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetTimelineMessagetypeByIdUnauthorizedException
     * @throws GetTimelineMessagetypeByIdNotFoundException
     * @throws GetTimelineMessagetypeByIdUnprocessableEntityException
     * @throws GetTimelineMessagetypeByIdInternalServerErrorException
     *
     * @return null|RestResultTimelineMessageType|ResponseInterface
     */
    public function getTimelineMessagetypeById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTimelineMessagetypeById($id), $fetch);
    }

    /**
     *
     *
     * @param array $queryParameters {
     *     @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @return null|RestResultTimers|ResponseInterface
     *@var string $sort Sort the result by column name
     * }
     * @var int $offset The offset to search from
     *     @throws GetTimersTimerUnauthorizedException
     * @throws GetTimersTimerNotFoundException
     * @throws GetTimersTimerInternalServerErrorException
     *
     * @var int $limit The limit of max allowed results
     */
    public function getTimersTimer(array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTimersTimer($queryParameters), $fetch);
    }

    /**
     *
     *
     * @param PostTimer $body Timer object that needs to be added
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostTimersTimerUnauthorizedException
     * @throws PostTimersTimerNotFoundException
     * @throws PostTimersTimerInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postTimersTimer(PostTimer $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostTimersTimer($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws DeleteTimersTimerByIdUnauthorizedException
     * @throws DeleteTimersTimerByIdNotFoundException
     * @throws DeleteTimersTimerByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function deleteTimersTimerById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new DeleteTimersTimerById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws GetTimersTimerByIdUnauthorizedException
     * @throws GetTimersTimerByIdNotFoundException
     * @throws GetTimersTimerByIdUnprocessableEntityException
     * @throws GetTimersTimerByIdInternalServerErrorException
     *
     * @return null|RestResultTimer|ResponseInterface
     */
    public function getTimersTimerById(string $id, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new GetTimersTimerById($id), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PutTimer $body Timer object that needs to be updated
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutTimersTimerByIdBadRequestException
     * @throws PutTimersTimerByIdUnauthorizedException
     * @throws PutTimersTimerByIdNotFoundException
     * @throws PutTimersTimerByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putTimersTimerById(string $id, PutTimer $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutTimersTimerById($id, $body), $fetch);
    }

    /**
     *
     *
     * @param PostChunked $body Data required to initialize an upload
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PostUploadChunkedBadRequestException
     * @throws PostUploadChunkedUnauthorizedException
     * @throws PostUploadChunkedNotFoundException
     * @throws PostUploadChunkedInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function postUploadChunked(PostChunked $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PostUploadChunked($body), $fetch);
    }

    /**
     *
     *
     * @param string $id The template's id
     * @param PutChunked $body Next chunk for an chunked_upload
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     * @throws PutUploadChunkedByIdBadRequestException
     * @throws PutUploadChunkedByIdUnauthorizedException
     * @throws PutUploadChunkedByIdNotFoundException
     * @throws PutUploadChunkedByIdInternalServerErrorException
     *
     * @return null|ResponseInterface
     */
    public function putUploadChunkedById(string $id, PutChunked $body, string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new PutUploadChunkedById($id, $body), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = Psr18ClientDiscovery::find();
            $plugins = [];
            $uri = Psr17FactoryDiscovery::findUriFactory()->createUri('https:///api/v2');
            $plugins[] = new AddHostPlugin($uri);
            $plugins[] = new AddPathPlugin($uri);
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new PluginClient($httpClient, $plugins);
        }
        $requestFactory = Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new ArrayDenormalizer(), new JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new Serializer($normalizers, [new JsonEncoder(new JsonEncode(), new JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
