{
    "swagger": "2.0",
    "info": {
        "title": "Simplicate API",
        "termsOfService": "http://www.simplicate.nl/terms",
        "contact": {
            "email": "support@simplicate.nl"
        },
        "license": {
            "name": "Simplicate",
            "url": "#"
        },
        "version": "2.0"
    },
    "host": "",
    "basePath": "/api/v2",
    "schemes": [
        "http",
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/costs/coststype": {
            "get": {
                "tags": [
                    "Costs"
                ],
                "summary": "Fetches all cost types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultHourTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/costs/coststype/{id}": {
            "get": {
                "tags": [
                    "Costs"
                ],
                "summary": "Fetches a single cost type by cost type id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultHourType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/costs/expense": {
            "get": {
                "tags": [
                    "Costs"
                ],
                "summary": "Fetches the expenses of employees",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultEmployeeExpenseList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/costs/expense/{id}": {
            "get": {
                "tags": [
                    "Costs"
                ],
                "summary": "Fetches a single expense for an employee",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultEmployeeExpense"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/contactperson": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all contact persons",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    },
                    {
                        "$ref": "#/parameters/select"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultContactPersons"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/contactperson/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single contact person by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultContactPerson"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "CRM"
                ],
                "summary": "Deletes the contact person for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/country": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all available countries",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCountries"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/country/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single country by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCountry"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/debtor": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all debtors available (organization and if business to consumer is enabled person also",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDebtorList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/document": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all available documents for CRM",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocuments"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "CRM"
                ],
                "summary": "update a document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "CRM"
                ],
                "summary": "update a document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/document/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single document for CRM by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocument"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "CRM"
                ],
                "summary": "Deletes the document with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/documenttype": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all available document types for CRM",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocumentTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/documenttype/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single document type for CRM by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocumentType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/gender": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all available genders",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultGenders"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/gender/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single gender by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultGender"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/industry": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all industry types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultIndustries"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/industry/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a industry type by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultIndustry"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/interests": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all interests available",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultInterests"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/interests/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single interest by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultInterest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/myorganizationprofile": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all my organization profiles",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultMyOrganizationProfiles"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/myorganizationprofile/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single my organization profile by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultMyOrganizationProfile"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/organization": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all organizations",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    },
                    {
                        "$ref": "#/parameters/select"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultOrganizations"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "CRM"
                ],
                "summary": "Add a new organization",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Organization object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostOrganization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/organization/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single organization by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultOrganization"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "CRM"
                ],
                "summary": "Updates an organization for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Organization object containing data that with the new values",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostOrganization"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "CRM"
                ],
                "summary": "Deletes the organization for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/organizationcustomfieldgroups": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all custom field groups available for organizations",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldGroups"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/organizationcustomfieldgroups/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single custom field group available for organization",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldGroup"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/organizationcustomfields": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all custom fields available for organizations",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFields"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/organizationcustomfields/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single custom field available for organization",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomField"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/organizationsize": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all available organization sizes",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultOrganizationSizes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/organizationsize/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single organization size by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultOrganizationSize"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/person": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all persons",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    },
                    {
                        "$ref": "#/parameters/select"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultPersons"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "CRM"
                ],
                "summary": "Add a new person",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Person object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostPerson"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/person/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single person by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultPerson"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "CRM"
                ],
                "summary": "Updates a person for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Person object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostPerson"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "CRM"
                ],
                "summary": "Deletes the person for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/personcustomfieldgroups": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all custom field groups available for persons",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldGroups"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/personcustomfieldgroups/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single custom field group available for person",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldGroup"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/personcustomfields": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all custom fields available for persons",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFields"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/personcustomfields/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single custom field available for person",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomField"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/relationtype": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches all relation types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultRelationTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/relationtype/{id}": {
            "get": {
                "tags": [
                    "CRM"
                ],
                "summary": "Fetches a single relation type by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultRelationType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/customfields/group": {
            "get": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Fetches all custom field groups",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldGroups"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/customfields/group/{id}": {
            "get": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Fetches single custom field group",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldGroup"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Updates an group for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Organization object containing data that with the new values",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomFieldGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Updates an group for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Organization object containing data that with the new values",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomFieldGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Deletes the customfield group for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/customfields/model": {
            "get": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Fetches all custom field models",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldModels"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/customfields/model/{id}": {
            "get": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Fetches all custom field models",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/customfields/option": {
            "get": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Fetches all custom field options",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldOptions"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/customfields/option/{id}": {
            "get": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Fetches single custom field option",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldOption"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Updates an option",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "CustomFieldOption object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomFieldOption"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Creates an option",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "CustomFieldOption object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CustomFieldOption"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Deletes the customfield option for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/customfields/type": {
            "get": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Fetches all custom field types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/customfields/type/{id}": {
            "get": {
                "tags": [
                    "Custom Fields"
                ],
                "summary": "Fetches single custom field type",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/documents/document": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Fetches all documents",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocuments"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Documents"
                ],
                "summary": "Add a new document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Documents"
                ],
                "summary": "Add a new document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/documents/document/{id}": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Fetches a single document by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocument"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Documents"
                ],
                "summary": "Deletes the document with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/documents/documenttype": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Fetches all available document types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocumentTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/documents/documenttype/{id}": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Fetches a single document type by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocumentType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/documents/download/{id}": {
            "get": {
                "tags": [
                    "Documents"
                ],
                "summary": "Fetches a single file by document id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/absence": {
            "post": {
                "tags": [
                    "Hours"
                ],
                "summary": "Add a new hours entity for absence",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "absence object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostAbsence"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "204": {
                        "description": "Ok, No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/absence/{id}": {
            "put": {
                "tags": [
                    "Hours"
                ],
                "summary": "Updates an hour entity for absence for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Absence object containing data that with the new values",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostAbsence"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/approval": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches the approval status of each day for each employee",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultApprovals"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Hours"
                ],
                "summary": "Add a new hours approval",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Approval object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostApproval"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/approval/{id}": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches a single approval status for a day for an employee",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultApproval"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Hours"
                ],
                "summary": "Updates a hours approval for the given approval id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Approval object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostApproval"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Hours"
                ],
                "summary": "Deletes the hours approval with the given approval id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/approvalstatus": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches all hour types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultApprovalStatusList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/approvalstatus/{id}": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches a single hour status by hour type id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultApprovalStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/employeeexpenses": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches the expenses of employees",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultEmployeeExpenseList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/employeeexpense/{id}": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches a single expense for an employee",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultEmployeeExpense"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/hours": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches all hours",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultHours"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Hours"
                ],
                "summary": "Add a new hours registration",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Hours object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostHours"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/hours/{id}": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches a single hours by hours id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultHour"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Hours"
                ],
                "summary": "Updates a hours registration for the given hours id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Hours object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostHours"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Hours"
                ],
                "summary": "Deletes the hours registration with the given hours id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/hourstype": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches all hour types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultHourTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Hours"
                ],
                "summary": "Add a new hour type",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Hour type object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostHoursType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/hourstype/{id}": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches a single hour type by hour type id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultHourType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Hours"
                ],
                "summary": "Updates a hour type registration for the given hour type id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Hours type object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostHoursType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/leave": {
            "post": {
                "tags": [
                    "Hours"
                ],
                "summary": "Add a new hours entity for leave",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "leave object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostLeave"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "204": {
                        "description": "Ok, No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/leave/{id}": {
            "put": {
                "tags": [
                    "Hours"
                ],
                "summary": "Updates an hour entity for leave for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Leave object containing data that with the new values",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostLeave"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/submission": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches hours submission status, by date, for an employee",
                "parameters": [
                    {
                        "name": "q[start_date]",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "q[end_date]",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "q[employee_id]",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultHoursSubmissions"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Hours"
                ],
                "summary": "Submit all the employee's hours between the start and end date.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Description of hours that need to be submitted.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostSubmission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/submit": {
            "post": {
                "tags": [
                    "Hours"
                ],
                "summary": "Submit hours for approval",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Data that is needed to submit hours",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Submit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hours/timesheetrow": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches timesheet rows, by date, for an employee",
                "parameters": [
                    {
                        "name": "q[start_date]",
                        "in": "query",
                        "description": "Y-m-d, must be a Monday",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "q[end_date]",
                        "in": "query",
                        "description": "Y-m-d, must be the Sunday after the Monday of the start_date",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "q[employee_id]",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultHoursTimesheetRows"
                        }
                    },
                    "400": {
                        "description": "Bad request, validation failed"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Hours"
                ],
                "summary": "Submit a timesheet week row for the given employee.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Description of timesheetrow that is submitted.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostTimesheetRow"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad request, validation failed"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/hours/timesheetrow/{id}": {
            "delete": {
                "tags": [
                    "Hours"
                ],
                "summary": "Deletes the timesheet row with the supplied timesheetrow id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok, timesheetrow deleted"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Timesheetrow not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/hours/timesheetrow/order": {
            "put": {
                "tags": [
                    "Hours"
                ],
                "summary": "Change order for timesheetrows.",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "List of external ids for timesheetrows that need to be ordered.",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok, timesheetrows ordered"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Timesheetrow not found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/hours/timesheetrow/mostrecent": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Find the most recent timesheet row",
                "parameters": [
                    {
                        "name": "q[before_date]",
                        "in": "query",
                        "required": true,
                        "type": "string",
                        "uniqueItems": true
                    },
                    {
                        "name": "q[employee_id]",
                        "in": "query",
                        "required": true,
                        "type": "string",
                        "uniqueItems": true
                    },
                    {
                        "name": "q[type]",
                        "in": "query",
                        "required": true,
                        "type": "string",
                        "uniqueItems": true,
                        "enum": [
                            "hours",
                            "mileage",
                            "costs"
                        ]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDateTimeRange"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/hrm/absence": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all absence for employees",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultAbsenceMultiple"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "HRM"
                ],
                "summary": "Add a new absence entity",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "absence object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostAbsence"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "204": {
                        "description": "Ok, No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/absence/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single absence by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultAbsence"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "HRM"
                ],
                "summary": "Updates an absence for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Absence object containing data that with the new values",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostAbsence"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "HRM"
                ],
                "summary": "Deletes the absence for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/absencetype": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all absence types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultAbsenceTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/absencetype/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single absence type by absence type id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultAbsenceType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/civilstatus": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all available civil statuses",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCivilStatuses"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/civilstatus/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single contract type by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCivilStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/contract": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all contracts",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultContracts"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/contract/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single contract by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultContract"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/contracttype": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all available contract types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultContractTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/contracttype/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single contract type by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultContractType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/document": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all available documents for HRM",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocuments"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "HRM"
                ],
                "summary": "update a document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "HRM"
                ],
                "summary": "create a document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/document/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single document for HRM by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocument"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "HRM"
                ],
                "summary": "Deletes the document with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/documenttype": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all available document types for HRM",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocumentTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/documenttype/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single document type for HRM by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocumentType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/employee": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all employees",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultEmployees"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "HRM"
                ],
                "summary": "Add a new employee",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Employee object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostEmployee"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/employee/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single employee by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultEmployee"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "HRM"
                ],
                "summary": "Updates an existing employee",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Employee object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutEmployee"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/employeecustomfieldgroups": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all custom field groups available for employees",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldGroups"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/employeecustomfieldgroups/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single custom field group available for employee",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldGroup"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/employeecustomfields": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all custom fields available for employees",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFields"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/employeecustomfields/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single custom field available for employee",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomField"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/employeetype": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all available employee types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultEmployeeTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/employeetype/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single employee type by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultEmployeeType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/employmenttype": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all available contract types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultEmploymentTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/employmenttype/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single contract type by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultEmploymentType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/leave": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all leave for employees",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultLeaveMultiple"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "HRM"
                ],
                "summary": "Add a new leave entity",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Leave object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostLeave"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/leave/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single leave by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultLeave"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "HRM"
                ],
                "summary": "Updates an leave for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Leave object containing data that with the new values",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostLeave"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/leavebalance": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all leave balances for employees",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultLeaveBalances"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/leavetype": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all leave types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultLeaveTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/leavetype/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single leave type by leave type id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultLeaveType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/team": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all teams",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultTeams"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/team/{id}": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches a single team by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultTeam"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/timetable": {
            "get": {
                "tags": [
                    "HRM"
                ],
                "summary": "Fetches all available timetables",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultTimetables"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "HRM"
                ],
                "summary": "Add a new timetable",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Timetable object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostTimetable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/hrm/timetable/{id}": {
            "put": {
                "tags": [
                    "HRM"
                ],
                "summary": "Updates an existing timetable",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Timetable object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutTimetable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "HRM"
                ],
                "summary": "Deletes the timetable with given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/document": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches all available documents for invoices",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocuments"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Invoices"
                ],
                "summary": "update a document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "create a document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/document/{id}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches a single document for invoices by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocument"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Deletes the document with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/documenttype": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches all available document types for Invoices",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocumentTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/documenttype/{id}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches a single document type for Invoices by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocumentType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/invoice": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches all invoices",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultInvoices"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Add a new invoice",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Invoice object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostInvoice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/invoice/{id}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches a single invoice by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultInvoice"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Updates a invoice for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "template object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Invoice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Deletes the invoice for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/invoicestatus": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches all invoice status",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultInvoiceStatuses"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/invoicestatus/{id}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches a single invoice status by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultInvoiceStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/payment": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches all payments",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultPayments"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Add a new payment",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Payment object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/payment/{id}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches a single payment by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultPayment"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Updates a payment for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Payment object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/paymentterm": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches all paymentterms",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultPaymentTerms"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/paymentterm/{id}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches a single payment term by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultPaymentTerm"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/proposition": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Show all available propositions",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultPropositions"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/reminderset": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches all invoice reminder sets",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultReminderSets"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/reminderset/{id}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches a single invoice reminder set by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultReminderSet"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/remindertemplate": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches all invoice reminder templates",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultReminderTemplates"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/remindertemplate/{id}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches a single invoice reminder template by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultReminderTemplate"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/vatclass": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches all to vat class",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultVatClasses"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/invoices/vatclass/{id}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Fetches a single vat class by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultVatClass"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/merger/compareorganization": {
            "post": {
                "tags": [
                    "Merger"
                ],
                "summary": "Compare two organizations by a given source and target id",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Compare objects containing the source id and target id",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostMergerCompare"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultMergerCompare"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/merger/compareperson": {
            "post": {
                "tags": [
                    "Merger"
                ],
                "summary": "Compare two persons by a given source and target id",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Compare objects containing the source id and target id",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostMergerCompare"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultMergerCompare"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/mergeorganization": {
            "post": {
                "tags": [
                    "Merger"
                ],
                "summary": "Merge two organizations by a given source and target id",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Merge object containing the source id and target id",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostMerger"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/ResultMergerMerge"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/crm/mergeperson": {
            "post": {
                "tags": [
                    "Merger"
                ],
                "summary": "Merge two people by a given source and target id",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Merge object containing the source id and target id",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostMerger"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/ResultMergerMerge"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/mileage/mileage": {
            "get": {
                "tags": [
                    "Mileage"
                ],
                "summary": "Fetches all mileages",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultMileageList"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Mileage"
                ],
                "summary": "Add a new mileage registration",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Mileage object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostMileage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/mileage/mileage/{id}": {
            "get": {
                "tags": [
                    "Mileage"
                ],
                "summary": "Fetches a single mileage by mileage id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultMileage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Mileage"
                ],
                "summary": "Updates a mileage registration for the given mileage id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Mileage object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutMileage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Mileage"
                ],
                "summary": "Deletes the mileage registration with the given mileage id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/assignment": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all available assignments for projects",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultProjectAssignments"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Creates a new project assignment",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Project assignment POST body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostAssignment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/assignment/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all a single assignment by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultProjectAssignment"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "Updates a project assignment for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Project assignment PUT body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutAssignment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/assignmentbudget": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Get budget information (planned amount, spent amount etc.) of assignment within given date range",
                "parameters": [
                    {
                        "name": "q[range_start]",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "q[employee_id]",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "q[assignment_id]",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultProjectAssignmentbudget"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "402": {
                        "description": "License required"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/assignmentstatus": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all available assignment statuses for projects",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultProjectAssignmentStatuses"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Creates a new project assignment status",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Project assignment POST body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssignmentStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/assignmentstatus/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a single assignment status by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultProjectAssignmentStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "Updates a project assignment status for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Project assignment POST body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AssignmentStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/document": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all available documents for projects",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocuments"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "update a document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "create a document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/document/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a single document for projects by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocument"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Deletes the document with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/documenttype": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all available document types for Projects",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocumentTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/documenttype/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a single document type for Projects by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocumentType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/project": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all projects",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultProjects"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Add a new project",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Project object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostProject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/project/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a single project by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultProject"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "Updates a project for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "project object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostProject"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Deletes the project with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/project/{id}/planningBudget": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches the assignment budget info of a project",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "by",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "projectservice",
                            "projectservicehourstype"
                        ]
                    },
                    {
                        "name": "until_date",
                        "in": "query",
                        "description": "Y-m-d",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResult"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/projectcustomfieldgroups": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all custom field groups available for projects",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldGroups"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/projectcustomfieldgroups/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a single custom field group available for project",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldGroup"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/projectcustomfields": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all custom fields available for projects",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFields"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/projectcustomfields/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a single custom field available for projects",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomField"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "projects/projectemployee": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Add an employee to a project",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body for adding an employee to a project",
                        "required": true,
                        "schema": {
                            "properties": {
                                "employee_id": {
                                    "type": "string"
                                },
                                "project_id": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                }
            }
        },
        "projects/projectemployee/{project_employee_id}": {
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Remove an employee from a project",
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Server Error"
                    }
                }
            }
        },
        "/projects/projectfilters": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all filters available for projects",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultFilters"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/projectfilters/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a single filter available for projects",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultFilter"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/projectstatus": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all projects statusses",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultProjectStatusses"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/projectstatus/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a single projects status by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultProjectStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/purchase": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all project purchase records",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultPurchases"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/purchase/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a single project purchase record",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultPurchase"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/purchasetype": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all purchase types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultPurchaseTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/purchasetype/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a single purchase type by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultPurchaseType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/reverseinvoice": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all reverse invoice records",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultReverseInvoices"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/reverseinvoice/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a single project reverse invoice",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultReverseInvoice"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/service/{id}/duplicate": {
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Duplicates a service on base of the id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Optional parameters to overwrite",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DuplicateProjectService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/service": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches all services",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultProjectServices"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Projects"
                ],
                "summary": "Add a new service",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "template object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostProjectService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/service/{id}": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches a single service by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultProjectService"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Projects"
                ],
                "summary": "Updates a service for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Service object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutProjectService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Projects"
                ],
                "summary": "Deletes the service with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/projects/service/{id}/planningBudget": {
            "get": {
                "tags": [
                    "Projects"
                ],
                "summary": "Fetches the assignment budget info of a project service",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "by",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "projectservicehourstype"
                        ]
                    },
                    {
                        "name": "until_date",
                        "in": "query",
                        "description": "Y-m-d",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResult"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/converttoproject/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Shows if the provided sale id can be converted to a project",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSale"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/document": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all available documents for sales",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocuments"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Sales"
                ],
                "summary": "update a document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Sales"
                ],
                "summary": "create a document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostDocument"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/document/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single document for sales by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocument"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Sales"
                ],
                "summary": "Deletes the document with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/documenttype": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all available document types for Sales",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocumentTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/documenttype/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single document type for Sales by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDocumentType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/quote": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all available quote templates for sales",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultQuotes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Sales"
                ],
                "summary": "create a quote template",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Quote template object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostQuote"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/quote/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single quote template for sales by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultQuote"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Sales"
                ],
                "summary": "update a quote template",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Quote template object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostQuote"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Sales"
                ],
                "summary": "Deletes the quote template with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/quoteemail/{id}": {
            "put": {
                "tags": [
                    "Sales"
                ],
                "summary": "append only a single email to the emails collection quote",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Document object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutQuoteEmail"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/quotestatus": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all quote statuses",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultQuoteStatuses"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/quotestatus/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single quote status for quotes by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultQuoteStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/quotetemplate": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all available quote templates for sales",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultQuoteTemplates"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Sales"
                ],
                "summary": "create a quote template",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Quote template object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostQuoteTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/quotetemplate/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single quote template for sales by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultQuoteTemplate"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Sales"
                ],
                "summary": "update a quote template",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Quote template object containing data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostQuoteTemplate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Sales"
                ],
                "summary": "Deletes the quote template with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/revenuegroup": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all revenue groups",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultRevenueGroups"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/revenuegroup/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single revenue group by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultRevenueGroup"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/sales": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all sales",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSales"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Sales"
                ],
                "summary": "Add a new sales",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Sales object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostSales"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/sales/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single sales by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSale"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Sales"
                ],
                "summary": "Updates a sales for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "project object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostSales"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/sales/{id}/duplicate": {
            "post": {
                "tags": [
                    "Sales"
                ],
                "summary": "Duplicates a sales deal on base of the id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Optional parameters to overwrite",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PostDuplicateSales"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salescustomfieldgroups": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all custom field groups available for sales",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldGroups"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salescustomfieldgroups/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single custom field group available for project",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFieldGroup"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salescustomfields": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all custom fields available for sales",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomFields"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salescustomfields/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single custom field available for sales",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultCustomField"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salesfilters": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all filters available for sales",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultFilters"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salesfilters/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single filter available for sales",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultFilter"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salesprogress": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all sales progresses",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSalesProgresses"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salesprogress/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single sales progress by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSalesProgress"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salesreason": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all sales reasons",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    },
                    {
                        "$ref": "#/parameters/select"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSalesReasons"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salesreason/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single sales reason by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSalesReason"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salessource": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all sales source",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSalesSources"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salessource/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single sales source by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSalesSource"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salesstatus": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all sales statusses",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSalesStatusses"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/salesstatus/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single sales status by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSalesStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/service/{id}/duplicate": {
            "post": {
                "tags": [
                    "Sales"
                ],
                "summary": "Duplicates a service on base of the id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Optional parameters to overwrite",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DuplicateProjectService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/service": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches all services",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSalesServices"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Sales"
                ],
                "summary": "Add a new service",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "template object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostSalesService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/sales/service/{id}": {
            "get": {
                "tags": [
                    "Sales"
                ],
                "summary": "Fetches a single service by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSalesService"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Sales"
                ],
                "summary": "Updates a service for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Service object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostSalesService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Sales"
                ],
                "summary": "Deletes the service with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/services/defaultservice": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Fetches all default services",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDefaultServices"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Services"
                ],
                "summary": "Add a new default service",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Default service object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostDefaultService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/services/defaultservice/{id}": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Fetches a single default service by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultDefaultService"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Services"
                ],
                "summary": "Updates a default service for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "default service object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostDefaultService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Services"
                ],
                "summary": "Deletes the default service with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/shared/item": {
            "get": {
                "tags": [
                    "Shared"
                ],
                "summary": "Fetches all shared items",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSharedItems"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Shared"
                ],
                "summary": "Add a new shared item",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Item object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostSharedItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/shared/item/{id}": {
            "get": {
                "tags": [
                    "Shared"
                ],
                "summary": "Fetches a single shared item  by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultSharedItem"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Shared"
                ],
                "summary": "Updates an existing shared item",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Shared item object that with the data that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostSharedItem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Shared"
                ],
                "summary": "Deletes the shared item with the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/timeline/attachment": {
            "post": {
                "tags": [
                    "Timeline"
                ],
                "summary": "Creates a new timeline message attachment - which is the link between /timeline/message and /documents/document",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostAttachment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/timeline/attachment/{id}": {
            "delete": {
                "tags": [
                    "Timeline"
                ],
                "summary": "Deletes the timeline message attachment for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/timeline/message": {
            "get": {
                "tags": [
                    "Timeline"
                ],
                "summary": "Fetches all messages",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultTimelineMessages"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Timeline"
                ],
                "summary": "Add a new timeline message",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Timeline message that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostMessage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/timeline/message/{id}": {
            "get": {
                "tags": [
                    "Timeline"
                ],
                "summary": "Fetches a single time line message by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultTimelineMessage"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Timeline"
                ],
                "summary": "Deletes the timeline message for the given id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/timeline/messagetype": {
            "get": {
                "tags": [
                    "Timeline"
                ],
                "summary": "Fetches all message types",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultTimelineMessageTypes"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/timeline/messagetype/{id}": {
            "get": {
                "tags": [
                    "Timeline"
                ],
                "summary": "Fetches a single timeline message type by id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultTimelineMessageType"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/timers/timer": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches all timers",
                "parameters": [
                    {
                        "$ref": "#/parameters/offset"
                    },
                    {
                        "$ref": "#/parameters/limit"
                    },
                    {
                        "$ref": "#/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultTimers"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Hours"
                ],
                "summary": "Add a new timer",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Timer object that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostTimer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/timers/timer/{id}": {
            "get": {
                "tags": [
                    "Hours"
                ],
                "summary": "Fetches a single timer by its id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "$ref": "#/definitions/RestResultTimer"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Hours"
                ],
                "summary": "Updates a timer for the given timer id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Timer object that needs to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutTimer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Hours"
                ],
                "summary": "Deletes the timer with the given timer id",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/upload/chunked": {
            "post": {
                "tags": [
                    "Upload"
                ],
                "summary": "Create an upload record to upload a file",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Data required to initialize an upload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PostChunked"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        },
        "/upload/chunked/{id}": {
            "put": {
                "tags": [
                    "Upload"
                ],
                "summary": "Upload next chunk to specific chunked_upload",
                "parameters": [
                    {
                        "$ref": "#/parameters/id"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Next chunk for an chunked_upload",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PutChunked"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Entity Not Found"
                    },
                    "500": {
                        "description": "Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "Feature": {
            "properties": {
                "identifier": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "is_enabled": {
                    "type": "boolean"
                }
            }
        },
        "Setting": {
            "properties": {
                "module": {
                    "type": "string"
                },
                "settings": {
                    "description": "",
                    "type": "array"
                }
            }
        },
        "App": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "INSTALLED",
                        "DISABLED",
                        "UNINSTALLED"
                    ]
                }
            }
        },
        "Log": {
            "properties": {
                "timestamp": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "ServiceGroup": {
            "properties": {
                "label": {
                    "type": "string"
                }
            }
        },
        "BaseSetting": {
            "properties": {
                "timestamp": {
                    "type": "string"
                },
                "app_id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Setting"
            }
        },
        "Expense": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "project": {
                    "$ref": "#/definitions/GetProjectSimple"
                },
                "service_id": {
                    "type": "string"
                },
                "costtype": {
                    "$ref": "#/definitions/GetProjectServiceCostType"
                },
                "default_costtype": {
                    "$ref": "#/definitions/GetPurchaseType"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_price_unit": {
                    "type": "number",
                    "format": "float"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_price_total": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_margin": {
                    "type": "number",
                    "format": "float"
                },
                "total_price": {
                    "type": "number",
                    "format": "float"
                },
                "is_billable": {
                    "type": "boolean"
                },
                "approval_status": {
                    "$ref": "#/definitions/ApprovalStatus"
                },
                "invoice_status": {
                    "type": "string",
                    "enum": [
                        "open",
                        "invoiced",
                        "flushed"
                    ]
                },
                "invoice": {
                    "$ref": "#/definitions/GetInvoice"
                },
                "employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "date": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "service_purchase_start_date": {
                    "type": "string"
                },
                "service_purchase_end_date": {
                    "type": "string"
                },
                "attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExpenseAttachment"
                    }
                }
            }
        },
        "ExpenseAttachment": {
            "properties": {
                "file_hash": {
                    "type": "string"
                },
                "file_name": {
                    "type": "string"
                }
            }
        },
        "PostExpense": {
            "properties": {
                "project_id": {
                    "type": "string"
                },
                "service_id": {
                    "type": "string"
                },
                "costtype_id": {
                    "type": "string"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "employee_id": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                }
            }
        },
        "Accountancy": {
            "properties": {
                "is_tax_unit_vat": {
                    "type": "boolean"
                },
                "vat_number_fe": {
                    "type": "string"
                },
                "tax_unit_vat_role": {
                    "type": "string",
                    "enum": [
                        "mother",
                        "daughter",
                        "participation"
                    ]
                },
                "is_tax_unit_vpb": {
                    "type": "boolean"
                },
                "tax_unit_vpb_role": {
                    "type": "string",
                    "enum": [
                        "mother",
                        "daughter",
                        "participation"
                    ]
                }
            }
        },
        "Address": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "line_1": {
                    "type": "string"
                },
                "line_2": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "locality": {
                    "type": "string"
                },
                "country_code": {
                    "type": "string"
                },
                "country_id": {
                    "type": "string"
                }
            }
        },
        "Administration": {
            "properties": {
                "name": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Administration"
            }
        },
        "ContactPerson": {
            "properties": {
                "is_active": {
                    "type": "boolean"
                },
                "work_function": {
                    "type": "string"
                },
                "work_email": {
                    "type": "string"
                },
                "work_phone": {
                    "type": "string"
                },
                "work_mobile": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                }
            }
        },
        "Country": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "country_code": {
                    "type": "string"
                },
                "language_code": {
                    "type": "string"
                }
            }
        },
        "CustomerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Debtor": {
            "properties": {
                "provision_method": {
                    "type": "string",
                    "enum": [
                        "post",
                        "email"
                    ]
                },
                "send_invoice_email_to_contact": {
                    "type": "boolean"
                },
                "provision_contactperson_id": {
                    "description": "See /crm/person",
                    "type": "string"
                },
                "send_invoice_email_to_project_contact": {
                    "type": "boolean"
                },
                "send_invoice_email_to_fixed_email": {
                    "type": "boolean"
                },
                "send_email_email": {
                    "type": "string"
                },
                "send_invoice_email_to_cc": {
                    "type": "boolean"
                },
                "cc": {
                    "type": "array"
                },
                "attention_to": {
                    "type": "string",
                    "enum": [
                        "none",
                        "contact",
                        "creditor"
                    ]
                },
                "attention_to_person_id": {
                    "description": "See /crm/person",
                    "type": "string"
                },
                "attention_to_fixed": {
                    "type": "string"
                },
                "autocollect": {
                    "type": "boolean"
                },
                "reminders": {
                    "type": "boolean"
                },
                "send_email_type": {
                    "type": "string",
                    "enum": [
                        "fixed",
                        "contact"
                    ]
                },
                "autosend_subscription_invoice": {
                    "type": "boolean"
                },
                "invoicetemplate_id": {
                    "type": "string"
                }
            }
        },
        "DebtorList": {
            "properties": {
                "organization": {
                    "$ref": "#/definitions/GetOrganizationDebtorSimple"
                },
                "person": {
                    "$ref": "#/definitions/GetPersonDebtorSimple"
                }
            }
        },
        "ExternalList": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ExternalListTag": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Gender": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "GetAddress": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "line_1": {
                    "type": "string"
                },
                "line_2": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "locality": {
                    "type": "string"
                },
                "country_code": {
                    "type": "string"
                },
                "country_id": {
                    "type": "string"
                }
            }
        },
        "GetBasicPersonSimple": {
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "gender_id": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "address": {
                    "$ref": "#/definitions/GetAddress"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "twitter_url": {
                    "type": "string"
                },
                "linkedin_url": {
                    "type": "string"
                },
                "facebook_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                }
            }
        },
        "GetContactPerson": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "organization": {
                    "$ref": "#/definitions/GetOrganizationSimple"
                },
                "person": {
                    "$ref": "#/definitions/GetPersonSimple"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "work_function": {
                    "type": "string"
                },
                "work_email": {
                    "type": "string"
                },
                "work_phone": {
                    "type": "string"
                },
                "work_mobile": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                }
            }
        },
        "GetContactSimple": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "person": {
                    "$ref": "#/definitions/GetPersonSimple"
                },
                "organization": {
                    "$ref": "#/definitions/GetOrganizationSimple"
                }
            }
        },
        "GetDebtor": {
            "properties": {
                "payment_term": {
                    "$ref": "#/definitions/GetPaymentTerm"
                },
                "provision_method": {
                    "type": "string",
                    "enum": [
                        "post",
                        "email"
                    ]
                },
                "send_invoice_email_to_contact": {
                    "type": "boolean"
                },
                "provision_contactperson_id": {
                    "description": "See /crm/person",
                    "type": "string"
                },
                "send_invoice_email_to_project_contact": {
                    "type": "boolean"
                },
                "send_invoice_email_to_fixed_email": {
                    "type": "boolean"
                },
                "send_email_email": {
                    "type": "string"
                },
                "send_invoice_email_to_cc": {
                    "type": "boolean"
                },
                "cc": {
                    "type": "array"
                },
                "attention_to": {
                    "type": "string",
                    "enum": [
                        "none",
                        "contact",
                        "creditor"
                    ]
                },
                "attention_to_person_id": {
                    "description": "See /crm/person",
                    "type": "string"
                },
                "attention_to_fixed": {
                    "type": "string"
                },
                "autocollect": {
                    "type": "boolean"
                },
                "reminders": {
                    "type": "boolean"
                },
                "send_email_type": {
                    "type": "string",
                    "enum": [
                        "fixed",
                        "contact"
                    ]
                },
                "autosend_subscription_invoice": {
                    "type": "boolean"
                },
                "invoicetemplate_id": {
                    "type": "string"
                }
            }
        },
        "GetInterest": {
            "properties": {
                "value": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "api_name": {
                    "type": "string"
                },
                "organization": {
                    "type": "boolean"
                },
                "person": {
                    "type": "boolean"
                },
                "contact": {
                    "type": "boolean"
                }
            }
        },
        "GetMyOrganizationProfileSimple": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "organization": {
                    "$ref": "#/definitions/GetOrganizationSimple"
                }
            }
        },
        "GetOrganization": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "visiting_address": {
                    "$ref": "#/definitions/GetAddress"
                },
                "postal_address": {
                    "$ref": "#/definitions/GetAddress"
                },
                "relation_type": {
                    "$ref": "#/definitions/RelationType"
                },
                "relation_manager": {
                    "$ref": "#/definitions/Employee"
                },
                "customer_group": {
                    "$ref": "#/definitions/CustomerGroup"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetTeamSimple"
                    }
                },
                "debtor": {
                    "$ref": "#/definitions/GetDebtor"
                },
                "organizationsize": {
                    "$ref": "#/definitions/OrganizationSize"
                },
                "linked_persons_contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContactPerson"
                    }
                },
                "interests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Interest"
                    }
                },
                "accountancy": {
                    "$ref": "#/definitions/Accountancy"
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetCustomField"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "simplicate_url": {
                    "type": "string"
                },
                "sbi_codes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SbiCode"
                    }
                },
                "is_active": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "coc_code": {
                    "type": "string"
                },
                "vat_number": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "linkedin_url": {
                    "type": "string"
                },
                "has_different_postal_address": {
                    "type": "boolean"
                },
                "industry": {
                    "$ref": "#/definitions/Industry"
                },
                "invoice_receiver": {
                    "type": "string"
                },
                "allow_autocollect": {
                    "type": "boolean"
                },
                "bank_account": {
                    "type": "string"
                },
                "bank_bic": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                }
            }
        },
        "GetOrganizationDebtorSimple": {
            "properties": {
                "relation_type": {
                    "$ref": "#/definitions/RelationType"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                }
            }
        },
        "GetOrganizationSimple": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                }
            }
        },
        "GetPerson": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "gender_id": {
                    "type": "string"
                },
                "use_custom_salutation": {
                    "type": "boolean"
                },
                "custom_salutation": {
                    "type": "string"
                },
                "interests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetInterest"
                    }
                },
                "simplicate_url": {
                    "type": "string"
                },
                "address": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetAddress"
                    }
                },
                "relation_manager": {
                    "$ref": "#/definitions/Employee"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetTeamSimple"
                    }
                },
                "is_employee": {
                    "type": "integer"
                },
                "linked_as_contact_to_organization": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationContact"
                    }
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetCustomField"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "relation_type": {
                    "$ref": "#/definitions/RelationType"
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "Male",
                        "Female",
                        "Unknown"
                    ]
                },
                "initials": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "family_name_prefix": {
                    "type": "string"
                },
                "family_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "website_url": {
                    "type": "string"
                },
                "twitter_url": {
                    "type": "string"
                },
                "linkedin_url": {
                    "type": "string"
                },
                "facebook_url": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                },
                "bank_account": {
                    "type": "string"
                },
                "bank_bic": {
                    "type": "string"
                },
                "invoice_receiver": {
                    "type": "string"
                },
                "mailing_list_email": {
                    "type": "string"
                },
                "mailing_lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonMailingList"
                    }
                }
            }
        },
        "GetPersonDebtorSimple": {
            "properties": {
                "relation_type": {
                    "$ref": "#/definitions/RelationType"
                },
                "id": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                }
            }
        },
        "GetPersonSimple": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                }
            }
        },
        "Industry": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Interest": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "api_name": {
                    "type": "string"
                },
                "organization": {
                    "type": "boolean"
                },
                "person": {
                    "type": "boolean"
                },
                "contact": {
                    "type": "boolean"
                }
            }
        },
        "MailingList": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "MyOrganizationProfile": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "coc_code": {
                    "type": "string"
                },
                "vat_number": {
                    "type": "string"
                },
                "bank_account": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                }
            }
        },
        "Organization": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "coc_code": {
                    "type": "string"
                },
                "vat_number": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "linkedin_url": {
                    "type": "string"
                },
                "has_different_postal_address": {
                    "type": "boolean"
                },
                "industry": {
                    "$ref": "#/definitions/Industry"
                },
                "organizationsize": {
                    "$ref": "#/definitions/OrganizationSize"
                },
                "invoice_receiver": {
                    "type": "string"
                },
                "allow_autocollect": {
                    "type": "boolean"
                },
                "bank_account": {
                    "type": "string"
                },
                "bank_bic": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                }
            }
        },
        "OrganizationContact": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "work_function": {
                    "type": "string"
                },
                "work_email": {
                    "type": "string"
                },
                "work_phone": {
                    "type": "string"
                },
                "work_mobile": {
                    "type": "string"
                },
                "interests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Interest"
                    }
                }
            }
        },
        "OrganizationSize": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Person": {
            "properties": {
                "relation_type": {
                    "$ref": "#/definitions/RelationType"
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "Male",
                        "Female",
                        "Unknown"
                    ]
                },
                "initials": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "family_name_prefix": {
                    "type": "string"
                },
                "family_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "website_url": {
                    "type": "string"
                },
                "twitter_url": {
                    "type": "string"
                },
                "linkedin_url": {
                    "type": "string"
                },
                "facebook_url": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                },
                "bank_account": {
                    "type": "string"
                },
                "bank_bic": {
                    "type": "string"
                },
                "invoice_receiver": {
                    "type": "string"
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "mailing_list_email": {
                    "type": "string"
                },
                "mailing_lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonMailingList"
                    }
                },
                "is_active": {
                    "type": "boolean"
                }
            }
        },
        "PersonContact": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "first_name": {},
                "family_name_prefix": {
                    "type": "string"
                },
                "family_name": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "work_function": {
                    "type": "string"
                },
                "work_email": {
                    "type": "string"
                },
                "work_phone": {
                    "type": "string"
                },
                "work_mobile": {
                    "type": "string"
                },
                "interests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Interest"
                    }
                }
            }
        },
        "PersonMailingList": {
            "properties": {
                "value": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "PostAddress": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "line_1": {
                    "type": "string"
                },
                "line_2": {
                    "type": "string"
                },
                "postal_code": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "locality": {
                    "type": "string"
                },
                "country_code": {
                    "type": "string"
                },
                "country_id": {
                    "type": "string"
                }
            }
        },
        "PostContactOrganizationFk": {
            "properties": {
                "organization_id": {
                    "type": "string"
                },
                "work_function": {
                    "type": "string"
                },
                "work_email": {
                    "type": "string"
                },
                "work_mobile": {
                    "type": "string"
                }
            }
        },
        "PostContactPerson": {
            "properties": {
                "organization_id": {
                    "description": "See /crm/organization",
                    "type": "string"
                },
                "person_id": {
                    "description": "See /crm/person",
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "work_function": {
                    "type": "string"
                },
                "work_email": {
                    "type": "string"
                },
                "work_phone": {
                    "type": "string"
                },
                "work_mobile": {
                    "type": "string"
                }
            }
        },
        "PostContactPersonFk": {
            "properties": {
                "person_id": {
                    "type": "string"
                },
                "work_function": {
                    "type": "string"
                },
                "work_email": {
                    "type": "string"
                },
                "work_mobile": {
                    "type": "string"
                }
            }
        },
        "PostContactPersonProperties": {
            "properties": {
                "work_function": {
                    "type": "string"
                },
                "work_email": {
                    "type": "string"
                },
                "work_mobile": {
                    "type": "string"
                }
            }
        },
        "PostDebtor": {
            "properties": {
                "payment_term_id": {
                    "description": "See /invoices/paymentterm",
                    "type": "string"
                },
                "provision_method": {
                    "type": "string",
                    "enum": [
                        "post",
                        "email"
                    ]
                },
                "send_invoice_email_to_contact": {
                    "type": "boolean"
                },
                "provision_contactperson_id": {
                    "description": "See /crm/person",
                    "type": "string"
                },
                "send_invoice_email_to_project_contact": {
                    "type": "boolean"
                },
                "send_invoice_email_to_fixed_email": {
                    "type": "boolean"
                },
                "send_email_email": {
                    "type": "string"
                },
                "send_invoice_email_to_cc": {
                    "type": "boolean"
                },
                "cc": {
                    "type": "array"
                },
                "attention_to": {
                    "type": "string",
                    "enum": [
                        "none",
                        "contact",
                        "creditor"
                    ]
                },
                "attention_to_person_id": {
                    "description": "See /crm/person",
                    "type": "string"
                },
                "attention_to_fixed": {
                    "type": "string"
                },
                "autocollect": {
                    "type": "boolean"
                },
                "reminders": {
                    "type": "boolean"
                },
                "send_email_type": {
                    "type": "string",
                    "enum": [
                        "fixed",
                        "contact"
                    ]
                },
                "autosend_subscription_invoice": {
                    "type": "boolean"
                },
                "invoicetemplate_id": {
                    "type": "string"
                }
            }
        },
        "PostInterest": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "api_name": {
                    "type": "string"
                },
                "organization": {
                    "type": "boolean"
                },
                "person": {
                    "type": "boolean"
                },
                "contact": {
                    "type": "boolean"
                }
            }
        },
        "PostOrganization": {
            "properties": {
                "visiting_address": {
                    "$ref": "#/definitions/PostAddress"
                },
                "postal_address": {
                    "$ref": "#/definitions/PostAddress"
                },
                "relation_type": {
                    "$ref": "#/definitions/RelationType"
                },
                "relation_manager": {
                    "$ref": "#/definitions/PostEmployeeFk"
                },
                "customer_group": {
                    "$ref": "#/definitions/PostOrganizationFk"
                },
                "linked_persons_contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostContactPersonFk"
                    }
                },
                "interests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostInterest"
                    }
                },
                "debtor": {
                    "$ref": "#/definitions/PostDebtor"
                },
                "teams": {
                    "description": "See /hrm/team",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostTeam"
                    }
                },
                "accountancy": {
                    "$ref": "#/definitions/Accountancy"
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostCustomFieldValue"
                    }
                },
                "name": {
                    "type": "string"
                },
                "coc_code": {
                    "type": "string"
                },
                "vat_number": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "linkedin_url": {
                    "type": "string"
                },
                "has_different_postal_address": {
                    "type": "boolean"
                },
                "industry": {
                    "$ref": "#/definitions/Industry"
                },
                "organizationsize": {
                    "$ref": "#/definitions/OrganizationSize"
                },
                "invoice_receiver": {
                    "type": "string"
                },
                "allow_autocollect": {
                    "type": "boolean"
                },
                "bank_account": {
                    "type": "string"
                },
                "bank_bic": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                }
            }
        },
        "PostOrganizationFk": {
            "properties": {
                "id": {
                    "type": "string",
                    "default": "organization:abc"
                }
            }
        },
        "PostPerson": {
            "properties": {
                "interests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostInterest"
                    }
                },
                "address": {
                    "$ref": "#/definitions/PostAddress"
                },
                "linked_as_contact_to_organization": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostContactOrganizationFk"
                    }
                },
                "gender_id": {
                    "type": "string"
                },
                "teams": {
                    "description": "See /hrm/team",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostTeam"
                    }
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostCustomFieldValue"
                    }
                },
                "relation_type": {
                    "$ref": "#/definitions/RelationType"
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "Male",
                        "Female",
                        "Unknown"
                    ]
                },
                "initials": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "family_name_prefix": {
                    "type": "string"
                },
                "family_name": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "date_of_birth": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "website_url": {
                    "type": "string"
                },
                "twitter_url": {
                    "type": "string"
                },
                "linkedin_url": {
                    "type": "string"
                },
                "facebook_url": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                },
                "bank_account": {
                    "type": "string"
                },
                "bank_bic": {
                    "type": "string"
                },
                "invoice_receiver": {
                    "type": "string"
                },
                "mailing_list_email": {
                    "type": "string"
                },
                "mailing_lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PersonMailingList"
                    }
                },
                "is_active": {
                    "type": "boolean"
                }
            }
        },
        "PostTeam": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "value": {
                    "type": "boolean"
                }
            }
        },
        "PutContactPerson": {
            "properties": {
                "is_active": {
                    "type": "boolean"
                },
                "work_function": {
                    "type": "string"
                },
                "work_email": {
                    "type": "string"
                },
                "work_phone": {
                    "type": "string"
                },
                "work_mobile": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                }
            }
        },
        "RelationType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "SbiCode": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "code": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "Timezone": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "CustomField": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "render_type": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "filterable": {
                    "type": "boolean"
                },
                "searchable": {
                    "type": "boolean"
                },
                "mandatory": {
                    "type": "boolean"
                },
                "value_type": {
                    "type": "string",
                    "enum": [
                        "Text",
                        "Integer",
                        "Decimal",
                        "Date",
                        "Time",
                        "DateTime"
                    ]
                },
                "custom_field_group": {
                    "$ref": "#/definitions/CustomFieldGroup"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomFieldOption"
                    }
                }
            }
        },
        "CustomFieldGroup": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "position": {
                    "type": "string"
                },
                "model": {
                    "$ref": "#/definitions/CustomFieldModel"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "CustomFieldModel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "CustomFieldOption": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                }
            }
        },
        "CustomFieldType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "is_mandatory_configurable": {
                    "type": "boolean"
                },
                "is_searchable_configurable": {
                    "type": "boolean"
                },
                "is_filterable_configurable": {
                    "type": "boolean"
                },
                "is_collective_mutatable_configurable": {
                    "type": "boolean"
                }
            }
        },
        "GetCustomField": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "render_type": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "filterable": {
                    "type": "boolean"
                },
                "searchable": {
                    "type": "boolean"
                },
                "mandatory": {
                    "type": "boolean"
                },
                "value_type": {
                    "type": "string",
                    "enum": [
                        "Text",
                        "Integer",
                        "Decimal",
                        "Date",
                        "Time",
                        "DateTime"
                    ]
                },
                "custom_field_group": {
                    "$ref": "#/definitions/CustomFieldGroup"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomFieldOption"
                    }
                }
            }
        },
        "PostCustomFieldValue": {
            "properties": {
                "name": {
                    "description": "The 'name' property found in the custom field definition",
                    "type": "string"
                },
                "value": {
                    "description": "The value for the custom field. Type of value is dependent on the custom field. Can be a string, int, bool, float, or a reference to a customfieldoption:abcd",
                    "type": "string"
                }
            }
        },
        "Document": {
            "properties": {
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "DocumentType": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "can_have_attachment": {
                    "type": "boolean"
                },
                "is_for_crm": {
                    "type": "boolean"
                },
                "is_for_contact": {
                    "type": "boolean"
                },
                "is_for_sale": {
                    "type": "boolean"
                },
                "is_for_debtor": {
                    "type": "boolean"
                },
                "is_for_project": {
                    "type": "boolean"
                },
                "is_for_subscription": {
                    "type": "boolean"
                },
                "is_for_employee": {
                    "type": "boolean"
                },
                "is_for_invoice": {
                    "type": "boolean"
                },
                "is_for_myorganizationprofile": {
                    "type": "boolean"
                },
                "is_blocked": {
                    "type": "boolean"
                },
                "is_visible_on_all": {
                    "type": "boolean"
                }
            }
        },
        "DocumentTypeSimple": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "GetDocument": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "download_url": {
                    "type": "string"
                },
                "document_type": {
                    "$ref": "#/definitions/DocumentTypeSimple"
                },
                "linked_to": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LinkedToEntity"
                    }
                },
                "created_by": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "GetDocumentType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "can_have_attachment": {
                    "type": "boolean"
                },
                "is_for_crm": {
                    "type": "boolean"
                },
                "is_for_contact": {
                    "type": "boolean"
                },
                "is_for_sale": {
                    "type": "boolean"
                },
                "is_for_debtor": {
                    "type": "boolean"
                },
                "is_for_project": {
                    "type": "boolean"
                },
                "is_for_subscription": {
                    "type": "boolean"
                },
                "is_for_employee": {
                    "type": "boolean"
                },
                "is_for_invoice": {
                    "type": "boolean"
                },
                "is_for_myorganizationprofile": {
                    "type": "boolean"
                },
                "is_blocked": {
                    "type": "boolean"
                },
                "is_visible_on_all": {
                    "type": "boolean"
                }
            }
        },
        "PostDocument": {
            "properties": {
                "linked_to": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostDocumentLinkedTo"
                    }
                },
                "document_type_id": {
                    "type": "string"
                },
                "upload_queue_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "PostDocumentLinkedTo": {
            "properties": {
                "sales_id": {
                    "description": "See /sales/sale",
                    "type": "string"
                },
                "project_id": {
                    "description": "See /projects/project",
                    "type": "string"
                },
                "employee_id": {
                    "description": "See /hrm/employee",
                    "type": "string"
                },
                "invoice_id": {
                    "description": "See /invoices/invoice",
                    "type": "string"
                },
                "person_id": {
                    "description": "See /crm/person",
                    "type": "string"
                },
                "organization_id": {
                    "description": "See /crm/organization",
                    "type": "string"
                }
            }
        },
        "PostQuoteTemplate": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "html": {
                    "type": "string"
                },
                "json": {
                    "type": "string"
                }
            }
        },
        "PutDocument": {
            "properties": {
                "document_type_id": {
                    "type": "string"
                },
                "upload_queue_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "QuoteTemplate": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "html": {
                    "type": "string"
                },
                "is_blocked": {
                    "type": "boolean"
                },
                "json": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "EmptyRestResult": {},
        "Filter": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "values": {
                    "type": "array"
                }
            }
        },
        "Approval": {
            "properties": {
                "date": {
                    "type": "string"
                }
            }
        },
        "ApprovalStatus": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "BaseHours": {
            "properties": {
                "source": {
                    "type": "string",
                    "enum": [
                        "schedule",
                        "timer",
                        "timesheet"
                    ]
                },
                "note": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "CalendarItem": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "hours": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "deleted": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "is_recurring": {
                    "type": "boolean"
                },
                "is_read_only": {
                    "type": "boolean"
                },
                "is_time_defined": {
                    "type": "boolean"
                },
                "organizer_email": {
                    "type": "string"
                },
                "private": {
                    "type": "boolean"
                },
                "obfuscate": {
                    "type": "boolean"
                },
                "hours_id": {
                    "type": "string"
                }
            }
        },
        "Correction": {
            "properties": {
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "value": {
                    "type": "number",
                    "format": "float"
                },
                "last_correction_date": {
                    "type": "string"
                }
            }
        },
        "DateTimeRange": {
            "properties": {
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                }
            }
        },
        "ExternalItemMetadata": {
            "properties": {
                "configuration": {
                    "$ref": "#/definitions/ExternalItemMetadataConfiguration"
                },
                "count": {
                    "description": "",
                    "type": "integer"
                },
                "total_count": {
                    "description": "",
                    "type": "integer"
                },
                "offset": {
                    "description": "",
                    "type": "integer"
                },
                "limit": {
                    "description": "",
                    "type": "integer"
                },
                "upper_limit": {
                    "description": "",
                    "type": "integer"
                },
                "nocleanup": {
                    "description": "",
                    "type": "boolean"
                },
                "checksum": {
                    "description": "",
                    "type": "string"
                }
            }
        },
        "ExternalItemMetadataConfiguration": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "has_external_agenda_integration": {
                    "type": "boolean"
                },
                "external_agenda_sync_method": {}
            }
        },
        "GetApproval": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "approvalstatus": {
                    "$ref": "#/definitions/GetApprovalStatus"
                },
                "date": {
                    "type": "string"
                }
            }
        },
        "GetApprovalStatus": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "GetHours": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "project": {
                    "$ref": "#/definitions/GetProjectSimple"
                },
                "projectservice": {
                    "$ref": "#/definitions/GetHoursHoursProjectService"
                },
                "type": {
                    "description": "When record is leave related return leaveType"
                },
                "approvalstatus": {
                    "$ref": "#/definitions/GetApprovalStatus"
                },
                "invoice_status": {
                    "type": "string",
                    "enum": [
                        "flushed",
                        "invoiced",
                        "indirectly"
                    ]
                },
                "invoice_id": {
                    "description": "See /invoices/invoice",
                    "type": "string"
                },
                "invoiceline_id": {
                    "description": "See /invoices/invoice",
                    "type": "string"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetCustomField"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "locked": {
                    "type": "boolean"
                },
                "is_editable": {
                    "$ref": "#/definitions/IsSatisfied"
                },
                "is_deletable": {
                    "$ref": "#/definitions/IsSatisfied"
                },
                "leave_status": {
                    "$ref": "#/definitions/LeaveStatus"
                },
                "leave_id": {
                    "type": "string"
                },
                "absence_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "corrections": {
                    "$ref": "#/definitions/Correction"
                },
                "mileage": {
                    "$ref": "#/definitions/GetMileageSimple"
                },
                "is_productive": {
                    "type": "boolean"
                },
                "hours": {
                    "type": "number",
                    "format": "float"
                },
                "duration_in_minutes": {
                    "type": "integer"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "is_time_defined": {
                    "type": "boolean"
                },
                "is_recurring": {
                    "type": "boolean"
                },
                "recurrence": {
                    "$ref": "#/definitions/Recurrence"
                },
                "is_external": {
                    "type": "boolean"
                },
                "billable": {
                    "type": "boolean"
                },
                "note": {
                    "type": "string"
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "assignment_id": {
                    "type": "string"
                },
                "should_sync_to_cronofy": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string",
                    "enum": [
                        "schedule",
                        "timer",
                        "timesheet"
                    ]
                }
            }
        },
        "GetHoursHoursProjectService": {
            "properties": {
                "id": {
                    "type": "string",
                    "default": "service:abc123"
                },
                "name": {
                    "type": "string"
                },
                "start_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string",
                    "default": "2020-01-01"
                },
                "until_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string",
                    "default": "2020-01-01"
                },
                "default_service_id": {
                    "type": "string",
                    "default": "defaultservice:abc123"
                },
                "revenue_group_id": {
                    "type": "string",
                    "default": "revenuegroup:abc123"
                }
            }
        },
        "GetHoursProjectService": {
            "properties": {
                "id": {
                    "type": "string",
                    "default": "service:abc123"
                },
                "name": {
                    "type": "string"
                },
                "start_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string",
                    "default": "2020-01-01"
                },
                "until_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string",
                    "default": "2020-01-01"
                },
                "purchase_start_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string",
                    "default": "2020-01-01"
                },
                "purchase_end_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string",
                    "default": "2020-01-01"
                }
            }
        },
        "GetHoursSimple": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "hours": {
                    "type": "number",
                    "format": "float"
                },
                "duration_in_minutes": {
                    "type": "integer"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "is_time_defined": {
                    "type": "boolean"
                },
                "is_recurring": {
                    "type": "boolean"
                },
                "recurrence": {
                    "$ref": "#/definitions/Recurrence"
                },
                "is_external": {
                    "type": "boolean"
                },
                "billable": {
                    "type": "boolean"
                },
                "note": {
                    "type": "string"
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "assignment_id": {
                    "type": "string"
                },
                "should_sync_to_cronofy": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string",
                    "enum": [
                        "schedule",
                        "timer",
                        "timesheet"
                    ]
                }
            }
        },
        "GetHoursType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "normal",
                        "leave",
                        "absence"
                    ]
                },
                "billable": {
                    "type": "number",
                    "format": "float"
                },
                "vatclass": {
                    "$ref": "#/definitions/VatClass"
                },
                "label": {
                    "type": "string"
                },
                "tariff": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "GetLeaveType": {
            "properties": {
                "has_workflow": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "normal",
                        "leave",
                        "absence"
                    ]
                },
                "billable": {
                    "type": "number",
                    "format": "float"
                },
                "vatclass": {
                    "$ref": "#/definitions/VatClass"
                },
                "label": {
                    "type": "string"
                },
                "tariff": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "GetProjectServiceCostType": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "costtype": {
                    "$ref": "#/definitions/GetPurchaseType"
                },
                "budgeted_amount": {
                    "type": "number",
                    "format": "float"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_margin": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_tariff": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "GetProjectServiceHoursType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "hourstype": {
                    "$ref": "#/definitions/GetHoursType"
                },
                "color": {
                    "type": "string"
                },
                "budgeted_amount": {
                    "type": "number",
                    "format": "float"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "billable": {
                    "type": "boolean"
                }
            }
        },
        "GetSalesServiceCostType": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "costtype": {
                    "$ref": "#/definitions/GetPurchaseType"
                },
                "budgeted_amount": {
                    "type": "number",
                    "format": "float"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_margin": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_tariff": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "GetSalesServiceHoursType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "hourstype": {
                    "$ref": "#/definitions/GetHoursType"
                },
                "budgeted_amount": {
                    "type": "number",
                    "format": "float"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "billable": {
                    "type": "boolean"
                }
            }
        },
        "GetServiceCostType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "costtype": {
                    "$ref": "#/definitions/GetPurchaseType"
                },
                "budgeted_amount": {
                    "type": "number",
                    "format": "float"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_margin": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_tariff": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "Hours": {
            "properties": {
                "hours": {
                    "type": "number",
                    "format": "float"
                },
                "duration_in_minutes": {
                    "type": "integer"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "is_time_defined": {
                    "type": "boolean"
                },
                "is_recurring": {
                    "type": "boolean"
                },
                "recurrence": {
                    "$ref": "#/definitions/Recurrence"
                },
                "is_external": {
                    "type": "boolean"
                },
                "billable": {
                    "type": "boolean"
                },
                "note": {
                    "type": "string"
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "assignment_id": {
                    "type": "string"
                },
                "should_sync_to_cronofy": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string",
                    "enum": [
                        "schedule",
                        "timer",
                        "timesheet"
                    ]
                }
            }
        },
        "HoursType": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "tariff": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "LeaveStatus": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "MileageType": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "tariff": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "PostApproval": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "approvalstatus_id": {
                    "description": "See /hours/approvalstatus. May also be string 'null' to empty the status id",
                    "type": "string"
                },
                "date": {
                    "type": "string"
                }
            }
        },
        "PostCalendarItem": {
            "properties": {
                "id": {
                    "description": "Calendars' external_uid",
                    "type": "string"
                },
                "location": {
                    "type": "string"
                }
            }
        },
        "PostHours": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "projectservice_id": {
                    "type": "string"
                },
                "type_id": {
                    "type": "string"
                },
                "approvalstatus_id": {
                    "type": "string"
                },
                "external_item": {
                    "$ref": "#/definitions/PostCalendarItem"
                },
                "assignment_id": {
                    "type": "string"
                },
                "address_id": {
                    "type": "string"
                },
                "hours": {
                    "type": "number",
                    "format": "float"
                },
                "duration_in_minutes": {
                    "type": "integer"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "is_time_defined": {
                    "type": "boolean"
                },
                "is_recurring": {
                    "type": "boolean"
                },
                "recurrence": {
                    "$ref": "#/definitions/Recurrence"
                },
                "is_external": {
                    "type": "boolean"
                },
                "billable": {
                    "type": "boolean"
                },
                "note": {
                    "type": "string"
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "should_sync_to_cronofy": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string",
                    "enum": [
                        "schedule",
                        "timer",
                        "timesheet"
                    ]
                }
            }
        },
        "PostHoursType": {
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Work Type"
                    ]
                },
                "vatclass_id": {
                    "description": "See /invoices/vatclass",
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "tariff": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "PostProjectServiceHoursType": {
            "properties": {
                "hourstype_id": {
                    "type": "string"
                },
                "budgeted_amount": {
                    "type": "number",
                    "format": "float"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "billable": {
                    "type": "boolean"
                }
            }
        },
        "PostSubmission": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "start_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string"
                },
                "end_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string"
                }
            }
        },
        "PostTimesheetRow": {},
        "ProjectServiceCostType": {
            "properties": {
                "budgeted_amount": {
                    "type": "number",
                    "format": "float"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_margin": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_tariff": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "ProjectServiceHoursType": {
            "properties": {
                "budgeted_amount": {
                    "type": "number",
                    "format": "float"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "billable": {
                    "type": "boolean"
                }
            }
        },
        "Recurrence": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "rrule": {
                    "$ref": "#/definitions/Rrule"
                },
                "update": {
                    "type": "string"
                }
            }
        },
        "Rrule": {
            "properties": {
                "dtstart": {
                    "type": "string"
                },
                "freq": {
                    "type": "integer"
                },
                "until": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "interval": {
                    "type": "integer"
                },
                "wkst": {
                    "type": "string"
                },
                "byday": {
                    "type": "string"
                },
                "bysetpos": {
                    "type": "string"
                }
            }
        },
        "SalesServiceCostType": {
            "properties": {
                "budgeted_amount": {
                    "type": "number",
                    "format": "float"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_margin": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_tariff": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "SalesServiceHoursType": {
            "properties": {
                "budgeted_amount": {
                    "type": "number",
                    "format": "float"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "billable": {
                    "type": "boolean"
                }
            }
        },
        "ServiceCostType": {
            "properties": {
                "budgeted_amount": {
                    "type": "number",
                    "format": "float"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_margin": {
                    "type": "number",
                    "format": "float"
                },
                "purchase_tariff": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "SubmissionStatus": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "submitted",
                        "yet_to_turn_in",
                        "no_hours"
                    ]
                }
            }
        },
        "Submit": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "start_date": {
                    "description": "Y-m-d, eg. 2017-01-01",
                    "type": "string"
                },
                "end_date": {
                    "description": "Y-m-d, eg. 2017-01-05",
                    "type": "string"
                }
            }
        },
        "GetTimesheetRow": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "project": {
                    "$ref": "#/definitions/GetTimesheetRowProject"
                },
                "project_service": {
                    "$ref": "#/definitions/GetTimesheetRowProjectService"
                },
                "itemtype": {
                    "$ref": "#/definitions/GetTimesheetRowItemtype"
                },
                "person": {
                    "$ref": "#/definitions/GetTimesheetRowPersonRelation"
                },
                "organization": {
                    "$ref": "#/definitions/GetTimesheetRowOrganizationRelation"
                },
                "employee_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "project_service_id": {
                    "type": "string"
                },
                "itemtype_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "hours",
                        "costs",
                        "mileage"
                    ]
                }
            }
        },
        "GetTimesheetRowItemtype": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "unit_name": {
                    "type": "string"
                },
                "is_unit_tariff": {
                    "type": "boolean"
                },
                "is_attachment_allowed": {
                    "type": "boolean"
                },
                "has_workflow": {
                    "type": "boolean"
                }
            }
        },
        "GetTimesheetRowOrganizationRelation": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                }
            }
        },
        "GetTimesheetRowPersonRelation": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "relation_number": {
                    "type": "string"
                }
            }
        },
        "GetTimesheetRowProject": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "project_number": {
                    "type": "string"
                }
            }
        },
        "GetTimesheetRowProjectService": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "until_date": {
                    "type": "string"
                },
                "purchase_start_date": {
                    "type": "string"
                },
                "purchase_end_date": {
                    "type": "string"
                }
            }
        },
        "TimesheetRow": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "project_service_id": {
                    "type": "string"
                },
                "itemtype_id": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "hours",
                        "costs",
                        "mileage"
                    ]
                }
            }
        },
        "Absence": {
            "properties": {
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "AbsenceType": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "CivilStatus": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "Contract": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "boolean"
                },
                "salary_fulltime": {
                    "type": "number",
                    "format": "float"
                },
                "parttime_percentage": {
                    "type": "number",
                    "format": "float"
                },
                "days_off": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "ContractType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                }
            }
        },
        "Employee": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "bank_account": {
                    "type": "string"
                },
                "function": {
                    "type": "string"
                },
                "type": {},
                "employment_status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ]
                },
                "civil_status": {
                    "type": "string"
                },
                "work_phone": {
                    "type": "string"
                },
                "work_mobile": {
                    "type": "string"
                },
                "work_email": {
                    "type": "string"
                },
                "hourly_sales_tariff": {
                    "type": "number",
                    "format": "float"
                },
                "hourly_cost_tariff": {
                    "type": "number",
                    "format": "float"
                },
                "avatar": {
                    "$ref": "#/definitions/Avatar"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "simplicate_url": {
                    "type": "string"
                }
            }
        },
        "EmployeeStatus": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "EmployeeType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "EmploymentType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                }
            }
        },
        "GetAbsence": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "hours": {
                    "type": "integer"
                },
                "absencetype": {
                    "$ref": "#/definitions/GetAbsenceType"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "GetAbsenceType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "GetCivilStatus": {
            "properties": {
                "blocked": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "GetContract": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/GetEmployee"
                },
                "employer": {
                    "$ref": "#/definitions/GetOrganizationSimple"
                },
                "employment_type": {
                    "$ref": "#/definitions/EmploymentType"
                },
                "contract_type": {
                    "$ref": "#/definitions/ContractType"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "boolean"
                },
                "salary_fulltime": {
                    "type": "number",
                    "format": "float"
                },
                "parttime_percentage": {
                    "type": "number",
                    "format": "float"
                },
                "days_off": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "GetEmployee": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "is_user": {
                    "type": "integer"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Team"
                    }
                },
                "supervisor": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "status": {
                    "$ref": "#/definitions/EmployeeStatus"
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetCustomField"
                    }
                },
                "person_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "bank_account": {
                    "type": "string"
                },
                "function": {
                    "type": "string"
                },
                "type": {},
                "employment_status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ]
                },
                "civil_status": {
                    "type": "string"
                },
                "work_phone": {
                    "type": "string"
                },
                "work_mobile": {
                    "type": "string"
                },
                "work_email": {
                    "type": "string"
                },
                "hourly_sales_tariff": {
                    "type": "number",
                    "format": "float"
                },
                "hourly_cost_tariff": {
                    "type": "number",
                    "format": "float"
                },
                "avatar": {
                    "$ref": "#/definitions/Avatar"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "simplicate_url": {
                    "type": "string"
                }
            }
        },
        "GetEmployeeSimple": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "person_id": {
                    "description": "Added in order to comply with the original sales/sales responsible_employee response",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "GetLeave": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "leavetype": {
                    "$ref": "#/definitions/HrmGetLeaveType"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                },
                "hours": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "HrmGetLeaveType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                },
                "affects_balance": {
                    "type": "boolean"
                }
            }
        },
        "GetTeam": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "employees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetEmployeeSimple"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "GetTeamSimple": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "GetTimetable": {
            "properties": {
                "id": {
                    "description": "employee_id, See /hrm/employee",
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "hourly_sales_tariff": {
                    "type": "number",
                    "format": "float"
                },
                "hourly_cost_tariff": {
                    "type": "number",
                    "format": "float"
                },
                "even_week": {
                    "$ref": "#/definitions/TimetableWeek"
                },
                "odd_week": {
                    "$ref": "#/definitions/TimetableWeek"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "productivity_target": {
                    "type": "integer"
                },
                "should_write_hours": {
                    "type": "boolean"
                }
            }
        },
        "Leave": {
            "properties": {
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                },
                "hours": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "LeaveBalance": {
            "properties": {
                "employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "balance": {
                    "type": "number",
                    "format": "float"
                },
                "first_change": {
                    "type": "string"
                },
                "last_change": {
                    "type": "number",
                    "format": "float"
                },
                "year": {
                    "type": "integer"
                },
                "leavetype": {
                    "$ref": "#/definitions/HrmGetLeaveType"
                }
            }
        },
        "LeaveType": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                },
                "affects_balance": {
                    "type": "boolean"
                }
            }
        },
        "PostAbsence": {
            "properties": {
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "string"
                },
                "absence_type_id": {
                    "type": "string"
                },
                "is_time_defined": {
                    "type": "boolean"
                }
            }
        },
        "PostEmployee": {
            "properties": {
                "person_id": {
                    "type": "string"
                },
                "supervisor": {
                    "$ref": "#/definitions/PostEmployeeFk"
                },
                "status": {
                    "$ref": "#/definitions/PostEmployeeStatusFk"
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostCustomFieldValue"
                    }
                }
            }
        },
        "PostEmployeeFk": {
            "properties": {
                "id": {
                    "type": "string",
                    "default": "employee:abc"
                }
            }
        },
        "PostEmployeeStatusFk": {
            "properties": {
                "id": {
                    "type": "string",
                    "default": "employeestatus:abc"
                }
            }
        },
        "PostLeave": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "leave_type_id": {
                    "type": "string"
                },
                "is_time_defined": {
                    "type": "boolean"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                },
                "hours": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "HrmPostTeam": {
            "properties": {
                "employee_ids": {
                    "type": "array"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "PostTimetable": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "has_odd_weeks": {
                    "type": "boolean"
                },
                "even_week": {
                    "$ref": "#/definitions/TimetableWeek"
                },
                "odd_week": {
                    "$ref": "#/definitions/TimetableWeek"
                },
                "end_date": {
                    "type": "string"
                },
                "productivity_target": {
                    "type": "integer"
                },
                "should_write_hours": {
                    "type": "boolean"
                }
            }
        },
        "PutEmployee": {
            "properties": {
                "person_id": {
                    "type": "string"
                },
                "supervisor": {
                    "$ref": "#/definitions/PostEmployeeFk"
                },
                "status": {
                    "$ref": "#/definitions/PostEmployeeStatusFk"
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostCustomFieldValue"
                    }
                }
            }
        },
        "PutTimetable": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "has_odd_weeks": {
                    "type": "boolean"
                },
                "even_week": {
                    "$ref": "#/definitions/TimetableWeek"
                },
                "odd_week": {
                    "$ref": "#/definitions/TimetableWeek"
                },
                "end_date": {
                    "type": "string"
                },
                "productivity_target": {
                    "type": "integer"
                },
                "should_write_hours": {
                    "type": "boolean"
                }
            }
        },
        "Team": {
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "Timetable": {
            "properties": {
                "even_week": {
                    "$ref": "#/definitions/TimetableWeek"
                },
                "odd_week": {
                    "$ref": "#/definitions/TimetableWeek"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "productivity_target": {
                    "type": "integer"
                },
                "should_write_hours": {
                    "type": "boolean"
                }
            }
        },
        "TimetableWeek": {
            "properties": {
                "day_1": {
                    "$ref": "#/definitions/TimetableWeekDay"
                },
                "day_2": {
                    "$ref": "#/definitions/TimetableWeekDay"
                },
                "day_3": {
                    "$ref": "#/definitions/TimetableWeekDay"
                },
                "day_4": {
                    "$ref": "#/definitions/TimetableWeekDay"
                },
                "day_5": {
                    "$ref": "#/definitions/TimetableWeekDay"
                },
                "day_6": {
                    "$ref": "#/definitions/TimetableWeekDay"
                },
                "day_7": {
                    "$ref": "#/definitions/TimetableWeekDay"
                }
            }
        },
        "TimetableWeekDay": {
            "properties": {
                "start_time": {
                    "type": "number",
                    "format": "float"
                },
                "end_time": {
                    "type": "number",
                    "format": "float"
                },
                "hours": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "EmailAttachment": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "file_path": {
                    "type": "string"
                }
            }
        },
        "EmailMessage": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "sent_at": {
                    "type": "string"
                },
                "received_at": {
                    "type": "string"
                },
                "sender": {
                    "type": "string"
                },
                "recipients": {
                    "type": "string"
                },
                "cc_recipients": {
                    "type": "string"
                },
                "bcc_recipients": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "html_message": {
                    "type": "string"
                },
                "html_body": {
                    "type": "string"
                },
                "plain_text": {
                    "type": "string"
                },
                "attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EmailAttachment"
                    }
                },
                "linked_to": {
                    "description": "",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LinkedToEntity"
                    }
                }
            }
        },
        "Inbox": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/Employee"
                },
                "label": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "GetInvoice": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "payment_term": {
                    "$ref": "#/definitions/PaymentTerm"
                },
                "invoice_lines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetInvoiceLine"
                    }
                },
                "invoice_number": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Concept",
                        "Sent",
                        "Overdue",
                        "Paid"
                    ]
                },
                "total_excluding_vat": {
                    "type": "number",
                    "format": "float"
                },
                "total_vat": {
                    "type": "number",
                    "format": "float"
                },
                "total_including_vat": {
                    "type": "number",
                    "format": "float"
                },
                "total_outstanding": {
                    "type": "number",
                    "format": "float"
                },
                "organization": {
                    "$ref": "#/definitions/GetOrganizationSimple"
                },
                "person": {
                    "$ref": "#/definitions/GetPersonSimple"
                },
                "my_organization_profile": {
                    "$ref": "#/definitions/GetMyOrganizationProfileSimple"
                },
                "subscription_cycle": {
                    "$ref": "#/definitions/SubscriptionCycle"
                },
                "project": {
                    "$ref": "#/definitions/GetProjectSimple"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetProjectSimple"
                    }
                },
                "sending_method": {
                    "type": "string",
                    "enum": [
                        "post",
                        "email"
                    ]
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "simplicate_url": {
                    "type": "string"
                },
                "reminder": {
                    "$ref": "#/definitions/GetInvoiceReminder"
                },
                "composition_type": {
                    "type": "string",
                    "enum": [
                        "lines",
                        "service"
                    ]
                },
                "my_organization_profile_id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "reference": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                }
            }
        },
        "GetInvoiceLine": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "revenue_group": {
                    "$ref": "#/definitions/RevenueGroup"
                },
                "default_service_id": {
                    "type": "string"
                },
                "vat_class": {
                    "$ref": "#/definitions/VatClass"
                },
                "total_vat": {
                    "type": "number",
                    "format": "float"
                },
                "service_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "GetInvoiceReminder": {
            "properties": {
                "set": {
                    "$ref": "#/definitions/ReminderSet"
                },
                "status": {
                    "type": "string"
                },
                "paused": {
                    "type": "boolean"
                },
                "next_action": {
                    "type": "string"
                }
            }
        },
        "GetInvoiceSimple": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "invoice_number": {
                    "type": "string"
                },
                "invoice_date": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/InvoiceStatus"
                }
            }
        },
        "GetPayment": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "invoice_id": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "GetPaymentTerm": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "days": {
                    "type": "integer"
                },
                "method": {
                    "type": "string",
                    "enum": [
                        "Direct Debit",
                        "Bank Transfer",
                        "Cash"
                    ]
                }
            }
        },
        "GetProposition": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "total_hours": {
                    "type": "number",
                    "format": "float"
                },
                "total_mileage": {
                    "type": "number",
                    "format": "float"
                },
                "total_fixed": {
                    "type": "number",
                    "format": "float"
                },
                "total_terms": {
                    "type": "number",
                    "format": "float"
                },
                "total_purchase": {
                    "type": "number",
                    "format": "float"
                },
                "total_advance_deposit": {
                    "type": "number",
                    "format": "float"
                },
                "total_future": {
                    "type": "number",
                    "format": "float"
                },
                "simplicate_url": {
                    "type": "string"
                },
                "project": {
                    "$ref": "#/definitions/GetProjectSimple"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "GetReminderSet": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReminderSetTemplate"
                    }
                },
                "label": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                }
            }
        },
        "GetReminderSetSimple": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                }
            }
        },
        "Invoice": {
            "properties": {
                "my_organization_profile_id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "reference": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                }
            }
        },
        "InvoiceLine": {
            "properties": {
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "InvoiceStatus": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "InvoiceTemplate": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "hide_amount": {
                    "type": "boolean"
                },
                "hide_price": {
                    "type": "boolean"
                },
                "footer_normal": {
                    "type": "string"
                },
                "footer_directdebit": {
                    "type": "string"
                },
                "default_note": {
                    "type": "string"
                }
            }
        },
        "Journal": {
            "properties": {
                "journalize_date": {
                    "type": "string"
                },
                "invoice_date": {
                    "type": "string"
                },
                "invoice_number": {
                    "type": "string"
                },
                "due_date": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "relation_id": {
                    "type": "string"
                },
                "amount_excl": {
                    "type": "number",
                    "format": "float"
                },
                "amount_incl": {
                    "type": "number",
                    "format": "float"
                },
                "autocollect": {
                    "type": "boolean"
                },
                "revenuegroup": {
                    "$ref": "#/definitions/RevenueGroup"
                },
                "journal_lines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JournalLine"
                    }
                },
                "vat": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/JournalVat"
                    }
                }
            }
        },
        "JournalLine": {
            "properties": {
                "vat_id": {
                    "type": "string"
                },
                "vat_included": {
                    "type": "boolean"
                },
                "vat_percentage": {
                    "type": "number",
                    "format": "float"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "quantity": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "JournalVat": {
            "properties": {
                "vat_id": {
                    "type": "string"
                },
                "amount_vat": {
                    "type": "number",
                    "format": "float"
                },
                "amount_excl": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "Payment": {
            "properties": {
                "invoice_id": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "PaymentTerm": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "days": {
                    "type": "integer"
                },
                "method": {
                    "type": "string",
                    "enum": [
                        "Direct Debit",
                        "Bank Transfer",
                        "Cash"
                    ]
                }
            }
        },
        "PostInvoice": {
            "properties": {
                "payment_term_id": {
                    "type": "string"
                },
                "invoice_lines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostInvoiceLine"
                    }
                },
                "status_id": {
                    "type": "string"
                },
                "my_organization_profile_id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "reference": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                }
            }
        },
        "PostInvoiceLine": {
            "properties": {
                "vat_class_id": {
                    "type": "string"
                },
                "revenue_group_id": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "PostVatClassFk": {
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "Proposition": {},
        "ReminderSet": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "disabled": {
                    "type": "boolean"
                }
            }
        },
        "ReminderSetTemplate": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "send_after": {
                    "type": "integer"
                },
                "position": {
                    "type": "integer"
                }
            }
        },
        "ReminderTemplate": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "attach_invoice": {
                    "type": "boolean"
                }
            }
        },
        "SubscriptionCycle": {
            "properties": {
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "is_invoiced": {
                    "type": "boolean"
                }
            }
        },
        "VatClass": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "percentage": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "PostMerger": {
            "properties": {
                "source_id": {
                    "type": "string"
                },
                "target_id": {
                    "type": "string"
                }
            }
        },
        "PostMergerCompare": {
            "properties": {
                "swap_lock": {
                    "type": "boolean"
                },
                "source_id": {
                    "type": "string"
                },
                "target_id": {
                    "type": "string"
                }
            }
        },
        "ResultMergerMerge": {
            "properties": {
                "success": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "ResultPostMergerCompare": {
            "properties": {
                "is_valid": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "swap_lock": {
                    "type": "boolean"
                },
                "source_id": {
                    "type": "string"
                },
                "target_id": {
                    "type": "string"
                }
            }
        },
        "MetaData": {
            "properties": {
                "count": {
                    "description": "",
                    "type": "integer"
                },
                "total_count": {
                    "description": "",
                    "type": "integer"
                },
                "offset": {
                    "description": "",
                    "type": "integer"
                },
                "limit": {
                    "description": "",
                    "type": "integer"
                },
                "upper_limit": {
                    "description": "",
                    "type": "integer"
                },
                "nocleanup": {
                    "description": "",
                    "type": "boolean"
                },
                "checksum": {
                    "description": "",
                    "type": "string"
                }
            }
        },
        "GetMileage": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "project": {
                    "$ref": "#/definitions/GetProjectSimple"
                },
                "type": {
                    "$ref": "#/definitions/GetHoursType"
                },
                "approvalstatus": {
                    "$ref": "#/definitions/GetApprovalStatus"
                },
                "invoice_status": {
                    "type": "string",
                    "enum": [
                        "flushed",
                        "invoiced",
                        "indirectly"
                    ]
                },
                "invoice_id": {
                    "description": "See /invoices/invoice",
                    "type": "string"
                },
                "invoiceline_id": {
                    "description": "See /invoices/invoice",
                    "type": "string"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "vatclass": {
                    "$ref": "#/definitions/VatClass"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "mileage": {
                    "type": "number",
                    "format": "float"
                },
                "related_hours_id": {
                    "type": "string"
                },
                "source": {
                    "type": "string",
                    "enum": [
                        "schedule",
                        "timer",
                        "timesheet"
                    ]
                },
                "note": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "GetMileageSimple": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "mileage": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "Mileage": {
            "properties": {
                "mileage": {
                    "type": "number",
                    "format": "float"
                },
                "related_hours_id": {
                    "type": "string"
                },
                "source": {
                    "type": "string",
                    "enum": [
                        "schedule",
                        "timer",
                        "timesheet"
                    ]
                },
                "note": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "PostMileage": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "approvalstatus_id": {
                    "type": "string"
                },
                "mileage": {
                    "type": "number",
                    "format": "float"
                },
                "related_hours_id": {
                    "type": "string"
                },
                "source": {
                    "type": "string",
                    "enum": [
                        "schedule",
                        "timer",
                        "timesheet"
                    ]
                },
                "note": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "PutMileage": {
            "properties": {
                "approvalstatus_id": {
                    "type": "string"
                },
                "mileage": {
                    "type": "number",
                    "format": "float"
                },
                "related_hours_id": {
                    "type": "string"
                },
                "source": {
                    "type": "string",
                    "enum": [
                        "schedule",
                        "timer",
                        "timesheet"
                    ]
                },
                "note": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "PkRestResult": {
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "Assignment": {
            "properties": {
                "name": {
                    "type": "string",
                    "default": "Website Design Assignment"
                },
                "use_spread": {
                    "type": "boolean"
                },
                "hours_type": {
                    "type": "string",
                    "enum": [
                        "per_week",
                        "total"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "AssignmentBudget": {
            "properties": {
                "assignment_id": {
                    "type": "string"
                },
                "range_start": {
                    "type": "string",
                    "default": "2020-02-03"
                },
                "budget_range_start": {
                    "type": "string"
                },
                "range_end": {
                    "type": "string",
                    "default": "2020-02-10"
                },
                "budget_range_end": {
                    "type": "string"
                },
                "planned_amount": {
                    "description": "Planned amount for either given week or the rest of the assignment duration. Returns float by default; if 'experimental' header is sent, returns string using ISO 8601 duration format."
                },
                "spent_amount": {
                    "description": "Spent amount in given range. Returns float by default; if 'experimental' header is sent, returns string using ISO 8601 duration format."
                },
                "hours_type": {
                    "type": "string",
                    "enum": [
                        "per_week",
                        "total"
                    ]
                }
            }
        },
        "AssignmentBudgetInfo": {
            "properties": {
                "id": {
                    "type": "string",
                    "default": "assignmentbudget:abc"
                },
                "assignmentsPlanned": {
                    "$ref": "#/definitions/AssignmentBudgetInfoFuturePast"
                },
                "assignmentsUnplanned": {
                    "type": "string",
                    "default": "PT28H45M"
                },
                "assignmentsHoursWritten": {
                    "$ref": "#/definitions/AssignmentBudgetInfoFuturePast"
                },
                "itemtypesHoursWritten": {
                    "$ref": "#/definitions/AssignmentBudgetInfoFuturePast"
                },
                "assignmentsHoursCorrections": {
                    "$ref": "#/definitions/AssignmentBudgetInfoFuturePast"
                },
                "itemtypesHoursCorrections": {
                    "$ref": "#/definitions/AssignmentBudgetInfoFuturePast"
                }
            }
        },
        "AssignmentBudgetInfoFuturePast": {
            "properties": {
                "past": {
                    "type": "string",
                    "default": "-PT1H30M"
                },
                "future": {
                    "type": "string",
                    "default": "PT15M"
                }
            }
        },
        "AssignmentBudgetInfoMetaData": {
            "properties": {
                "untilAndIncludingDate": {
                    "type": "string",
                    "default": "2020-02-03"
                },
                "count": {
                    "description": "",
                    "type": "integer"
                },
                "total_count": {
                    "description": "",
                    "type": "integer"
                },
                "offset": {
                    "description": "",
                    "type": "integer"
                },
                "limit": {
                    "description": "",
                    "type": "integer"
                },
                "upper_limit": {
                    "description": "",
                    "type": "integer"
                },
                "nocleanup": {
                    "description": "",
                    "type": "boolean"
                },
                "checksum": {
                    "description": "",
                    "type": "string"
                }
            }
        },
        "AssignmentStatus": {
            "properties": {
                "name": {
                    "type": "string",
                    "example": "To Do"
                },
                "color": {
                    "type": "string",
                    "example": "#000000"
                },
                "is_done": {
                    "type": "boolean"
                },
                "is_blocked": {
                    "type": "boolean"
                },
                "order": {
                    "type": "integer"
                }
            }
        },
        "Budget": {
            "properties": {
                "hours": {
                    "$ref": "#/definitions/BudgetHours"
                },
                "costs": {
                    "$ref": "#/definitions/BudgetCosts"
                },
                "total": {
                    "$ref": "#/definitions/BudgetTotal"
                }
            }
        },
        "BudgetCosts": {
            "properties": {
                "value_budget": {
                    "type": "number",
                    "format": "float"
                },
                "value_spent": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "BudgetHours": {
            "properties": {
                "amount_budget": {
                    "type": "number",
                    "format": "float"
                },
                "amount_spent": {
                    "type": "number",
                    "format": "float"
                },
                "value_budget": {
                    "type": "number",
                    "format": "float"
                },
                "value_spent": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "BudgetTotal": {
            "properties": {
                "value_budget": {
                    "type": "number",
                    "format": "float"
                },
                "value_spent": {
                    "type": "number",
                    "format": "float"
                },
                "value_invoiced": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "DuplicateProjectService": {},
        "GetAssignment": {
            "properties": {
                "id": {
                    "type": "string",
                    "default": "assignment:abc"
                },
                "start_date": {
                    "type": "string",
                    "default": "2032-01-01"
                },
                "end_date": {
                    "type": "string",
                    "default": "2032-12-31"
                },
                "hours_total": {
                    "type": "number",
                    "format": "float"
                },
                "hours": {
                    "type": "number",
                    "format": "float"
                },
                "hours_type": {
                    "type": "string",
                    "default": "total"
                },
                "spread": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "status": {
                    "$ref": "#/definitions/GetAssignmentStatus"
                },
                "project": {
                    "$ref": "#/definitions/GetProjectSimple"
                },
                "projectservice": {
                    "$ref": "#/definitions/GetProjectServiceSimple"
                },
                "projecthourstype": {
                    "$ref": "#/definitions/GetProjectServiceHoursType"
                },
                "employees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetEmployeeSimple"
                    }
                },
                "spent_amount": {
                    "type": "string"
                },
                "is_planned": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "default": "Website Design Assignment"
                },
                "use_spread": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "GetAssignmentSimple": {
            "properties": {
                "id": {
                    "type": "string",
                    "default": "assignment:abc"
                },
                "name": {
                    "type": "string",
                    "default": "Website Design Assignment"
                }
            }
        },
        "GetAssignmentStatus": {
            "properties": {
                "id": {
                    "type": "string",
                    "default": "assignmentstatus:abc"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "To Do"
                },
                "color": {
                    "type": "string",
                    "example": "#000000"
                },
                "is_done": {
                    "type": "boolean"
                },
                "is_blocked": {
                    "type": "boolean"
                },
                "order": {
                    "type": "integer"
                }
            }
        },
        "GetProject": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "project_manager": {
                    "description": "",
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "project_status": {
                    "$ref": "#/definitions/ProjectStatus"
                },
                "hours_rate_type": {
                    "type": "string"
                },
                "abnormal_address": {
                    "type": "boolean"
                },
                "abnormal_person_id": {
                    "type": "string"
                },
                "abnormal_organization_id": {
                    "type": "string"
                },
                "organization": {
                    "$ref": "#/definitions/GetOrganizationSimple"
                },
                "person": {
                    "$ref": "#/definitions/GetPersonSimple"
                },
                "separate_invoice_recipient": {
                    "$ref": "#/definitions/GetSeparateInvoiceRecipient"
                },
                "contact": {
                    "$ref": "#/definitions/GetContactSimple"
                },
                "my_organization_profile": {
                    "$ref": "#/definitions/GetMyOrganizationProfileSimple"
                },
                "divergent_payment_term": {
                    "$ref": "#/definitions/GetPaymentTerm"
                },
                "employees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetEmployeeSimple"
                    }
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetTeamSimple"
                    }
                },
                "budget": {
                    "$ref": "#/definitions/Budget"
                },
                "abnormal_contact_id": {
                    "type": "string"
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetCustomField"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "simplicate_url": {
                    "type": "string"
                },
                "is_reverse_billing": {
                    "type": "boolean"
                },
                "is_invoice_approval": {
                    "type": "boolean"
                },
                "copied_from_project": {
                    "$ref": "#/definitions/GetProjectSimple"
                },
                "my_organization_profile_id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "billable": {
                    "type": "boolean"
                },
                "can_register_mileage": {
                    "type": "boolean"
                },
                "project_number": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "invoice_reference": {
                    "type": "string"
                }
            }
        },
        "GetProjectService": {
            "properties": {
                "project_id": {
                    "type": "string"
                },
                "related_service_id": {
                    "type": "string"
                },
                "expected_invoice_date": {
                    "type": "string"
                },
                "invoice_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "hour_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetProjectServiceHoursType"
                    }
                },
                "cost_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetProjectServiceCostType"
                    }
                },
                "vat_class": {
                    "$ref": "#/definitions/VatClass"
                },
                "revenue_group": {
                    "$ref": "#/definitions/RevenueGroup"
                },
                "invoice_in_installments": {
                    "type": "boolean"
                },
                "installments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Installment"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "budget_financial_hours": {
                    "type": "string"
                },
                "write_hours_start_date": {
                    "type": "string"
                },
                "write_hours_end_date": {
                    "type": "string"
                },
                "service_number": {
                    "type": "string"
                },
                "use_in_resource_planner": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "subscription_cycle": {
                    "type": "string",
                    "enum": [
                        "Month",
                        "Quarter",
                        "Half_a_year",
                        "Year"
                    ]
                },
                "budget": {
                    "type": "number",
                    "format": "float"
                },
                "default_service_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "explanation": {
                    "type": "string"
                },
                "invoice_method": {
                    "type": "string",
                    "enum": [
                        "Hours",
                        "FixedFee",
                        "Subscription"
                    ]
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "track_hours": {
                    "type": "boolean"
                },
                "track_cost": {
                    "type": "boolean"
                }
            }
        },
        "GetProjectServiceSimple": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "default_service_id": {
                    "type": "string"
                },
                "revenue_group_id": {
                    "type": "string"
                },
                "use_in_resource_planner": {
                    "type": "boolean"
                }
            }
        },
        "GetProjectSimple": {
            "properties": {
                "id": {
                    "type": "string",
                    "default": "project:abc"
                },
                "name": {
                    "type": "string",
                    "default": "My Project Name"
                },
                "project_number": {
                    "type": "string",
                    "default": "P1000A"
                },
                "organization": {
                    "$ref": "#/definitions/GetOrganizationSimple"
                },
                "person": {
                    "$ref": "#/definitions/GetPersonSimple"
                },
                "project_manager": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "separate_invoice_recipient": {},
                "has_register_mileage_enabled": {
                    "type": "boolean"
                }
            }
        },
        "GetPurchaseType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "is_unit_tariff": {
                    "type": "boolean"
                },
                "unit_name": {
                    "type": "string"
                },
                "is_attachment_allowed": {
                    "type": "boolean"
                }
            }
        },
        "PostAssignment": {
            "properties": {
                "start_date": {
                    "type": "string",
                    "default": "2032-01-01"
                },
                "end_date": {
                    "type": "string",
                    "default": "2032-12-31"
                },
                "projecthourstype_id": {
                    "type": "string",
                    "default": "hourstype:abc"
                },
                "employees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostEmployeeFk"
                    }
                },
                "status_id": {
                    "type": "string",
                    "default": "assignmentstatus:abc"
                },
                "name": {
                    "type": "string",
                    "default": "Website Design Assignment"
                },
                "use_spread": {
                    "type": "boolean"
                },
                "hours_type": {
                    "type": "string",
                    "enum": [
                        "per_week",
                        "total"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "PostProject": {
            "properties": {
                "project_manager_id": {
                    "description": "'id' found in 'hrm/employee'",
                    "type": "string"
                },
                "project_status_id": {
                    "description": "'id' found in 'projects/projectstatus'",
                    "type": "string"
                },
                "separate_invoice_recipient": {
                    "$ref": "#/definitions/PostSeparateInvoiceRecipient"
                },
                "divergent_payment_term_id": {
                    "description": "See /invoices/paymentterm. If you want to unset, please provide string value 'null'",
                    "type": "string"
                },
                "teams": {
                    "description": "See /hrm/team",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostTeam"
                    }
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostCustomFieldValue"
                    }
                },
                "my_organization_profile_id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "billable": {
                    "type": "boolean"
                },
                "can_register_mileage": {
                    "type": "boolean"
                },
                "project_number": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "invoice_reference": {
                    "type": "string"
                }
            }
        },
        "PostProjectService": {
            "properties": {
                "project_id": {
                    "type": "string"
                },
                "use_in_resource_planner": {
                    "type": "boolean"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "description": "The date de service ends or the date which this service can be invoiced",
                    "type": "string"
                },
                "write_hours_start_date": {
                    "description": "The date from where hours can be registered",
                    "type": "string"
                },
                "write_hours_end_date": {
                    "description": "The date until which hours can be registered",
                    "type": "string"
                },
                "vat_class_id": {
                    "description": "See /invoices/vatclass",
                    "type": "string"
                },
                "revenue_group_id": {
                    "description": "See /sales/revenuegroup",
                    "type": "string"
                },
                "invoice_method": {
                    "type": "string",
                    "enum": [
                        "FixedFee"
                    ]
                },
                "hour_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostProjectServiceHoursType"
                    }
                },
                "default_service_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "explanation": {
                    "type": "string"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "track_hours": {
                    "type": "boolean"
                },
                "track_cost": {
                    "type": "boolean"
                }
            }
        },
        "PostPurchaseType": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "is_unit_tariff": {
                    "type": "boolean"
                },
                "unit_name": {
                    "type": "string"
                },
                "is_attachment_allowed": {
                    "type": "boolean"
                }
            }
        },
        "Project": {
            "properties": {
                "my_organization_profile_id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "billable": {
                    "type": "boolean"
                },
                "can_register_mileage": {
                    "type": "boolean"
                },
                "project_number": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "invoice_reference": {
                    "type": "string"
                }
            }
        },
        "ProjectAssignmentDeleteResultRest": {
            "properties": {
                "assignment_id": {},
                "is_deleted": {
                    "type": "boolean"
                }
            }
        },
        "ProjectEmployee": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "string"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "ProjectManager": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "person_id": {
                    "description": "Added in order to comply with the original sales/sales responsible_employee response",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ProjectStatus": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "Purchase": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "organization": {
                    "$ref": "#/definitions/GetOrganizationSimple"
                },
                "person": {
                    "$ref": "#/definitions/GetPersonSimple"
                },
                "supplier": {
                    "type": "string"
                },
                "invoice_number": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "purchase",
                        "cost/expenses",
                        "import"
                    ]
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetProjectSimple"
                    }
                }
            }
        },
        "PurchaseType": {
            "properties": {
                "label": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "tariff": {
                    "type": "number",
                    "format": "float"
                },
                "is_unit_tariff": {
                    "type": "boolean"
                },
                "unit_name": {
                    "type": "string"
                },
                "is_attachment_allowed": {
                    "type": "boolean"
                }
            }
        },
        "PutAssignment": {
            "properties": {
                "employees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostEmployeeFk"
                    }
                },
                "status_id": {
                    "type": "string",
                    "default": "assignmentstatus:abc"
                },
                "name": {
                    "type": "string",
                    "default": "Website Design Assignment"
                },
                "use_spread": {
                    "type": "boolean"
                },
                "hours_type": {
                    "type": "string",
                    "enum": [
                        "per_week",
                        "total"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "PutProjectService": {
            "properties": {
                "vat_class_id": {
                    "description": "See /invoices/vatclass",
                    "type": "string"
                },
                "revenue_group_id": {
                    "description": "See /sales/revenuegroup",
                    "type": "string"
                },
                "invoice_method": {
                    "type": "string",
                    "enum": [
                        "FixedFee"
                    ]
                },
                "hour_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostProjectServiceHoursType"
                    }
                },
                "default_service_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "explanation": {
                    "type": "string"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "track_hours": {
                    "type": "boolean"
                },
                "track_cost": {
                    "type": "boolean"
                }
            }
        },
        "ReverseInvoice": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "open",
                        "concept",
                        "invoiced"
                    ]
                },
                "date": {
                    "type": "string"
                },
                "invoice_number": {
                    "type": "string"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "project": {
                    "$ref": "#/definitions/GetProjectSimple"
                },
                "invoice": {
                    "$ref": "#/definitions/GetInvoiceSimple"
                }
            }
        },
        "AppReceiverSetting": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "AppReceivers": {
            "properties": {
                "type": {
                    "type": "string"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AppReceiverSetting"
                    }
                }
            }
        },
        "RestBatchValidationError": {
            "properties": {
                "error": {
                    "$ref": "#/definitions/RestError"
                },
                "submitted_data": {}
            }
        },
        "RestError": {
            "properties": {
                "code": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Validation",
                        "Database",
                        "Server"
                    ]
                },
                "message": {
                    "type": "string"
                },
                "translated_message": {
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                }
            }
        },
        "RestResultApps": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/App"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultApp": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/App"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultLogs": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Log"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultLog": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Log"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCustomFieldGroups": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomFieldGroup"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCustomFieldGroup": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/CustomFieldGroup"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCustomFields": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomField"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCustomField": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/CustomField"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultServiceGroups": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceGroup"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultServiceGroup": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/ServiceGroup"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSettings": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Setting"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSetting": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Setting"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultAdministrations": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Administration"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultAdministration": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Administration"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultMyOrganizationProfiles": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MyOrganizationProfile"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultMyOrganizationProfile": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/MyOrganizationProfile"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultContacts": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Contact"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultContact": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Contact"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultOrganizations": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetOrganization"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultOrganization": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetOrganization"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultPersons": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetPerson"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultPerson": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetPerson"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultRelations": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Relation"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultRelation": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Relation"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultRelationTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RelationType"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultRelationType": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/RelationType"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCountries": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Country"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCountry": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Country"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultGenders": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Gender"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultGender": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Gender"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTimetables": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetTimetable"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTimetable": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetTimetable"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultContractTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContractType"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultContractType": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/ContractType"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultEmploymentTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EmploymentType"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultEmploymentType": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/EmploymentType"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultEmployeeTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EmployeeType"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultEmployeeType": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/EmployeeType"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCivilStatuses": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetCivilStatus"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCivilStatus": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetCivilStatus"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultOrganizationSizes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationSize"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultOrganizationSize": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/OrganizationSize"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultContracts": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Contract"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultContract": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Contract"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTeams": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Team"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTeam": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Team"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultIndustries": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Industry"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultIndustry": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Industry"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultInterests": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Interest"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultInterest": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Interest"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultEmployees": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Employee"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultEmployee": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Employee"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultInvoices": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetInvoice"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultInvoice": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetInvoice"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultInvoiceStatuses": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InvoiceStatus"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultInvoiceStatus": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/InvoiceStatus"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultJournals": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Journal"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultJournal": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Journal"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultPayments": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetPayment"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultPayment": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetPayment"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultPaymentTerms": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetPaymentTerm"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultPaymentTerm": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetPaymentTerm"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTojournalizes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tojournalize"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTojournalize": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Tojournalize"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultVatClasses": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/VatClass"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultVatClass": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/VatClass"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProjects": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetProject"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProject": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetProject"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProjectEmployees": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProjectEmployee"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProjectEmployee": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/ProjectEmployee"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProjectStatusses": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProjectStatus"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProjectStatus": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/ProjectStatus"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProjectServices": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetProjectService"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProjectService": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetProjectService"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultPurchaseTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetPurchaseType"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultPurchaseType": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetPurchaseType"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultServices": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetService"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultService": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetService"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSalesServices": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetSalesService"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSalesService": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetSalesService"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultDefaultServices": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetDefaultService"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultDefaultService": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetDefaultService"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultWorkflows": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Workflow"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultWorkflow": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Workflow"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultWorkflowItems": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WorkflowItem"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultWorkflowItem": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/WorkflowItem"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultWorkflowItemTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/WorkflowItemType"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultWorkflowItemType": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/WorkflowItemType"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTasks": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Task"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTask": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Task"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSales": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetSales"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSale": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetSales"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultRevenueGroups": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RevenueGroup"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultRevenueGroup": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/RevenueGroup"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSalesProgresses": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SalesProgress"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSalesProgress": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/SalesProgress"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSalesSources": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SalesSource"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSalesSource": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/SalesSource"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSalesStatusses": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SalesStatus"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSalesStatus": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/SalesStatus"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultHours": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetHours"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultHour": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetHours"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTimers": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetTimer"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTimer": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetTimer"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultHourTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HoursType"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultHourType": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/HoursType"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultLeaveMultiple": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetLeave"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultLeave": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetLeave"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultLeaveBalances": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LeaveBalance"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultLeaveTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LeaveType"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultLeaveType": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/LeaveType"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTimelineMessage": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetMessage"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTimelineMessages": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetMessage"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTimelineMessageType": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/MessageType"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultTimelineMessageTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MessageType"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSalesProgressHistory": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/SalesProgressHistory"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSalesProgressHistories": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SalesProgressHistory"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultApplicationSetting": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/ApplicationSetting"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultApplicationSettings": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ApplicationSetting"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultApplicationFeature": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/ApplicationSetting"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultApplicationFeatures": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ApplicationFeature"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultDebtorList": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/DebtorList"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultMileageList": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetMileage"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultMileage": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetMileage"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultApprovalStatus": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetApprovalStatus"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultApprovalStatusList": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetApprovalStatus"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultApproval": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetApproval"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultApprovals": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetApproval"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultDocumentType": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetDocumentType"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultDocumentTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetDocumentType"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultDocument": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetDocument"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultDocuments": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetDocument"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultMergerCompare": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/ResultPostMergerCompare"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultMerger": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/ResultMergerMerge"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSalesReasons": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ResultSalesReason"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSalesReason": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/ResultSalesReason"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultContactPersons": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetContactPerson"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultContactPerson": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetContactPerson"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSharedItems": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetSharedItem"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultSharedItem": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetSharedItem"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCustomFieldModels": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomFieldModel"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCustomFieldModel": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/CustomFieldModel"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCustomFieldTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomFieldType"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCustomFieldType": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/CustomFieldType"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCustomFieldOptions": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CustomFieldOption"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCustomFieldOption": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/CustomFieldOption"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultCache": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Cache"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultPropositions": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetProposition"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProposition": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetProposition"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultReminderSets": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetReminderSet"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultReminderSet": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetReminderSet"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultReminderTemplates": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReminderTemplate"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultReminderTemplate": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/ReminderTemplate"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultPurchases": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Purchase"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultPurchase": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Purchase"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultReverseInvoices": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ReverseInvoice"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultReverseInvoice": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/ReverseInvoice"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultQuoteTemplates": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QuoteTemplate"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultQuoteTemplate": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/QuoteTemplate"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultQuotes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetQuote"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultQuote": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetQuote"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultQuoteStatuses": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QuoteStatus"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultQuoteStatus": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/QuoteStatus"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProjectAssignments": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetAssignment"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProjectAssignment": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetAssignment"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProjectAssignmentStatuses": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetAssignmentStatus"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProjectAssignmentStatus": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetAssignmentStatus"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultEmployeeExpenseList": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Expense"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultEmployeeExpense": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/Expense"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultProjectAssignmentbudget": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AssignmentBudget"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultAbsenceMultiple": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetAbsence"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultAbsence": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/GetAbsence"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultAbsenceTypes": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AbsenceType"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultAbsenceType": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/AbsenceType"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultHoursSubmissions": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SubmissionStatus"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultExternalItems": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CalendarItem"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultHoursTimesheetRow": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/TimesheetRow"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultHoursTimesheetRows": {
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetTimesheetRow"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "RestResultDateTimeRange": {
            "properties": {
                "data": {
                    "$ref": "#/definitions/DateTimeRange"
                },
                "metadata": {
                    "$ref": "#/definitions/MetaData"
                },
                "errors": {
                    "type": "array",
                    "items": {}
                },
                "debug": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "GetReviewByWeek": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "employee_name": {
                    "type": "string"
                },
                "start_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string"
                },
                "end_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string"
                },
                "status_id": {
                    "type": "string"
                },
                "status_category": {
                    "type": "string"
                },
                "status_label": {
                    "type": "string"
                }
            }
        },
        "GetReviewByWeekDetails": {
            "properties": {
                "employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "start_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string"
                },
                "end_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string"
                },
                "status_id": {
                    "type": "string"
                },
                "status_category": {
                    "type": "string"
                },
                "status_label": {
                    "type": "string"
                },
                "raster_hours": {
                    "type": "number",
                    "format": "float"
                },
                "written_hours": {
                    "type": "number",
                    "format": "float"
                },
                "overtime": {
                    "type": "number",
                    "format": "float"
                },
                "leave": {
                    "type": "number",
                    "format": "float"
                },
                "absence": {
                    "type": "number",
                    "format": "float"
                },
                "mileage": {
                    "type": "number",
                    "format": "float"
                },
                "costs": {
                    "type": "number",
                    "format": "float"
                },
                "declarability": {
                    "type": "number",
                    "format": "float"
                },
                "productivity": {
                    "type": "number",
                    "format": "float"
                },
                "productivity_target": {
                    "type": "number",
                    "format": "float"
                },
                "productivity_value": {
                    "type": "number",
                    "format": "float"
                },
                "productivity_value_target": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "GetReviewByWeekId": {
            "properties": {
                "employee_id": {
                    "type": "string"
                },
                "start_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string"
                },
                "end_date": {
                    "description": "Y-m-d, eg. 2020-01-01",
                    "type": "string"
                }
            }
        },
        "ReviewByWeekMetaData": {
            "properties": {
                "is_out_of_date": {
                    "description": "",
                    "type": "boolean"
                },
                "count": {
                    "description": "",
                    "type": "integer"
                },
                "total_count": {
                    "description": "",
                    "type": "integer"
                },
                "offset": {
                    "description": "",
                    "type": "integer"
                },
                "limit": {
                    "description": "",
                    "type": "integer"
                },
                "upper_limit": {
                    "description": "",
                    "type": "integer"
                },
                "nocleanup": {
                    "description": "",
                    "type": "boolean"
                },
                "checksum": {
                    "description": "",
                    "type": "string"
                }
            }
        },
        "Right": {
            "properties": {
                "module_key": {
                    "type": "string"
                },
                "module_label": {
                    "type": "string"
                },
                "right_key": {
                    "type": "string"
                },
                "right_label": {
                    "type": "string"
                },
                "rightsgroup_label": {
                    "type": "string"
                }
            }
        },
        "DuplicateSalesService": {},
        "GetQuote": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "quotetemplate": {
                    "$ref": "#/definitions/QuoteTemplate"
                },
                "send_type": {
                    "type": "string",
                    "enum": [
                        "printer",
                        "email",
                        "email_approval"
                    ]
                },
                "quote_number": {
                    "type": "string"
                },
                "quote_date": {
                    "type": "string"
                },
                "quotestatus": {
                    "$ref": "#/definitions/QuoteStatus"
                },
                "json": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/QuoteSalesService"
                    }
                },
                "total_excl": {
                    "type": "string"
                },
                "total_incl": {
                    "type": "string"
                },
                "total_vat": {
                    "type": "string"
                },
                "vat": {
                    "type": "object"
                },
                "grand_totals": {
                    "type": "object"
                },
                "receivers": {
                    "type": "object"
                },
                "valid_days": {
                    "type": "integer"
                },
                "payment_term": {
                    "type": "object"
                },
                "download_url": {
                    "type": "object"
                },
                "is_sepa_authorization": {
                    "type": "integer"
                },
                "is_outdated": {
                    "type": "integer"
                },
                "is_blocked": {
                    "type": "integer"
                },
                "created_by": {
                    "type": "string"
                },
                "last_updated_approval_status": {
                    "type": "string"
                },
                "sent_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "sales_id": {
                    "type": "string"
                },
                "quote_subject": {
                    "type": "string"
                },
                "customer_reference": {
                    "type": "string"
                }
            }
        },
        "GetSales": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "responsible_employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "person": {
                    "$ref": "#/definitions/GetPersonSimple"
                },
                "organization": {
                    "$ref": "#/definitions/GetOrganizationSimple"
                },
                "progress": {
                    "$ref": "#/definitions/SalesProgress"
                },
                "source": {
                    "$ref": "#/definitions/SalesSource"
                },
                "status": {
                    "$ref": "#/definitions/SalesStatus"
                },
                "separate_invoice_recipient": {
                    "$ref": "#/definitions/GetSeparateInvoiceRecipient"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetTeamSimple"
                    }
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetCustomField"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "status_updated_at": {
                    "type": "string"
                },
                "simplicate_url": {
                    "type": "string"
                },
                "linked_project": {
                    "$ref": "#/definitions/GetProjectSimple"
                },
                "my_organization_profile_id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "reason": {
                    "$ref": "#/definitions/SalesReason"
                },
                "contact": {
                    "$ref": "#/definitions/ContactPerson"
                },
                "subject": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "expected_closing_date": {
                    "type": "string"
                },
                "expected_revenue": {
                    "type": "number",
                    "format": "float"
                },
                "note": {
                    "type": "string"
                },
                "chance_to_score": {
                    "type": "integer"
                },
                "lost_to_competitor": {
                    "$ref": "#/definitions/LostToCompetitor"
                }
            }
        },
        "GetSalesService": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "invoice_date": {
                    "type": "string"
                },
                "hour_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetSalesServiceHoursType"
                    }
                },
                "cost_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetSalesServiceCostType"
                    }
                },
                "subscription_cycle": {
                    "type": "string",
                    "enum": [
                        "Month",
                        "Quarter",
                        "Half_a_year",
                        "Year"
                    ]
                },
                "track_cost": {
                    "type": "boolean"
                },
                "vat_class": {
                    "$ref": "#/definitions/VatClass"
                },
                "created_at": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetSalesServiceHoursType"
                    }
                },
                "updated_at": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetSalesServiceHoursType"
                    }
                },
                "sales_id": {
                    "type": "string"
                },
                "default_service_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "invoice_method": {
                    "type": "string",
                    "enum": [
                        "FixedFee"
                    ]
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "show_itemtype": {
                    "type": "integer"
                },
                "total": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "explanation": {
                    "type": "string"
                },
                "track_hours": {
                    "type": "boolean"
                }
            }
        },
        "GetSeparateInvoiceRecipient": {
            "properties": {
                "organization": {
                    "$ref": "#/definitions/GetOrganizationSimple"
                },
                "person": {
                    "$ref": "#/definitions/GetPersonSimple"
                },
                "contact": {
                    "$ref": "#/definitions/GetContactSimple"
                },
                "is_separate_invoice_recipient": {
                    "type": "boolean"
                }
            }
        },
        "LostToCompetitor": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "PostDuplicateSales": {
            "properties": {
                "is_new_subject": {
                    "type": "boolean"
                },
                "subject": {
                    "type": "string"
                },
                "is_new_responsible_employee": {
                    "type": "boolean"
                },
                "responsible_employee_id": {
                    "type": "string"
                },
                "is_new_organization_or_person": {
                    "type": "boolean"
                },
                "organization_id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                }
            }
        },
        "PostQuote": {
            "properties": {
                "quotetemplate_id": {
                    "type": "string"
                },
                "sales_id": {
                    "type": "string"
                },
                "quote_subject": {
                    "type": "string"
                },
                "json": {
                    "type": "string"
                },
                "customer_reference": {
                    "type": "string"
                },
                "is_blocked": {
                    "type": "integer"
                }
            }
        },
        "PostSales": {
            "properties": {
                "responsible_employee_id": {
                    "type": "string"
                },
                "progress_id": {
                    "type": "string"
                },
                "source_id": {
                    "type": "string"
                },
                "status_id": {
                    "type": "string"
                },
                "teams": {
                    "description": "See /hrm/team",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostTeam"
                    }
                },
                "separate_invoice_recipient": {
                    "$ref": "#/definitions/PostSeparateInvoiceRecipient"
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostCustomFieldValue"
                    }
                },
                "my_organization_profile_id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "reason": {
                    "$ref": "#/definitions/SalesReason"
                },
                "contact": {
                    "$ref": "#/definitions/ContactPerson"
                },
                "subject": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "expected_closing_date": {
                    "type": "string"
                },
                "expected_revenue": {
                    "type": "number",
                    "format": "float"
                },
                "note": {
                    "type": "string"
                },
                "chance_to_score": {
                    "type": "integer"
                },
                "lost_to_competitor": {
                    "$ref": "#/definitions/LostToCompetitor"
                }
            }
        },
        "PostSalesService": {
            "properties": {
                "revenue_group_id": {
                    "description": "See /sales/revenuegroup",
                    "type": "string"
                },
                "sales_id": {
                    "type": "string"
                },
                "default_service_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "invoice_method": {
                    "type": "string",
                    "enum": [
                        "FixedFee"
                    ]
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "show_itemtype": {
                    "type": "integer"
                },
                "total": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "subscription_cycle": {
                    "type": "string",
                    "enum": [
                        "Month",
                        "Quarter",
                        "Half_a_year",
                        "Year"
                    ]
                },
                "explanation": {
                    "type": "string"
                },
                "track_hours": {
                    "type": "boolean"
                },
                "track_cost": {
                    "type": "boolean"
                }
            }
        },
        "PostSeparateInvoiceRecipient": {
            "properties": {
                "organization_id": {
                    "description": "See /crm/organization",
                    "type": "string"
                },
                "person_id": {
                    "description": "See /crm/person",
                    "type": "string"
                },
                "contact_id": {
                    "description": "See 'linked_persons_contact' in /crm/organization, or 'linked_as_contact_to_organization' in /crm/person, or /crm/contactperson",
                    "type": "string"
                },
                "is_separate_invoice_recipient": {
                    "type": "boolean"
                }
            }
        },
        "PutQuoteEmail": {
            "properties": {
                "subject": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "attachments": {
                    "type": "array"
                },
                "to": {
                    "type": "array"
                },
                "cc": {
                    "type": "array"
                },
                "bcc": {
                    "type": "array"
                }
            }
        },
        "Quote": {
            "properties": {
                "sales_id": {
                    "type": "string"
                },
                "quote_subject": {
                    "type": "string"
                },
                "json": {
                    "type": "string"
                },
                "customer_reference": {
                    "type": "string"
                },
                "is_blocked": {
                    "type": "integer"
                }
            }
        },
        "QuoteContentBlock": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "json": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "QuotePortalLabel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "quote_template_id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "fallback_value": {
                    "type": "string"
                }
            }
        },
        "QuoteSalesService": {
            "properties": {
                "vat_code": {
                    "type": "string"
                },
                "vat_description": {
                    "type": "string"
                },
                "sales_id": {
                    "type": "string"
                },
                "default_service_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "invoice_method": {
                    "type": "string",
                    "enum": [
                        "FixedFee"
                    ]
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "show_itemtype": {
                    "type": "integer"
                },
                "total": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "subscription_cycle": {
                    "type": "string",
                    "enum": [
                        "Month",
                        "Quarter",
                        "Half_a_year",
                        "Year"
                    ]
                },
                "explanation": {
                    "type": "string"
                },
                "track_hours": {
                    "type": "boolean"
                },
                "track_cost": {
                    "type": "boolean"
                }
            }
        },
        "QuoteStatus": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "QuotetemplateConfigurationMetaData": {
            "properties": {
                "default_view_and_sign_button_text": {
                    "description": "Default text for view_and_sign_button for the quotetemplate e-mail",
                    "type": "string"
                },
                "default_view_and_sign_button_bg_color": {
                    "description": "Default background color for view_and_sign_button for the quotetemplate e-mail",
                    "type": "string"
                },
                "default_view_and_sign_button_text_color": {
                    "description": "Default text color for view_and_sign_button for the quotetemplate e-mail",
                    "type": "string"
                },
                "count": {
                    "description": "",
                    "type": "integer"
                },
                "total_count": {
                    "description": "",
                    "type": "integer"
                },
                "offset": {
                    "description": "",
                    "type": "integer"
                },
                "limit": {
                    "description": "",
                    "type": "integer"
                },
                "upper_limit": {
                    "description": "",
                    "type": "integer"
                },
                "nocleanup": {
                    "description": "",
                    "type": "boolean"
                },
                "checksum": {
                    "description": "",
                    "type": "string"
                }
            }
        },
        "QuotetemplateMetaData": {
            "properties": {
                "configuration": {
                    "$ref": "#/definitions/QuotetemplateConfigurationMetaData"
                },
                "count": {
                    "description": "",
                    "type": "integer"
                },
                "total_count": {
                    "description": "",
                    "type": "integer"
                },
                "offset": {
                    "description": "",
                    "type": "integer"
                },
                "limit": {
                    "description": "",
                    "type": "integer"
                },
                "upper_limit": {
                    "description": "",
                    "type": "integer"
                },
                "nocleanup": {
                    "description": "",
                    "type": "boolean"
                },
                "checksum": {
                    "description": "",
                    "type": "string"
                }
            }
        },
        "RecentSalesQuote": {
            "properties": {
                "quote_number": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/RecentSalesQuoteStatus"
                }
            }
        },
        "RecentSalesQuoteStatus": {
            "properties": {
                "id": {
                    "type": "integer",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ]
                },
                "status_label": {
                    "type": "string"
                }
            }
        },
        "RevenueGroup": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "Sales": {
            "properties": {
                "my_organization_profile_id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "contact_id": {
                    "type": "string"
                },
                "reason": {
                    "$ref": "#/definitions/SalesReason"
                },
                "contact": {
                    "$ref": "#/definitions/ContactPerson"
                },
                "subject": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "expected_closing_date": {
                    "type": "string"
                },
                "expected_revenue": {
                    "type": "number",
                    "format": "float"
                },
                "note": {
                    "type": "string"
                },
                "chance_to_score": {
                    "type": "integer"
                },
                "lost_to_competitor": {
                    "$ref": "#/definitions/LostToCompetitor"
                }
            }
        },
        "SalesProgress": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "chance_to_score": {
                    "type": "number",
                    "format": "float"
                },
                "position": {
                    "type": "integer"
                }
            }
        },
        "SalesProgressHistory": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "sales": {},
                "sales_id": {
                    "type": "string"
                },
                "from_sales_progress": {
                    "$ref": "#/definitions/SalesProgress"
                },
                "from_sales_progress_id": {
                    "type": "string"
                },
                "to_sales_progress": {
                    "$ref": "#/definitions/SalesProgress"
                },
                "to_sales_progress_id": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                }
            }
        },
        "SalesReason": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                }
            }
        },
        "SalesService": {
            "properties": {
                "sales_id": {
                    "type": "string"
                },
                "default_service_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "invoice_method": {
                    "type": "string",
                    "enum": [
                        "FixedFee"
                    ]
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "show_itemtype": {
                    "type": "integer"
                },
                "total": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "subscription_cycle": {
                    "type": "string",
                    "enum": [
                        "Month",
                        "Quarter",
                        "Half_a_year",
                        "Year"
                    ]
                },
                "explanation": {
                    "type": "string"
                },
                "track_hours": {
                    "type": "boolean"
                },
                "track_cost": {
                    "type": "boolean"
                }
            }
        },
        "SalesSource": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "SalesStatus": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "SeparateInvoiceRecipient": {
            "properties": {
                "is_separate_invoice_recipient": {
                    "type": "boolean"
                }
            }
        },
        "DefaultService": {
            "properties": {
                "my_organization_profile_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price_editable": {
                    "type": "boolean"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "GetDefaultService": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "vat_class": {
                    "$ref": "#/definitions/VatClass"
                },
                "revenue_group": {
                    "$ref": "#/definitions/RevenueGroup"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "modified": {
                    "type": "string"
                },
                "my_organization_profile_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price_editable": {
                    "type": "boolean"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "GetService": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "subscription_cycle": {
                    "type": "string",
                    "enum": [
                        "Month",
                        "Quarter",
                        "Half_a_year",
                        "Year"
                    ]
                },
                "budget": {
                    "type": "number",
                    "format": "float"
                },
                "default_service_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "explanation": {
                    "type": "string"
                },
                "invoice_method": {
                    "type": "string",
                    "enum": [
                        "Hours",
                        "FixedFee",
                        "Subscription"
                    ]
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "track_hours": {
                    "type": "boolean"
                },
                "track_cost": {
                    "type": "boolean"
                }
            }
        },
        "Installment": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "percentage": {
                    "type": "number",
                    "format": "double"
                },
                "price": {
                    "type": "number",
                    "format": "double"
                },
                "order": {
                    "type": "integer"
                },
                "expiration_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "open",
                        "flushed",
                        "invoiced"
                    ]
                },
                "invoiced_date": {
                    "type": "string"
                },
                "invoice_id": {
                    "type": "string"
                },
                "invoice_line_id": {
                    "type": "string"
                }
            }
        },
        "PostDefaultService": {
            "properties": {
                "vat_class_id": {
                    "type": "string"
                },
                "revenue_group_id": {
                    "type": "string"
                },
                "my_organization_profile_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price_editable": {
                    "type": "boolean"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "PostService": {
            "properties": {
                "vat_class_id": {
                    "description": "See /invoices/vatclass",
                    "type": "string"
                },
                "revenue_group_id": {
                    "description": "See /sales/revenuegroup",
                    "type": "string"
                },
                "invoice_method": {
                    "type": "string",
                    "enum": [
                        "FixedFee"
                    ]
                },
                "hour_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostProjectServiceHoursType"
                    }
                },
                "default_service_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "explanation": {
                    "type": "string"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "track_hours": {
                    "type": "boolean"
                },
                "track_cost": {
                    "type": "boolean"
                }
            }
        },
        "Service": {
            "properties": {
                "default_service_id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "explanation": {
                    "type": "string"
                },
                "invoice_method": {
                    "type": "string",
                    "enum": [
                        "Hours",
                        "FixedFee",
                        "Subscription"
                    ]
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "track_hours": {
                    "type": "boolean"
                },
                "track_cost": {
                    "type": "boolean"
                }
            }
        },
        "GetSharedItem": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "string"
                },
                "shared": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                }
            }
        },
        "IsSatisfied": {
            "properties": {
                "value": {
                    "type": "boolean"
                },
                "reason": {
                    "$ref": "#/definitions/IsSatisfiedReason"
                }
            }
        },
        "IsSatisfiedReason": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "translated_message": {
                    "type": "string"
                }
            }
        },
        "PostSharedItem": {
            "properties": {
                "tag": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "string"
                },
                "shared": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                }
            }
        },
        "Task": {
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "Attachment": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "attachment_type": {
                    "$ref": "#/definitions/AttachmentType"
                },
                "title": {
                    "type": "string"
                },
                "document_id": {
                    "description": "See /documents/document",
                    "type": "string"
                },
                "download_link": {
                    "type": "string"
                }
            }
        },
        "AttachmentType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "ContentField": {
            "properties": {
                "title": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "Creator": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                }
            }
        },
        "GetMessage": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Attachment"
                    }
                },
                "message_type": {
                    "$ref": "#/definitions/MessageType"
                },
                "linked_to": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LinkedToEntity"
                    }
                },
                "created_by": {
                    "$ref": "#/definitions/Creator"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "content_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContentField"
                    }
                },
                "content": {
                    "type": "string"
                },
                "display_date": {
                    "type": "string"
                }
            }
        },
        "LinkedToEntity": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "Message": {
            "properties": {
                "title": {
                    "type": "string"
                },
                "content_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContentField"
                    }
                },
                "content": {
                    "type": "string"
                },
                "display_date": {
                    "type": "string"
                }
            }
        },
        "MessageType": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "blocked": {
                    "type": "boolean"
                },
                "log_action": {
                    "type": "string"
                }
            }
        },
        "PostAttachment": {
            "properties": {
                "message_id": {
                    "description": "See /timeline/message",
                    "type": "string"
                },
                "document_id": {
                    "description": "See /documents/document",
                    "type": "string"
                }
            }
        },
        "PostMessage": {
            "properties": {
                "messagetype_id": {
                    "type": "string"
                },
                "linked_to": {
                    "$ref": "#/definitions/PostMessageLinkedTo"
                },
                "created_by_id": {
                    "description": "employee_id as seen in /crm/employee",
                    "type": "string",
                    "default": "employee:abc123"
                },
                "title": {
                    "type": "string"
                },
                "content_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContentField"
                    }
                },
                "content": {
                    "type": "string"
                },
                "display_date": {
                    "type": "string"
                }
            }
        },
        "PostMessageLinkedTo": {
            "properties": {
                "sales_id": {
                    "description": "See /sales/sale",
                    "type": "string"
                },
                "project_id": {
                    "description": "See /projects/project",
                    "type": "string"
                },
                "employee_id": {
                    "description": "See /hrm/employee",
                    "type": "string"
                },
                "invoice_id": {
                    "description": "See /invoices/invoice",
                    "type": "string"
                },
                "person_id": {
                    "description": "See /crm/person",
                    "type": "string"
                },
                "organization_id": {
                    "description": "See /crm/organization",
                    "type": "string"
                }
            }
        },
        "GetTimer": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "seconds_spent": {
                    "type": "integer"
                },
                "min_seconds_step": {
                    "type": "integer"
                },
                "employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "project": {
                    "$ref": "#/definitions/GetProjectSimple"
                },
                "projectservice": {
                    "$ref": "#/definitions/GetProjectServiceSimple"
                },
                "hourstype": {
                    "$ref": "#/definitions/GetHoursType"
                },
                "related_hours": {
                    "$ref": "#/definitions/GetHoursSimple"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "running",
                        "paused",
                        "finished"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "description": "JSON",
                    "type": "string"
                }
            }
        },
        "PostTimer": {
            "properties": {
                "employee_id": {
                    "description": "See /hrm/employee",
                    "type": "string"
                },
                "project_id": {
                    "description": "See /projects/project",
                    "type": "string"
                },
                "projectservice_id": {
                    "description": "See /projects/projectservice",
                    "type": "string"
                },
                "hourstype_id": {
                    "description": "See /hours/hourstype",
                    "type": "string"
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "running",
                        "paused",
                        "finished"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "description": "JSON",
                    "type": "string"
                }
            }
        },
        "PutTimer": {
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "running",
                        "paused",
                        "finished"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "description": "JSON",
                    "type": "string"
                }
            }
        },
        "Timer": {
            "properties": {
                "state": {
                    "type": "string",
                    "enum": [
                        "running",
                        "paused",
                        "finished"
                    ]
                },
                "description": {
                    "type": "string"
                },
                "metadata": {
                    "description": "JSON",
                    "type": "string"
                }
            }
        },
        "PostChunked": {
            "properties": {
                "file_name": {
                    "type": "string"
                },
                "file_size": {
                    "description": "File size in bytes",
                    "type": "string"
                }
            }
        },
        "PutChunked": {
            "properties": {
                "chunk": {
                    "description": "Base64 encoded string of data",
                    "type": "string"
                },
                "checksum": {
                    "description": "Optional. md5 checksum of the 'chunk' property -- can be used to validate that the API has received the right data",
                    "type": "string"
                }
            }
        },
        "Avatar": {
            "properties": {
                "url_small": {
                    "type": "string"
                },
                "url_large": {
                    "type": "string"
                },
                "initials": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "AvatarPublic": {
            "properties": {
                "full_name": {
                    "type": "string"
                },
                "url_small": {
                    "type": "string"
                },
                "url_large": {
                    "type": "string"
                },
                "initials": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "AvatarSimple": {
            "properties": {
                "initials": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "User": {
            "properties": {
                "username": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "initials": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "family_name_prefix": {
                    "type": "string"
                },
                "family_name": {
                    "type": "string"
                },
                "birthdate": {
                    "type": "string"
                },
                "is_authy_enabled": {
                    "type": "boolean"
                },
                "is_employee": {
                    "type": "boolean"
                },
                "is_light_user": {
                    "type": "boolean"
                },
                "employee_id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "is_blocked": {
                    "type": "boolean"
                },
                "is_lock_nav": {
                    "type": "boolean"
                },
                "key_identifier": {
                    "type": "string"
                },
                "timezone": {
                    "$ref": "#/definitions/Timezone"
                },
                "country": {
                    "$ref": "#/definitions/Country"
                },
                "hours_view_mode": {
                    "type": "string",
                    "enum": [
                        "agenda",
                        "grid",
                        "both"
                    ]
                },
                "is_account_owner": {
                    "type": "boolean"
                },
                "has_external_agenda_integration": {
                    "type": "boolean"
                },
                "rights": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Right"
                    }
                }
            }
        },
        "UserBetaFeatureRequest": {},
        "Comment": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "employee": {
                    "$ref": "#/definitions/GetEmployeeSimple"
                },
                "attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetDocument"
                    }
                }
            }
        },
        "CreatedBy": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "CurrentTask": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "can_change_destination": {
                    "type": "boolean"
                },
                "will_send_email": {
                    "type": "boolean"
                },
                "is_return_to_sender": {
                    "type": "boolean"
                },
                "average_hours_cost": {
                    "type": "number",
                    "format": "float"
                },
                "can_be_transferred": {
                    "type": "boolean"
                },
                "employees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CurrentTaskEmployee"
                    }
                }
            }
        },
        "CurrentTaskEmployee": {
            "properties": {
                "employee_id": {
                    "type": "string"
                }
            }
        },
        "DefaultAction": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "is_response_required": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "DefaultTask": {
            "properties": {
                "order": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "can_change_destination": {
                    "type": "boolean"
                },
                "will_send_email": {
                    "type": "boolean"
                },
                "is_return_to_sender": {
                    "type": "boolean"
                },
                "average_hours_cost": {
                    "type": "number",
                    "format": "float"
                },
                "can_be_transferred": {
                    "type": "boolean"
                }
            }
        },
        "DefaultWorkflow": {
            "properties": {
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "can_have_attachment": {
                    "type": "boolean"
                },
                "is_blocked": {
                    "type": "boolean"
                },
                "is_for_crm": {
                    "type": "boolean"
                },
                "is_for_contact": {
                    "type": "boolean"
                },
                "is_for_sale": {
                    "type": "boolean"
                },
                "is_for_debtor": {
                    "type": "boolean"
                },
                "is_for_project": {
                    "type": "boolean"
                },
                "is_for_subscription": {
                    "type": "boolean"
                },
                "is_for_employee": {
                    "type": "boolean"
                },
                "is_for_invoice": {
                    "type": "boolean"
                },
                "is_for_myorganizationprofile": {
                    "type": "boolean"
                },
                "is_visible_on_all": {
                    "type": "boolean"
                }
            }
        },
        "DefaultWorkflowGroup": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "is_blocked": {
                    "type": "boolean"
                }
            }
        },
        "GetDefaultAction": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "task": {
                    "$ref": "#/definitions/GetSimpleDefaultTask"
                },
                "to_task": {
                    "$ref": "#/definitions/GetSimpleDefaultTask"
                },
                "name": {
                    "type": "string"
                },
                "is_response_required": {
                    "type": "boolean"
                },
                "color": {
                    "type": "string"
                }
            }
        },
        "GetDefaultTask": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "defaultworkflow": {
                    "$ref": "#/definitions/GetSimpleDefaultWorkflow"
                },
                "order": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "can_change_destination": {
                    "type": "boolean"
                },
                "will_send_email": {
                    "type": "boolean"
                },
                "is_return_to_sender": {
                    "type": "boolean"
                },
                "average_hours_cost": {
                    "type": "number",
                    "format": "float"
                },
                "can_be_transferred": {
                    "type": "boolean"
                }
            }
        },
        "GetDefaultWorkflow": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "workflowgroup": {
                    "$ref": "#/definitions/GetDefaultWorkflowGroup"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "can_have_attachment": {
                    "type": "boolean"
                },
                "is_blocked": {
                    "type": "boolean"
                },
                "is_for_crm": {
                    "type": "boolean"
                },
                "is_for_contact": {
                    "type": "boolean"
                },
                "is_for_sale": {
                    "type": "boolean"
                },
                "is_for_debtor": {
                    "type": "boolean"
                },
                "is_for_project": {
                    "type": "boolean"
                },
                "is_for_subscription": {
                    "type": "boolean"
                },
                "is_for_employee": {
                    "type": "boolean"
                },
                "is_for_invoice": {
                    "type": "boolean"
                },
                "is_for_myorganizationprofile": {
                    "type": "boolean"
                },
                "is_visible_on_all": {
                    "type": "boolean"
                }
            }
        },
        "GetDefaultWorkflowGroup": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "is_blocked": {
                    "type": "boolean"
                }
            }
        },
        "GetSimpleDefaultTask": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "description": {
                    "type": "boolean"
                }
            }
        },
        "GetSimpleDefaultWorkflow": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "GetWorkflow": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "defaultworkflow": {
                    "$ref": "#/definitions/GetSimpleDefaultWorkflow"
                },
                "current_task": {
                    "$ref": "#/definitions/CurrentTask"
                },
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetDefaultAction"
                    }
                },
                "linked_to": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LinkedTo"
                    }
                },
                "filename": {
                    "type": "string"
                },
                "attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GetDocument"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                },
                "created_by": {
                    "$ref": "#/definitions/CreatedBy"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "deadline_date": {
                    "type": "string"
                }
            }
        },
        "LinkedTo": {
            "properties": {
                "organization_id": {
                    "type": "string"
                },
                "person_id": {
                    "type": "string"
                },
                "sales_id": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                },
                "invoice_id": {
                    "type": "string"
                },
                "employee_id": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "PostWorkflow": {
            "properties": {
                "defaultworkflow_id": {
                    "type": "string"
                },
                "created_by": {
                    "$ref": "#/definitions/CreatedBy"
                },
                "linked_to": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LinkedTo"
                    }
                },
                "attachments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PostDocument"
                    }
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Comment"
                    }
                },
                "destination_employee_id": {
                    "type": "string"
                },
                "transfer_to_employee_id": {
                    "type": "string"
                },
                "transfer_to_message": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "deadline_date": {
                    "type": "string"
                }
            }
        },
        "Workflow": {
            "properties": {
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "deadline_date": {
                    "type": "string"
                }
            }
        },
        "WorkflowItem": {
            "properties": {
                "subject": {
                    "type": "string"
                }
            }
        },
        "WorkflowItemType": {
            "properties": {
                "type": {
                    "type": "string"
                }
            }
        }
    },
    "parameters": {
        "id": {
            "name": "id",
            "in": "path",
            "description": "The template's id",
            "required": true,
            "type": "string",
            "collectionFormat": "multi"
        },
        "offset": {
            "name": "offset",
            "in": "query",
            "description": "The offset to search from",
            "required": false,
            "type": "integer",
            "collectionFormat": "multi"
        },
        "limit": {
            "name": "limit",
            "in": "query",
            "description": "The limit of max allowed results",
            "required": false,
            "type": "integer",
            "collectionFormat": "multi",
            "default": 5
        },
        "filter": {
            "name": "filter",
            "in": "query",
            "description": "A collection of field filters",
            "required": false,
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "sort": {
            "name": "sort",
            "in": "query",
            "description": "Sort the result by column name",
            "required": false,
            "type": "string"
        },
        "select": {
            "name": "select",
            "in": "query",
            "description": "Select only specific fields to return",
            "required": false,
            "type": "string"
        }
    },
    "securityDefinitions": {
        "basic_auth": {
            "type": "basic",
            "name": "Basic Authentication",
            "in": "header"
        },
        "api_key": {
            "type": "apiKey",
            "name": "API Key Authentication",
            "in": "header"
        }
    },
    "tags": [
        {
            "name": "Application",
            "description": "Operations about application calls",
            "externalDocs": {
                "description": "Application calls like settings",
                "url": "#"
            }
        },
        {
            "name": "CRM",
            "externalDocs": {
                "description": "Examples",
                "url": "#"
            }
        },
        {
            "name": "Custom Fields",
            "externalDocs": {
                "description": "Examples",
                "url": "#"
            }
        },
        {
            "name": "Documents"
        },
        {
            "name": "Hours",
            "externalDocs": {
                "description": "Examples",
                "url": "#"
            }
        },
        {
            "name": "HRM",
            "externalDocs": {
                "description": "Examples",
                "url": "#"
            }
        },
        {
            "name": "Inbox",
            "externalDocs": {
                "description": "Examples",
                "url": "#"
            }
        },
        {
            "name": "Invoices",
            "externalDocs": {
                "description": "Examples",
                "url": "#"
            }
        },
        {
            "name": "Merger",
            "description": "Operations about merging entities",
            "externalDocs": {
                "description": "",
                "url": "#"
            }
        },
        {
            "name": "Mileage",
            "externalDocs": {
                "description": "Examples",
                "url": "#"
            }
        },
        {
            "name": "Projects",
            "externalDocs": {
                "description": "Examples",
                "url": "#"
            }
        },
        {
            "name": "Sales",
            "externalDocs": {
                "description": "Examples",
                "url": "#"
            }
        },
        {
            "name": "Services",
            "externalDocs": {
                "description": "Examples",
                "url": "#"
            }
        },
        {
            "name": "Shared",
            "externalDocs": {
                "description": "",
                "url": ""
            }
        },
        {
            "name": "Tasks",
            "externalDocs": {
                "description": "Examples",
                "url": "#"
            }
        },
        {
            "name": "Timeline",
            "externalDocs": {
                "description": "Examples",
                "url": "#"
            }
        },
        {
            "name": "Upload",
            "description": "Operations about Uploads"
        },
        {
            "name": "Workflows"
        }
    ],
    "externalDocs": {
        "description": "Find out more about API Simplicate",
        "url": "#"
    }
}